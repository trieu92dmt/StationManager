@model SaleOrderHeader80ViewModel

@{
    ViewBag.Title = LanguageResource.Btn_View + " " + LanguageResource.SaleOrderHeader80.ToLower();
    string CurrentController = ConstController.SaleOrderHeader100;
    string CurrentArea = ConstArea.MES;

    string CurrentUrl = HtmlExtensions.GetCurrentUrl(CurrentArea, CurrentController);
}
<style>
    #uploadTable tr td {
        vertical-align: top;
    }

    #TableSaleOrderItems .dataTables_scrollBody {
        min-height: 510px;
    }
</style>

@Html.AntiForgeryToken()
@Html.ValidationSummary(true)

<div class="content-header clearfix">
    <h1 class="pull-left">
        @ViewBag.Title
        @HtmlExtensions.BackButton(CurrentArea, CurrentController)
    </h1>
    <div class="pull-right">

    </div>
</div>

<div class="content">
    <div class="panel-group">
        <div class="panel panel-default">
            <div class="box">
                <div class="box-body">
                    <div class="form-group row">
                        <div class="col-md-4">
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.TooltipLabelFor(p => p.VBELN)
                                </div>
                                <div class="col-md-9">
                                    @Html.RequiredTextboxFor(p => p.VBELN, new { @readonly = "readonly" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-md-4">
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.TooltipLabelFor(p => p.KUNNR)
                                </div>
                                <div class="col-md-9">
                                    @Html.RequiredTextboxFor(p => p.KUNNR, new { @readonly = "readonly" })
                                </div>
                            </div>
                        </div>

                    </div>

                    <div class="form-group row">
                        <div class="col-md-4">
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.TooltipLabelFor(p => p.BSTNK)
                                </div>
                                <div class="col-md-9">
                                    @Html.RequiredTextboxFor(p => p.BSTNK, new { @readonly = "readonly" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.TooltipLabelFor(p => p.AUDAT)
                                </div>
                                <div class="col-md-9">
                                    @Html.RequiredTextboxFor(p => p.AUDAT, "{0:yyyy-MM-dd}", new { type = "date", @readonly = "readonly" })
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>

            <div class="box">
                <div class="box-header with-border">
                    <h5 class="box-title">Sales</h5>
                    <div class="box-tools pull-right">
                        <button type="button" class="btn btn-box-tool" data-widget="collapse">
                            <i class="fa fa-minus"></i>
                        </button>
                    </div>
                </div>
                <div class="box-body">
                    <div class="form-group row">
                        <div class="col-md-4">
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.TooltipLabelFor(p => p.VDATU)
                                </div>
                                <div class="col-md-9">
                                    @Html.RequiredTextboxFor(p => p.VDATU, "{0:yyyy-MM-dd}", new { type = "date", @readonly = "readonly" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.TooltipLabelFor(p => p.AUART)
                                </div>
                                <div class="col-md-9">
                                    @Html.RequiredTextboxFor(p => p.AUART, new { @readonly = "readonly" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group row">

                        <div class="col-md-4">
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.TooltipLabelFor(p => p.VKORG)
                                </div>
                                <div class="col-md-9">
                                    @Html.RequiredTextboxFor(p => p.VKORG, new { type = "number", @readonly = "readonly" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.TooltipLabelFor(p => p.VTWEG)
                                </div>
                                <div class="col-md-9">
                                    @Html.RequiredTextboxFor(p => p.VTWEG, new { type = "number", @readonly = "readonly" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group row">

                        <div class="col-md-4">
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.TooltipLabelFor(p => p.SPART)
                                </div>
                                <div class="col-md-9">
                                    @Html.RequiredTextboxFor(p => p.SPART, new { type = "number", @readonly = "readonly" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.TooltipLabelFor(p => p.PS_PSP_PNR_OUTPUT)
                                </div>
                                <div class="col-md-9">
                                    @Html.RequiredTextboxFor(p => p.PS_PSP_PNR_OUTPUT, new { @readonly = "readonly" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group row">

                        <div class="col-md-4">
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.TooltipLabelFor(p => p.LFGSK)
                                </div>
                                <div class="col-md-9">
                                    @Html.RequiredTextboxFor(p => p.LFGSK, new { @readonly = "readonly" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.TooltipLabelFor(p => p.ERNAM)
                                </div>
                                <div class="col-md-9">
                                    @Html.RequiredTextboxFor(p => p.ERNAM, new { @readonly = "readonly" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group row">

                        <div class="col-md-4">
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.TooltipLabelFor(p => p.ERDAT)
                                </div>
                                <div class="col-md-9">
                                    @Html.RequiredTextboxFor(p => p.ERDAT, "{0:yyyy-MM-dd}", new { type = "date", @readonly = "readonly" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.TooltipLabelFor(p => p.ERZET)
                                </div>
                                <div class="col-md-9">
                                    @Html.RequiredTextboxFor(p => p.ERZET, new { @readonly = "readonly" })
                                </div>
                            </div>
                        </div>
                    </div>


                </div>

            </div>
            <div class="box">

                <div class="box-body">
                    <div id="exTab1" class="nav-tabs-custom">
                        <div class="tab-content clearfix">
                            <ul class="nav nav-pills nav-tabs" style="margin-bottom:10px!important">
                                <li class="active">
                                    <a href="#tab1" data-toggle="tab">All Items</a>
                                </li>
                                <li>
                                    <a href="#tab2" data-toggle="tab">BOM</a>
                                </li>
                                <li>
                                    <a href="#tab3" data-toggle="tab">BOM COMBO</a>
                                </li>
                            </ul>
                            <div class="tab-pane active" id="tab1">
                                <div id="TableSaleOrderItems"></div>
                            </div>
                            <div class="tab-pane" id="tab2">
                                <div id="TableBOMDetail"></div>
                            </div>
                            <div class="tab-pane" id="tab3">
                                <div id="TableBOMSALEDetail"></div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>


@section components {
    <div class="loading-modal"></div>
}

@section scripts {
    <script>
        $(document).ready(function () {
            loading2();
            //Lấy danh sách SO Item
            $.ajax({
                type: "GET",
                url: "/@CurrentUrl/_SaleOrderItemList",
                data: { VBELN: "@Model.VBELN" },
                success: function (xhr, status, error) {
                    if (xhr.Code == 500) {
                        //error
                        alertPopup(false, xhr.Data);
                    } else {
                        //success
                        $("#TableSaleOrderItems").html(xhr);
                        ISD.PaggingTableSaleOrderItems(true);
                    }

                    $(document).on("click", ".btn-edit", function (e) {
                        if ($(this).is('[disabled=disabled]')) {
                            e.preventDefault();
                            return false;
                        }
                    });
                },
                error: function (xhr, status, error) {
                    alertPopup(false, xhr.responseText);
                }
            });
            //Lấy danh sách BOM
            $.ajax({
                type: "POST",
                url: "/@CurrentUrl/_GetBOMDetails",
                data: { VBELN: "@Model.VBELN" },
                success: function (html) {
                    $("#TableBOMDetail").html(html);
                    ISD.PaggingTableBOMDetail(true);
                },
                error: function (xhr, status, error) {
                    alertPopup(false, xhr.responseText);
                }
            });
            //Lấy danh sách BOM SALE
            $.ajax({
                type: "POST",
                url: "/@CurrentUrl/_GetBOMDetails",
                data: { VBELN: "@Model.VBELN", STLAN: "@ConstBOMType.BOM_SALE" },
                success: function (html) {
                    $("#TableBOMSALEDetail").html(html);
                    ISD.PaggingTableBOMSALEDetail(true);
                },
                error: function (xhr, status, error) {
                    alertPopup(false, xhr.responseText);
                }
            });

        });

        $(document).ajaxStop(function () {
            $('body').removeClass('loading2');
        });

        $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {

            e.relatedTarget // previous active tab
            e.target // newly activated tab

            console.log("id of previous active tab: " + e.relatedTarget.id);
            console.log("id of newly activated tab: " + e.target.id);

            $(window).trigger('resize');

        });

        ISD.PaggingTableSaleOrderItems = function (isScrollX, pageLength) {
            if (!pageLength) {
                pageLength = 10;
            }
            $('#TableSaleOrderItems .dataTable').DataTable({
                pageLength: pageLength,
                paging: true,
                scrollX: isScrollX === true ? true : false,
                //fix bug squashed header
                autoWidth: true,
                initComplete: function (settings) {
                    $(window).resize();
                },
                drawCallback: function (settings) {
                    $(window).trigger('resize');
                },
                destroy: true,
                language: {
                    sProcessing: "Đang xử lý...",
                    sLengthMenu: "Xem _MENU_ mục",
                    sZeroRecords: "Không tìm thấy dòng nào phù hợp",
                    sInfo: "Đang xem _START_ đến _END_ trong tổng số _TOTAL_ mục",
                    sInfoEmpty: "Đang xem 0 đến 0 trong tổng số 0 mục",
                    sInfoFiltered: "(được lọc từ _MAX_ mục)",
                    sInfoPostFix: "",
                    sSearch: "Tìm nội dung:",
                    sUrl: "",
                    oPaginate: {
                        sFirst: "Đầu",
                        sPrevious: "&laquo;",
                        sNext: "&raquo;",
                        sLast: "Cuối"
                    },
                    columnDefs: [
                        { targets: [0, 1], visible: true },
                        { targets: 'no-sort', visible: false }
                    ],
                    //"decimal": ".",
                    //"thousands": ","
                },
                //"decimal": ".",
                //"thousands": ",",
                //"bLengthChange": false,
                //"bInfo": true,
                //"bPaginate" : false,
                "sDom": '<"top"flp>rt<"bottom"i><"clear">',
            });
        }
        ISD.PaggingTableBOMDetail = function (isScrollX, pageLength) {
            if (!pageLength) {
                pageLength = 10;
            }
            $('#TableBOMDetail .dataTable').DataTable({
                pageLength: pageLength,
                paging: true,
                scrollX: isScrollX === true ? true : false,
                //fix bug squashed header
                autoWidth: true,
                initComplete: function (settings) {
                    $(window).resize();
                },
                drawCallback: function (settings) {
                    $(window).trigger('resize');
                },
                destroy: true,
                language: {
                    sProcessing: "Đang xử lý...",
                    sLengthMenu: "Xem _MENU_ mục",
                    sZeroRecords: "Không tìm thấy dòng nào phù hợp",
                    sInfo: "Đang xem _START_ đến _END_ trong tổng số _TOTAL_ mục",
                    sInfoEmpty: "Đang xem 0 đến 0 trong tổng số 0 mục",
                    sInfoFiltered: "(được lọc từ _MAX_ mục)",
                    sInfoPostFix: "",
                    sSearch: "Tìm nội dung:",
                    sUrl: "",
                    oPaginate: {
                        sFirst: "Đầu",
                        sPrevious: "&laquo;",
                        sNext: "&raquo;",
                        sLast: "Cuối"
                    },
                    columnDefs: [
                        { targets: [0, 1], visible: true },
                        { targets: 'no-sort', visible: false }
                    ],
                    //"decimal": ".",
                    //"thousands": ","
                },
                //"decimal": ".",
                //"thousands": ",",
                //"bLengthChange": false,
                //"bInfo": true,
                //"bPaginate" : false,
                "sDom": '<"top"flp>rt<"bottom"i><"clear">',
            });
        }
        ISD.PaggingTableBOMSALEDetail = function (isScrollX, pageLength) {
            if (!pageLength) {
                pageLength = 10;
            }
            $('#TableBOMSALEDetail .dataTable').DataTable({
                pageLength: pageLength,
                paging: true,
                scrollX: isScrollX === true ? true : false,
                //fix bug squashed header
                autoWidth: true,
                initComplete: function (settings) {
                    $(window).resize();
                },
                drawCallback: function (settings) {
                    $(window).trigger('resize');
                },
                destroy: true,
                language: {
                    sProcessing: "Đang xử lý...",
                    sLengthMenu: "Xem _MENU_ mục",
                    sZeroRecords: "Không tìm thấy dòng nào phù hợp",
                    sInfo: "Đang xem _START_ đến _END_ trong tổng số _TOTAL_ mục",
                    sInfoEmpty: "Đang xem 0 đến 0 trong tổng số 0 mục",
                    sInfoFiltered: "(được lọc từ _MAX_ mục)",
                    sInfoPostFix: "",
                    sSearch: "Tìm nội dung:",
                    sUrl: "",
                    oPaginate: {
                        sFirst: "Đầu",
                        sPrevious: "&laquo;",
                        sNext: "&raquo;",
                        sLast: "Cuối"
                    },
                    columnDefs: [
                        { targets: [0, 1], visible: true },
                        { targets: 'no-sort', visible: false }
                    ],
                    //"decimal": ".",
                    //"thousands": ","
                },
                //"decimal": ".",
                //"thousands": ",",
                //"bLengthChange": false,
                //"bInfo": true,
                //"bPaginate" : false,
                "sDom": '<"top"flp>rt<"bottom"i><"clear">',
            });
        }
          @*$(document).on("click", ".btn-seemore", function () {
            var hasClass = $(".hidden-fields").hasClass("hidden");
            if (hasClass == true) {
                $(".hidden-fields").removeClass("hidden");
                $(".btn-seemore").html("@LanguageResource.SeeLess");
            }
            else {
                $(".hidden-fields").addClass("hidden");
                $(".btn-seemore").html("@LanguageResource.SeeMore");
            }
          });*@
        $(document).on("click", ".btn-showDetail", function () {
            var VBELN = "@Model.VBELN";
            var POSNR = $(this).data("id");
            $(".tableDetailItem .dropdown-menu").addClass("hidden");

            $.ajax({
                type: "POST",
                url: "/@CurrentUrl/_GetBOMDetails",
                data: {
                    VBELN: VBELN,
                    POSNR: POSNR
                },
                success: function (html) {
                    $(".tableDetailItem .dropdown-menu").html("");
                    $(".tableDetailItem .dropdown-menu").append(html);
                    $(".tableDetailItem .dropdown-menu").removeClass("hidden");
                },
                error: function (xhr, status, error) {
                    alertPopup(false, xhr.responseText);
                }
            });
        });
    </script>

}



