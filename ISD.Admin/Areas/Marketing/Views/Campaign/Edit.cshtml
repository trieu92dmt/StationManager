@model CampaignEditViewModel
@using MvcCheckBoxList.Model

@{
    ViewBag.Title = LanguageResource.Update + " " + LanguageResource.Campaign.ToLower();
    ViewBag.Type = "Account";
    string CurrentController = ConstController.Campaign;
    string CurrentArea = ConstArea.Marketing;
    string BaseAddress = ConstantApi.BaseAddress;
    string CurrentUrl = HtmlExtensions.GetCurrentUrl(CurrentArea, CurrentController);
    string ApiUrl = BaseAddress + CurrentUrl + "s/";
    var id = ViewBag.Id;
    //bool isHasPermissionExport = HtmlExtensions.GetPermission(CurrentUrl, ConstFunction.Import, "?Type=" + ViewBag.Type);
}
<div class="content-header clearfix">
    <h1 class="pull-left">
        @HtmlExtensions.BackButton(CurrentArea, CurrentController)
    </h1>
    <div class="pull-right">
        @HtmlExtensions.SaveButton("btn-save", LanguageResource.Btn_Save)
    </div>
</div>

<div class="content">
    <div class="form-horizontal">
        <div class="box panel-group">
            <div class="box-header with-border">
                <h3 class="box-title">@ViewBag.Title</h3>
            </div>
            <div class="panel-body">
                @using (Html.BeginForm(null, null, FormMethod.Post, new { @enctype = "multipart/form-data", @id = "frmEdit" }))
                {
                    @*@Html.AntiForgeryToken()*@
                    @Html.ValidationSummary(true)
                    @Html.HiddenFor(p => p.Id)
                    @*@Html.HiddenFor(p => p.ContentId)
                        @Html.HiddenFor(p => p.TargetGroupId)
                        @Html.HiddenFor(p => p.Status)*@

                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.TooltipLabelFor(p => p.CampaignCode)
                        </div>
                        <div class="col-md-8">
                            @Html.RequiredTextboxFor(p => p.CampaignCode, new { disabled = "disabled" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.TooltipLabelFor(p => p.CampaignName)
                        </div>
                        <div class="col-md-8">
                            @Html.RequiredTextboxFor(p => p.CampaignName)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.TooltipLabelFor(p => p.Description)
                        </div>
                        <div class="col-md-8">
                            @Html.TextAreaFor(p => p.Description, new { style = "width:100%; height:80PX;" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.TooltipLabelFor(p => p.SaleOrg)
                        </div>
                        <div class="col-md-8">
                            @Html.RequiredDropDownListFor(s => s.SaleOrg, null, LanguageResource.Dropdownlist_Choose)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.TooltipLabelFor(p => p.ContentName)
                        </div>
                        <div class="col-md-8">
                            <div class="input-group">
                                @Html.RequiredDropDownListFor(s => s.ContentId, new SelectList(Enumerable.Empty<SelectListItem>()), LanguageResource.Dropdownlist_Choose)
                                <a id="content-info" class="input-group-addon btn btn-info btn-go-profile">
                                    <i class="fa fa-arrow-circle-o-right"></i>
                                </a>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.TooltipLabelFor(p => p.TargetGroupName)
                        </div>
                        <div class="col-md-8">
                            <div class="input-group">
                                @Html.RequiredDropDownListFor(s => s.TargetGroupId, new SelectList(Enumerable.Empty<SelectListItem>()), LanguageResource.Dropdownlist_Choose)
                                <a id="target-group-info" class="input-group-addon btn btn-info btn-go-profile">
                                    <i class="fa fa-arrow-circle-o-right"></i>
                                </a>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.TooltipLabelFor(p => p.Status)
                        </div>
                        <div class="col-md-8">
                            @Html.RequiredTextboxFor(p => p.StatusName, new { disabled = "disabled" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.TooltipLabelFor(p => p.IsImmediately)
                        </div>
                        <div class="col-md-8">
                            @Html.CheckBoxFor(p => p.IsImmediately, new { value = "false", style = "width:20px; height:20px;" })
                        </div>
                    </div>
                    <div id="divStart" class="form-group">
                        <div class="col-md-3">
                            @Html.TooltipLabelFor(p => p.ScheduledToStart)
                        </div>
                        <div class="col-md-8">
                            @Html.RequiredTextboxFor(p => p.ScheduledToStart, new { type = "datetime-local" })
                            <datalist id="targetGroups">
                            </datalist>
                        </div>
                    </div>
                    <div class="col-md-12">
                        <p id="createBy" class="last-mod">
                        </p>
                        <p id="lastEditBy" class="last-mod">
                        </p>
                    </div>
                }
            </div>

        </div>
    </div>
    <div class="panel-group">
        <div class="panel panel-default">
            <div id="exTab1" class="nav-tabs-custom">
                <ul class="nav nav-pills nav nav-tabs">
                    <li class="active">
                        <a href="#tab-report" aria-expanded="true" data-toggle="tab">@LanguageResource.Report</a>
                    </li>
                    <li>
                        <a href="#tab-thay-doi" data-toggle="tab">@LanguageResource.ChangeDataLog</a>
                    </li>
                </ul>
                <div class="tab-content clearfix">

                    <div class="tab-pane active" id="tab-report">
                        @Html.Partial("ReportById")
                    </div>
                    <div class="tab-pane" id="tab-thay-doi">
                        @Html.Action("_List", "ChangeDataLog", new { area = "Utilities", @id = id })
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@section scripts {
    <script src="~/Areas/Marketing/Scripts/ISDNET5Common.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.min.js"></script>
    <script>
        var currentUser = "@CurrentUser.AccountId";
        $(document).ready(function () {
            ISDNET5.EditInitial("@CurrentUrl")
            ISDNET5.GetCampaignReportById("@id");
            $("#IsImmediately").change(function () {
                var isImmediately = ('true' === $('#IsImmediately').val());
                if (isImmediately) {
                    //  $("#IsImmediately").val(false);
                    $("#divStart").show();
                    $("input[name=IsImmediately]").val(false);
                    $('#ScheduledToStart').prop('disabled', false);
                }
                else {
                    // $("#IsImmediately").val(true);
                    $("#divStart").hide();
                    $("input[name=IsImmediately]").val(true);
                    $('#ScheduledToStart').prop('disabled', true);
                }
            });
        });
        $(document).on("change", "#ContentId", function () {
            var contentId = $(this).val();
            if (contentId != null && contentId != undefined && contentId != "") {
                $("#content-info").attr("href", "/Marketing/Content/Edit/" + contentId);
                $("#content-info").attr("target", "_blank");
            }
            else {
                $("#content-info").removeAttr("href");
                $("#content-info").removeAttr("target");
            }
        });
        $(document).on("change", "#TargetGroupId", function () {
            var targetGroupId = $(this).val();
            if (targetGroupId != null && targetGroupId != undefined && targetGroupId != "") {
                $("#target-group-info").attr("href", "/Marketing/TargetGroup/Edit/" + targetGroupId);
                $("#target-group-info").attr("target", "_blank");
            }
            else {
                $("#target-group-info").removeAttr("href");
                $("#target-group-info").removeAttr("target");
            }
        });
    </script>
}

