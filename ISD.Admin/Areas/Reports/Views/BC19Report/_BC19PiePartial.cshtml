@model Reports.Options.ChartPieDoughnutDemoOptions
@{
    var search = (BC19ReportViewModel)ViewBag.Search;
}
<script type="text/javascript">
        function UpdateCursor(s, e) {
        var hitInPie = e.hitInfo.inSeriesPoint && !e.hitInfo.inLegend;
        s.SetCursor(hitInPie ? 'pointer' : 'default');
    }

    function UpdatePieSliseState(s, e) {
        var hitInPie = e.hitInfo.inSeriesPoint && !e.hitInfo.inLegend;
        if (hitInPie) {
            var itemStr = e.hitInfo.seriesPoint.argument;
            @*if (itemStr == ExplodedPoints.GetValue())
                itemStr = ExplodedPoints.GetItem(0).text;
            for (var i = 0; i < ExplodedPoints.GetItemCount(); i++) {
                var item = ExplodedPoints.GetItem(i);
                if (item.text == itemStr) {
                    ExplodedPoints.SetSelectedItem(item);
                    var modelObj = @Html.Raw(Json.Encode(Model));
                    modelObj.ExplodedPoints = itemStr;
                    modelObj.Data = null;
                    SubmitPartialView(modelObj);
                    break;
                }
            }*@
            if (itemStr) {
                var modelObj = @Html.Raw(Json.Encode(Model));
                modelObj.ExplodedPoints = itemStr;
                //modelObj.Data = null;
                SubmitPartialView(modelObj);
            }
        }
    }
    function SubmitPartialView(modelObj){
        $.ajax({
            type: "POST",
            url: '@Url.Action("_BC19PiePartial", "BC19Report")',
            processData: false,
            contentType: false,
            data: { options: modelObj },
            success: function(response) {
                $("#pie").html(response);
            }
        });
    }
</script>
@{
    Reports.Options.ChartPieDoughnutDemoOptions options = Model;
    if (options != null)
    {
        @Html.DevExpress().Chart((settings) =>
   {

       settings.Name = "BC19ReportPie";
       settings.BorderOptions.Visibility = DefaultBoolean.False;
       settings.Height = Unit.Pixel(500);
       settings.Width = Unit.Pixel(920);
       settings.PaletteName = "Office";
       settings.RenderFormat = DevExpress.XtraCharts.Web.RenderFormat.Svg;

       settings.Legends.Default(l =>
       {
           l.AlignmentHorizontal = DevExpress.XtraCharts.LegendAlignmentHorizontal.Center;
           l.AlignmentVertical = DevExpress.XtraCharts.LegendAlignmentVertical.BottomOutside;
           l.Direction = DevExpress.XtraCharts.LegendDirection.LeftToRight;
           l.MaxHorizontalPercentage = 50;
           l.Border.Visibility = DefaultBoolean.False;
       });

       settings.Series.Add(s =>
       {
           settings.Name = "Warning";
           s.ArgumentDataMember = "WarningName";
           s.ValueDataMembers[0] = "WarningCount";
           s.LabelsVisibility = options.ShowLabels ? DefaultBoolean.True : DefaultBoolean.False;
           s.Views().PieSeriesView(v =>
           {
               //v.Titles.Add(t =>
               //{
               //    t.Text = "Total: {TV}M km²";
               //    t.Dock = DevExpress.XtraCharts.ChartTitleDockStyle.Bottom;
               //});
               v.SeriesLabel(l =>
               {
                   l.Position = DevExpress.XtraCharts.PieSeriesLabelPosition.Outside;
                   l.TextPattern = "{A}: {VP:P2}";
                   //l.TextPattern = options.ValueAsPercent ? "{A}: {VP:P0}" : "{A}: {V:G}";
                   l.TextColor = System.Drawing.Color.Black;
                   l.BackColor = System.Drawing.Color.Transparent;
                   l.Font = new System.Drawing.Font("Tahoma", 8, System.Drawing.FontStyle.Bold);
                   l.LineVisibility = DefaultBoolean.True;
                   l.Border.Visibility = DefaultBoolean.False;
               });
           });
       });

       //settings.ClientSideEvents.ObjectSelected = "UpdatePieSliseState";
       //settings.ClientSideEvents.ObjectHotTracked = "UpdateCursor";

       settings.BoundDataChanged = (s, e) =>
       {
           MVCxChartControl chart = (MVCxChartControl)s;
           chart.Series[0].Views().PieSeriesView(v =>
           {
               DevExpress.XtraCharts.SeriesPoint explodedPoint = null;
               if (options.ExplodePoint != null)
               {
                   foreach (DevExpress.XtraCharts.SeriesPoint point in chart.Series[0].Points)
                   {
                       if (point.Argument == options.ExplodePoint)
                       {
                           explodedPoint = point;
                           break;
                       }
                   }
                   if (explodedPoint != null)
                   {
                       v.ExplodedPoints.Add(explodedPoint);
                   }
               }
               else
               {
                   v.ExplodeMode = DevExpress.XtraCharts.PieExplodeMode.None;
               }

           });
       };

       settings.Titles.Add(new DevExpress.XtraCharts.ChartTitle()
       {
           Font = new System.Drawing.Font("Tahoma", 18),
           Text = "Cảnh báo"
       });
       //settings.Titles.Add(new ChartTitle()
       //{
       //    Alignment = StringAlignment.Far,
       //    Dock = ChartTitleDockStyle.Bottom,
       //    Font = new Font("Tahoma", 8),
       //    TextColor = Color.Gray,
       //    Text = "From www.nationmaster.com"
       //});

       settings.CustomDrawSeriesPoint = ((sender, e) =>
       {
           if (e.SeriesPoint.Argument == "XANH")
           {
               e.SeriesDrawOptions.Color = System.Drawing.Color.Green;
               e.LegendDrawOptions.Color = System.Drawing.Color.Green;
           }
           else if (e.SeriesPoint.Argument == "VÀNG")
           {
               e.SeriesDrawOptions.Color = System.Drawing.Color.Yellow;
               e.LegendDrawOptions.Color = System.Drawing.Color.Yellow;
           }
           else if (e.SeriesPoint.Argument == "ĐỎ")
           {
               e.SeriesDrawOptions.Color = System.Drawing.Color.Red;
               e.LegendDrawOptions.Color = System.Drawing.Color.Red;
           }
       });
   }).Bind(Model.Data).GetHtml();
    }
}

