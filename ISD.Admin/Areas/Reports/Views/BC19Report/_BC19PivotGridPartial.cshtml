@using Newtonsoft.Json;
@using System.Drawing;
@model IEnumerable<BC19ReportViewModel>
@{
    var pivotSetting = (List<FieldSettingModel>)ViewBag.PivotSetting;
    var search = (BC19ReportViewModel)ViewBag.Search;
}

@Html.DevExpress().PivotGrid(settings =>
{
    settings.Name = "BC19ReportPivotGrid";
    settings.CallbackRouteValues = new { Controller = "BC19Report", Action = "BC19ReportPivotGridPartial", jsonReq = JsonConvert.SerializeObject(search) };
    settings.Width = Unit.Percentage(100);
    settings.Height = Unit.Pixel(600);

    settings.OptionsView.VerticalScrollingMode = PivotScrollingMode.Virtual;
    settings.OptionsView.HorizontalScrollingMode = PivotScrollingMode.Virtual;
    settings.OptionsView.VerticalScrollBarMode = ScrollBarMode.Auto;
    settings.OptionsView.HorizontalScrollBarMode = ScrollBarMode.Auto;
    //settings.OptionsView.ShowFilterHeaders = false;

    settings.OptionsPager.RowsPerPage = 50;
    settings.OptionsPager.ColumnsPerPage = 50;
    settings.OptionsPager.Visible = false;
    //settings.OptionsFilter.NativeCheckBoxes = false;

    //Grand total
    settings.OptionsView.ShowRowTotals = false;
    settings.OptionsView.ShowColumnGrandTotalHeader = false;
    settings.OptionsView.ShowColumnGrandTotals = false;
    settings.OptionsView.ShowRowGrandTotalHeader = false;
    settings.OptionsView.ShowRowGrandTotals = false;
    settings.OptionsView.ShowTotalsForSingleValues = true;
    settings.OptionsView.ShowGrandTotalsForSingleValues = false;
    settings.OptionsView.ShowCustomTotalsForSingleValues = false;


    settings.AfterPerformCallback = (sender, e) =>
    {
        List<FieldSettingModel> fieldSettingList = new List<FieldSettingModel>
    ();
        ASPxPivotGrid PivotGrid = sender as ASPxPivotGrid;
        var listField = PivotGrid.Fields;
        foreach (PivotGridField field in listField)
        {
            FieldSettingModel fieldSetting = new FieldSettingModel();
            fieldSetting.Caption = field.Caption;
            fieldSetting.AreaIndex = field.AreaIndex;
            fieldSetting.FieldName = field.FieldName;
            if (field.Area == PivotArea.RowArea)
            {
                fieldSetting.PivotArea = 0;

            }
            else
            {
                if (field.Area == PivotArea.ColumnArea)
                {
                    fieldSetting.PivotArea = 1;
                }
                else
                {
                    if (field.Area == PivotArea.FilterArea)
                    {
                        fieldSetting.PivotArea = 2;
                    }
                    else
                    {
                        fieldSetting.PivotArea = 3;
                    }
                }
            }
            if (field.ValueFormat.FormatType == FormatType.Numeric || field.ValueFormat.FormatType == FormatType.DateTime)
            {
                fieldSetting.CellFormat_FormatString = field.ValueFormat.FormatString;
                fieldSetting.CellFormat_FormatType = field.ValueFormat.FormatType.ToString();
            }
            fieldSetting.Visible = field.Visible;
            fieldSettingList.Add(fieldSetting);
        }
        Session[CurrentUser.AccountId + "Layout"] = fieldSettingList;

    };
    //Set color for cell
    settings.CustomCellStyle = (sender, e) =>
    {
        ASPxPivotGrid PivotGrid = sender as ASPxPivotGrid;
        var listField = PivotGrid.Fields;
        foreach (PivotGridField field in listField)
        {
            if (Convert.ToString(e.GetFieldValue(field)) == "XANH")
            {
                field.CellStyle.BackColor = System.Drawing.Color.Green;
                field.CellStyle.ForeColor = System.Drawing.Color.Green;
                field.ValueStyle.BackColor = System.Drawing.Color.Green;
                field.ValueStyle.ForeColor = System.Drawing.Color.Green;
            }
            else if (Convert.ToString(e.GetFieldValue(field)) == "VÀNG")
            {
                field.CellStyle.BackColor = System.Drawing.Color.Yellow;
                field.CellStyle.ForeColor = System.Drawing.Color.Yellow;
                field.ValueStyle.BackColor = System.Drawing.Color.Yellow;
                field.ValueStyle.ForeColor = System.Drawing.Color.Yellow;
            }
            else if (Convert.ToString(e.GetFieldValue(field)) == "ĐỎ")
            {
                field.CellStyle.BackColor = System.Drawing.Color.Red;
                field.CellStyle.ForeColor = System.Drawing.Color.Red;
                field.ValueStyle.BackColor = System.Drawing.Color.Red;
                field.ValueStyle.ForeColor = System.Drawing.Color.Red;
            }
        }
    };

    if (pivotSetting != null && pivotSetting.Count > 0)
    {
        foreach (var fieldSetting in pivotSetting)
        {
            settings.Fields.Add(field =>
            {
                if (fieldSetting.PivotArea == 0)
                {
                    field.Area = PivotArea.RowArea;
                    field.Options.AllowExpand = DefaultBoolean.False;
                }
                if (fieldSetting.PivotArea == 1)
                {
                    field.Area = PivotArea.ColumnArea;
                }
                if (fieldSetting.PivotArea == 2)
                {
                    if (fieldSetting.AreaIndex > 10)
                    {
                        field.Visible = false;
                    }
                    field.Area = PivotArea.FilterArea;

                }
                if (fieldSetting.PivotArea == 3)
                {
                    field.Area = PivotArea.DataArea;
                }
                field.FieldName = fieldSetting.FieldName;
                field.Caption = fieldSetting.Caption;
                field.AreaIndex = fieldSetting.AreaIndex.Value;
                if (fieldSetting.CellFormat_FormatType == "DateTime")
                {
                    field.ValueFormat.FormatType = FormatType.DateTime;
                    field.ValueFormat.FormatString = fieldSetting.CellFormat_FormatString;
                    field.CellFormat.FormatType = FormatType.DateTime;
                    field.CellFormat.FormatString = fieldSetting.CellFormat_FormatString;
                }
                if (fieldSetting.CellFormat_FormatType == "Numeric")
                {
                    field.ValueFormat.FormatType = FormatType.Numeric;
                    field.ValueFormat.FormatString = fieldSetting.CellFormat_FormatString;
                    field.CellFormat.FormatType = FormatType.Numeric;
                    field.CellFormat.FormatString = fieldSetting.CellFormat_FormatString;
                    field.ValueStyle.HorizontalAlign = HorizontalAlign.Right;
                    field.CellStyle.HorizontalAlign = HorizontalAlign.Right;
                }
                field.Visible = fieldSetting.Visible.Value;
                if (fieldSetting.Caption == "STT")
                {
                    field.ValueStyle.HorizontalAlign = HorizontalAlign.Center;
                    field.CellStyle.HorizontalAlign = HorizontalAlign.Center;
                }
                if (fieldSetting.FieldName == "CDL" || fieldSetting.FieldName == "CDN" || fieldSetting.FieldName == "Warning"

             )
                {
                    field.SummaryType = PivotSummaryType.Min;
                    field.ValueStyle.HorizontalAlign = HorizontalAlign.Left;
                    field.CellStyle.HorizontalAlign = HorizontalAlign.Left;
                }
                if (fieldSetting.FieldName == "EndDateDSX")
                {
                    field.SummaryType = PivotSummaryType.Min;
                    field.ValueStyle.HorizontalAlign = HorizontalAlign.Center;
                    field.CellStyle.HorizontalAlign = HorizontalAlign.Center;
                }
            });
        }
    }
    else // default
    {
        //Filter Area
        settings.Fields.Add(field =>
        {
            field.Area = PivotArea.RowArea;
            field.FieldName = "STT";
            field.Caption = "STT";
            field.AreaIndex = 0;
        });

        settings.Fields.Add(field =>
        {
            field.Area = PivotArea.RowArea;
            field.FieldName = "Plant";
            field.Caption = "Plant";
            field.AreaIndex = 1;
        });

        settings.Fields.Add(field =>
        {
            field.Area = PivotArea.RowArea;
            field.FieldName = "DSX";
            field.Caption = "Đợt SX";
            field.AreaIndex = 2;
        });

        settings.Fields.Add(field =>
        {
            field.Area = PivotArea.RowArea;
            field.FieldName = "LSXSAP";
            field.Caption = "Lệnh SX";
            field.AreaIndex = 3;
        });

        settings.Fields.Add(field =>
        {
            field.Area = PivotArea.RowArea;
            field.FieldName = "ProductCode";
            field.Caption = "Mã SP";
            field.AreaIndex = 4;
        });

        settings.Fields.Add(field =>
        {
            field.Area = PivotArea.RowArea;
            field.FieldName = "ProductName";
            field.Caption = "Tên sản phẩm";
            field.AreaIndex = 5;
        });

        settings.Fields.Add(field =>
        {
            field.Area = PivotArea.RowArea;
            field.FieldName = "ImageUrl";
            field.Caption = "Hình";
            field.AreaIndex = 6;
        });

        settings.Fields.Add(field =>
        {
            field.Area = PivotArea.DataArea;
            field.FieldName = "PlanQuantity";
            field.Caption = "SLTPSX";
            field.ValueFormat.FormatType = FormatType.Numeric;
            field.ValueFormat.FormatString = "{0:n0}";
            field.CellFormat.FormatType = FormatType.Numeric;
            field.CellFormat.FormatString = "{0:n0}";
            field.ValueStyle.HorizontalAlign = HorizontalAlign.Right;
            field.CellStyle.HorizontalAlign = HorizontalAlign.Right;
            field.AreaIndex = 7;
        });

        settings.Fields.Add(field =>
        {
            field.Area = PivotArea.DataArea;
            field.FieldName = "CompletedQuantity";
            field.Caption = "SLTPHT";
            field.ValueFormat.FormatType = FormatType.Numeric;
            field.ValueFormat.FormatString = "{0:n0}";
            field.CellFormat.FormatType = FormatType.Numeric;
            field.CellFormat.FormatString = "{0:n0}";
            field.ValueStyle.HorizontalAlign = HorizontalAlign.Right;
            field.CellStyle.HorizontalAlign = HorizontalAlign.Right;
            field.AreaIndex = 8;
        });

        settings.Fields.Add(field =>
        {
            field.Area = PivotArea.DataArea;
            field.FieldName = "SLTPHT";
            field.Caption = "SLTPHT (SP)";
            field.ValueFormat.FormatType = FormatType.Numeric;
            field.ValueFormat.FormatString = "{0:n0}";
            field.CellFormat.FormatType = FormatType.Numeric;
            field.CellFormat.FormatString = "{0:n0}";
            field.ValueStyle.HorizontalAlign = HorizontalAlign.Right;
            field.CellStyle.HorizontalAlign = HorizontalAlign.Right;
            field.AreaIndex = 8;
        });

        settings.Fields.Add(field =>
        {
            field.Area = PivotArea.DataArea;
            field.FieldName = "CDL";
            field.Caption = "CĐL";
            field.AreaIndex = 9;
        });

        settings.Fields.Add(field =>
        {
            field.Area = PivotArea.DataArea;
            field.FieldName = "CDN";
            field.Caption = "CĐN";
            field.AreaIndex = 10;
        });

        settings.Fields.Add(field =>
        {
            field.Area = PivotArea.DataArea;
            field.FieldName = "SLCTKH";
            field.Caption = "SLCTKH";
            field.ValueFormat.FormatType = FormatType.Numeric;
            field.ValueFormat.FormatString = "{0:n0}";
            field.CellFormat.FormatType = FormatType.Numeric;
            field.CellFormat.FormatString = "{0:n0}";
            field.ValueStyle.HorizontalAlign = HorizontalAlign.Right;
            field.CellStyle.HorizontalAlign = HorizontalAlign.Right;
            field.AreaIndex = 11;
        });

        settings.Fields.Add(field =>
        {
            field.Area = PivotArea.DataArea;
            field.FieldName = "SLCTTT";
            field.Caption = "SLCTTT";
            field.ValueFormat.FormatType = FormatType.Numeric;
            field.ValueFormat.FormatString = "{0:n0}";
            field.CellFormat.FormatType = FormatType.Numeric;
            field.CellFormat.FormatString = "{0:n0}";
            field.ValueStyle.HorizontalAlign = HorizontalAlign.Right;
            field.CellStyle.HorizontalAlign = HorizontalAlign.Right;
            field.AreaIndex = 12;
        });

        settings.Fields.Add(field =>
        {
            field.Area = PivotArea.DataArea;
            field.FieldName = "TransferWaitTime";
            field.Caption = "TG Chờ CCĐ";
            field.ValueFormat.FormatType = FormatType.Numeric;
            field.ValueFormat.FormatString = "{0:n0}";
            field.CellFormat.FormatType = FormatType.Numeric;
            field.CellFormat.FormatString = "{0:n0}";
            field.AreaIndex = 13;
        });

        settings.Fields.Add(field =>
        {
            field.Area = PivotArea.DataArea;
            field.FieldName = "EndDateDSX";
            field.Caption = "Ngày KT ĐSX";
            field.ValueFormat.FormatString = "dd/MM/yyyy";
            field.ValueFormat.FormatType = FormatType.DateTime;
            field.ValueStyle.HorizontalAlign = HorizontalAlign.Center;
            field.CellStyle.HorizontalAlign = HorizontalAlign.Center;
            field.AreaIndex = 14;
        });

        settings.Fields.Add(field =>
        {
            field.Area = PivotArea.DataArea;
            field.FieldName = "Warning";
            field.Caption = "Cảnh báo";
            field.AreaIndex = 15;
        });
    }
}).Bind(Model).GetHtml()


