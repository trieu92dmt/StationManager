@model BC20ReportViewModel
@{
    Layout = "~/Views/Shared/_Layout_Report.cshtml";
    //Layout = "~/Views/Shared/_Layout_Report_TV.cshtml";
    ViewBag.Title = LanguageResource.BC20Report;
    string CurrentController = ConstController.BC20Report;
    string CurrentArea = ConstArea.Reports;

    string CurrentUrl = HtmlExtensions.GetCurrentUrl(CurrentArea, CurrentController);
    //bool isHasPermissionEdit = HtmlExtensions.GetPermission(CurrentUrl, ConstFunction.Edit);
}
@section head {
    <link href="~/Content/ApexChart/apexcharts.css" rel="stylesheet" />
    <style>
    </style>
}
<div class="content-header clearfix">
    <h1 class="pull-left">
        @ViewBag.Title
    </h1>
    <div class="pull-right">
        @*@HtmlExtensions.CreateButton(CurrentArea, CurrentController)
            @HtmlExtensions.ExportButton(CurrentArea, CurrentController)
            @HtmlExtensions.ImportButton(CurrentArea, CurrentController)*@
    </div>
</div>
<div class="content">
    <div class="form-horizontal">
        <div class="panel-group">
            <div class="panel panel-default panel-search">
                @using (Html.BeginForm("ViewReport", CurrentController, FormMethod.Post, new { @id = "frmSearch", @class = "isd-form-search" }))
                {
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-5">
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.TooltipLabelFor(p => p.ReportDate)
                                    </div>
                                    <div class="col-md-8">
                                        @Html.RequiredTextboxFor(p => p.ReportDate, "{0:yyyy-MM-dd}", new { type = "date" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-5">
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.TooltipLabelFor(p => p.IsViewAtCurrent)
                                    </div>
                                    <div class="col-md-8">
                                        @Html.DropDownList("IsViewAtCurrent", new List<SelectListItem>(){
                                        new SelectListItem(){Text = "Ngày hiện tại", Value = "true"},
                                        new SelectListItem(){Text = "Ngày tùy chỉnh", Value = "false"}
                                    }, new { @class = "form-control" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-5">
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.TooltipLabelFor(p => p.WorkShop)
                                    </div>
                                    <div class="col-md-8 multi">
                                        @Html.DropDownList("WorkShop", null, null, new { @class = " form-control with-search", @multiple = "multiple" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-5">
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.TooltipLabelFor(p => p.Department)
                                    </div>
                                    <div class="col-md-8 multi">
                                        @Html.DropDownList("Department", null, null, new { @class = " form-control with-search", @multiple = "multiple" })
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div id="frm-button" class="col-md-12">
                            <div class="form-group">
                                <div class="col-md-8 col-md-offset-5">
                                    @*<a href="#" id="btn-view" class="btn btn-primary" style="margin-left: 10px;"><i class="fa fa-refresh"></i> Xem báo cáo</a>*@&nbsp;
                                    @*<a id="btn-export-pivot" class="btn btn-success btn-export" href="#"><i class="fa fa-download"></i> Export Excel</a>*@
                                    <button class="btn btn-primary" type="submit" value="Submit"><i class="fa fa-refresh"></i> Xem báo cáo</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<div class="delete-confirm"></div>
@*<div class="loading-modal"></div>*@

@section components {

}
@section scripts {
    <script src="~/Content/ApexChart/apexcharts.min.js"></script>
    <script>
        @*$(document).on('click', '#btn-view', function () {
            //Get value in search form
            var formdata = $("#frmSearch").serializeArray();
            var data = {};
            $(formdata).each(function (index, obj) {
                data[obj.name] = obj.value;
            });
            //Phân xưởng
            var WorkShop = $('#WorkShop').val();
            if (WorkShop != null && WorkShop.length > 0) {
                var workShop = {};

                workShop['WorkShop'] = WorkShop;
                $.extend(true, data, workShop);
            }
            //Tổ
            var Department = $('#Department').val();
            if (Department != null && Department.length > 0) {
                var department = {};

                department['Department'] = Department;
                $.extend(true, data, department);
            }
            $.ajax({
                type: "POST",
                url: "/@CurrentUrl/ViewReport",
                data: JSON.stringify(data),
                success: function (html) {

                },
                error: function (err) {

                }
            });
        });*@
        @*//Xử lý button xem báo cáo
        $(document).on('click', '#btn-view', function () {
            var $btn = $(this);
            $btn.button('loading');
            loadReport($btn);
            //tự load lại 1 tiếng 1 lần
            window.setInterval(function () {
                // call your function here
                loadReport($btn);
            }, 3600000);  // Change Interval here to test. For eg: 5000 for 5 se
        });
        function loadReport($btn) {
            var data = $('#frmSearch').serialize();
            $.ajax({
                type: "GET",
                url: "/@CurrentUrl/ViewReport",
                data: data,
                success: function (html) {
                    getData(data, html);
                    $btn.button('reset');
                },
                error: function (err) {
                    $btn.button('reset');
                }
            });
        }
        function getData(data, html) {
            //Get data
            $.ajax({
                type: "GET",
                url: "/@CurrentUrl/GetData",
                data: data,
                success: function (jsonData) {
                    if (jsonData.IsSuccess) {
                        if (html) {
                            $('#report').html(html);
                        }
                        renderChart(jsonData.Data);
                    }
                    else {
                        alertPopup(false, jsonData.Message);
                    }
                },
                error: function (err) {

                }
            });

        }*@
        //Xử lý dropdown Phân xưởng khi chọn sẽ load lại thông tin tổ
        $(document).on('change', '#WorkShop', function () {
            var data = $('#frmSearch').serialize();
            $.ajax({
                type: "GET",
                url: "/@CurrentUrl/GetDepartmentBy",
                data: data,
                success: function (jsonData) {
                    $('#Department').val('').trigger('change');
                    $('#Department').empty();
                    $.each(jsonData, function (index, value) {
                        $('#Department').append(
                            '<option value="' + jsonData[index].DepartmentCode + '">' + jsonData[index].DepartmentName + '</option>'
                        );
                    });
                }
            });
        });
        ////Xử lý chart
        //function renderChart(jsonData) {
        //    $("#chart").empty();
        //    var options = {
        //        series: [{
        //            //data: [44, 55, 41, 64, 22, 43, 21]
        //            name: 'Kế hoạch',
        //            data: jsonData.SoPhutKeHoach && jsonData.SoPhutKeHoach.length > 0 ? jsonData.SoPhutKeHoach : [],
        //        }, {
        //            /* data: [53, 32, 33, 52, 13, 44, 32]*/
        //            name: 'Thực tế',
        //            data: jsonData.SoPhutThucTe && jsonData.SoPhutThucTe.length > 0 ? jsonData.SoPhutThucTe : [],
        //        }],
        //        chart: {
        //            type: 'bar',
        //            /* height: jsonData.TenDong.length > 5 ? 800 : 500*/
        //            height: 500,
        //        },
        //        plotOptions: {
        //            bar: {
        //                horizontal: true,
        //                dataLabels: {
        //                    position: 'top',
        //                    maxItems: 100,
        //                    hideOverflowingLabels: false,
        //                    orientation: 'horizontal'
        //                },
        //            }
        //        },
        //        dataLabels: {
        //            enabled: true,
        //            //offsetX: -6,
        //            offsetX: 60,
        //            style: {
        //                fontSize: '12px',
        //                colors: ['#000'],
        //                /*fontWeight: 'bold',*/
        //            },
        //            formatter: function (val, opts) {
        //                return formatCurrencyWithComma(val);
        //            },
        //        },
        //        stroke: {
        //            show: true,
        //            width: 1,
        //            colors: ['#fff']
        //        },
        //        tooltip: {
        //            shared: true,
        //            intersect: false
        //        },
        //        xaxis: {
        //            /*categories: [2001, 2002, 2003, 2004, 2005, 2006, 2007],*/
        //            categories: jsonData.TenDong && jsonData.TenDong.length > 0 ? jsonData.TenDong : [],
        //        },
        //        yaxis: {
        //            labels: {
        //                style: {
        //                    fontSize: '12px',
        //                    minWidth: 0,
        //                    maxWidth: 160,
        //                }
        //            }
        //        }
        //    };
        //    var chart = new ApexCharts(document.querySelector("#chart"), options);
        //    chart.render();
        //}

    </script>

}
