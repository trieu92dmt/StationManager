@model TaskSearchViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = LanguageResource.Reports_TicketUsualErrorReport;
    string CurrentArea = ConstArea.Reports;
    string CurrentController = ConstController.TicketUsualErrorReport;

    string CurrentUrl = HtmlExtensions.GetCurrentUrl(CurrentArea, CurrentController);
}

<div class="content-header clearfix">
    <h1 class="pull-left">
        @ViewBag.Title
    </h1>
    <div class="pull-right">

    </div>
</div>
<div class="content">
    <div class="form-horizontal">
        <div class="panel-group">
            <div class="panel panel-default panel-search">
                @using (Html.BeginForm(null, null, FormMethod.Post, new { @id = "frmSearch", @class = "isd-form-search" }))
                {
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-5">
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.TooltipLabelFor(p => p.ProductCategoryCode)
                                    </div>
                                    <div class="col-md-8 multi">
                                        @Html.DropDownListFor(p => p.ProductCategoryCode, null, null, new { @class = "form-control with-search", @multiple = "multiple" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-5">
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.TooltipLabelFor(p => p.UsualErrorCode)
                                    </div>
                                    <div class="col-md-8 multi">
                                        @Html.DropDownListFor(p => p.UsualErrorCode, null, null, new { @class = "form-control with-search", @multiple = "multiple" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-5">
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.TooltipLabelFor(p => p.ProductColorCode)
                                    </div>
                                    <div class="col-md-8 multi">
                                        @Html.DropDownListFor(p => p.ProductColorCode, null, null, new { @class = "form-control with-search", @multiple = "multiple" })
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-5">
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.TooltipLabelFor(p => p.CommonDate)
                                    </div>
                                    <div class="col-md-8">
                                        @Html.DropDownListFor(p => p.CommonDate, null, new { @class = "form-control with-search" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-5">
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.TooltipLabelFor(p => p.FromDate)
                                    </div>
                                    <div class="col-md-8">
                                        @if (Model.CommonDate != "Custom")
                                        {
                                            @Html.TextBoxFor(model => model.FromDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date", @readonly = "readonly" })
                                        }
                                        else
                                        {
                                            @Html.TextBoxFor(model => model.FromDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
                                        }
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-5">
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.TooltipLabelFor(p => p.ToDate)
                                    </div>
                                    <div class="col-md-8">
                                        @if (Model.CommonDate != "Custom")
                                        {
                                            @Html.TextBoxFor(model => model.ToDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date", @readonly = "readonly" })
                                        }
                                        else
                                        {
                                            @Html.TextBoxFor(model => model.ToDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="form-group">
                                <div class="col-md-3 col-md-offset-4 input-group">
                                    <select class="form-control" id="SearchTemplateId" name="SearchTemplateId">
                                        <option value="">@LanguageResource.Dropdownlist_RecentSearch</option>
                                    </select>
                                    <span class="input-group-btn" style="padding-right:25px;padding-left: 10px;">
                                        <a class="btn btn-delete-frmSearch display-none" style="color: coral;" title="Xoá mẫu tìm kiếm"><i class="fa fa-trash-o fa-lg" aria-hidden="true"></i></a>
                                        <a class="btn btn-save-frmSearch" title="Lưu mẫu tìm kiếm"><i class="fa fa-thumb-tack fa-lg" aria-hidden="true"></i></a>
                                    </span>
                                    <a class="btn btn-success" id="btn-export"><i class="fa fa-download"></i> Export</a>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<div class="delete-confirm"></div>

@section scripts {
    <script src="~/Scripts/Common/ISD.SearchTemplate.js"></script>
    <script>
	//Define it
	var currentUserId = "@CurrentUser.AccountId";
	var currentPageId = "@ViewBag.PageId";
    </script>
    <script>
        $(document).ready(function () {
            //Set lại thông tin search gần đây khi là back lại
            var modeTemplateSearch = ISD.GetQueryString("ModeSearch", window.location.href);

            if (modeTemplateSearch == "Recently") {
                LoadTemplateSearch(currentUserId, currentPageId, "Recently");
                var recentSearch = JSON.parse(localStorage.getItem('pageId-' + currentPageId));
                if (recentSearch) {
                    FillToInput(recentSearch);
                }
            } else {
                LoadTemplateSearch(currentUserId, currentPageId);
                localStorage.removeItem('pageId-' + currentPageId)
            }
        })
        $(document).on("click", "#btn-export", function () {
            var $btn = $(this);
            var arr = {};
            var data = $("#frmSearch").serializeArray();
            $.each(data, function (index, val) {
                var obj = {};
                obj[val.name] = val.value;
                $.extend(true, arr, obj)
            });

            //ProductCategoryCode
            $btn.button('loading');
            var productCategoryList = [];
            var productCategory = $('#ProductCategoryCode').select2('data');
            $.each(productCategory, function (index, item) {
                productCategoryList.push(item.id);
            });
            arr.ProductCategoryCode = productCategoryList;

            //ProductColorCode
            var productColorList = [];
            var productColor = $('#ProductColorCode').select2('data');
            $.each(productColor, function (index, item) {
                productColorList.push(item.id);
            });
            arr.ProductColorCode = productColorList;

            //UsualErrorCode
            var errorList = [];
            var error = $('#UsualErrorCode').select2('data');
            $.each(error, function (index, item) {
                errorList.push(item.id);
            });
            arr.UsualErrorCode = errorList;
            var searchData = GetDataFormSearch();
            //Save localStorage
            localStorage.setItem('pageId-' + currentPageId, searchData);
            ISD.Download("/@CurrentUrl/ExportExcel", arr);

            setTimeout(function () {
                $btn.button('reset');
            }, 3000);

        });

        $(document).on("change", "select[name='ProductCategoryCode']", function () {
            var ProductCategoryCode = $(this).val();

            $.ajax({
                type: "POST",
                url: "/Work/Task/GetUsualErrorByProductCategory",
                data: {
                    ProductCategoryCode: ProductCategoryCode,
                    IsTakeAll: true
                },
                success: function (jsonData) {
                    $("#UsualErrorCode").html("");
                    $("#UsualErrorCode").append("<option value=''>-- Vui lòng chọn --</option>");
                    if (jsonData != null && jsonData.length > 0) {
                        $.each(jsonData, function (index, value) {
                            $("#UsualErrorCode").append("<option value='" + value.CatalogCode + "'>" + value.CatalogText_vi + "</option>");
                        });
                    }
                }
            });
        });

        //CommonDate
        $(document).on("change", "select[name='CommonDate']", function () {
            var commonDate = $(this).val();
            $.ajax({
                type: "POST",
                url: "/Utilities/CommonDate/Get",
                data: {
                    CommonDate: commonDate
                },
                success: function (jsonData) {
                    $("#frmSearch input[name='FromDate']").val(jsonData.FromDate);
                    $("#frmSearch input[name='ToDate']").val(jsonData.ToDate);
                    if (jsonData.FromDate != '' && jsonData.FromDate != '') {
                        $("#frmSearch input[name='FromDate']").prop("readonly", true);
                        $("#frmSearch input[name='ToDate']").prop("readonly", true);
                    } else {
                        $("#frmSearch input[name='FromDate']").prop("readonly", false);
                        $("#frmSearch input[name='ToDate']").prop("readonly", false);
                    }

                }
            });
        });
    </script>
    <script>
        //Get data of form search name function is required
        function GetDataFormSearch() {
            //Get value in search form
            var formdata = $("#frmSearch").serializeArray();
            var data = {};
            $(formdata).each(function (index, obj) {
                data[obj.name] = obj.value;
            });

            //Nhóm vật tư
            var ProductCategoryCodeList = $('#ProductCategoryCode').val();
            if (ProductCategoryCodeList != null && ProductCategoryCodeList.length > 0) {
                var productCategoryCode = {};

                productCategoryCode['ProductCategoryCode'] = ProductCategoryCodeList;
                $.extend(true, data, productCategoryCode);
            }
            //Các lỗi BH thường gặp
            var UsualErrorCodeList = $('#UsualErrorCode').val();
            if (UsualErrorCodeList != null && UsualErrorCodeList.length > 0) {
                var usualErrorCode = {};

                usualErrorCode['UsualErrorCode'] = UsualErrorCodeList;
                $.extend(true, data, usualErrorCode);
            }
            //Mã màu SP
            var ProductColorCodeList = $('#ProductColorCode').val();
            if (ProductColorCodeList != null && ProductColorCodeList.length > 0) {
                var productColorCode = {};

                productColorCode['ProductColorCode'] = UsualErrorCodeList;
                $.extend(true, data, productColorCode);
            }
            return JSON.stringify(data);
        }
        
    </script>
}
