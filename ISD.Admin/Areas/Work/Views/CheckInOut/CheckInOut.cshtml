@model EmployeeCheckinViewModel
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>NFCCheckin</title>
    <link href="~/Content/bootstrap.css" rel="stylesheet" />
    <link href="~/Scripts/AdminLTE-2.4.3/dist/css/AdminLTE.css" rel="stylesheet" />
    <link href="~/Content/Site.css" rel="stylesheet" />
    <style>
        .btn-checkin {
            padding: 12px 25px;
            font-size: 1.5em;
        }

        .content {
            min-height: 250px;
            padding: 15px;
            margin-right: auto;
            margin-left: auto;
            padding-left: 5px;
            padding-right: 5px;
        }
    </style>
</head>
<body>
    <div>
        <div id="divAlertSuccess" class="alert alert-success alert-dismissable" style="display: none">
            <button type="button" class="alert-close close" aria-hidden="true" data-div="divAlertSuccess">×</button>
            <div class="alert-message">
            </div>
        </div>

        <div id="divAlertWarning" class="alert alert-warning alert-dismissable" style="display: none">
            <button type="button" class="alert-close close" aria-hidden="true" data-div="divAlertWarning">×</button>
            <div class="alert-message">
            </div>
        </div>
    </div>
    <div class="content">
        <div class="form-horizontal">
            <div class="panel-group">
                <div class="panel panel-default">
                    <div class="panel-body">
                        <div class="form-group">
                            <div class="col-xs-4 no-padding">
                                @Html.TooltipLabelFor(p => p.SerialTag)
                            </div>
                            <div class="col-xs-8">
                                @Html.RequiredTextboxFor(p => p.SerialTag, new { @readonly = "readonly" })
                                @*<div class="input-group input-group-sm">

                                        <span class="input-group-btn">
                                            <button type="button" class="btn btn-info btn-flat" id="scanButton">@LanguageResource.Btn_ScanNFCTag</button>
                                        </span>
                                    </div>*@
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-xs-4 no-padding">
                                @Html.TooltipLabelFor(p => p.SalesEmployeeCode)
                            </div>
                            <div class="col-xs-8">
                                <div class="display-for" id="SalesEmployeeCode">
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-xs-4 no-padding">
                                @Html.TooltipLabelFor(p => p.SalesEmployeeName)
                            </div>
                            <div class="col-xs-8">
                                <div class="display-for" id="SalesEmployeeName">
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-xs-4 no-padding">
                                @Html.TooltipLabelFor(p => p.DepartmentName)
                            </div>
                            <div class="col-xs-8">
                                <div class="display-for" id="DepartmentName">
                                </div>
                            </div>
                        </div>
                        <div class="col-xs-12 text-center">
                            <button class="btn btn-primary btn-checkin" disabled="disabled">CHECKIN/OUT</button>
                        </div>
                    </div>
                </div>
                <div class="panel panel-default">
                    <div class="panel-body">
                        <div id="checkinHistory"></div>
                    </div>
                </div>
                <div class="panel hidden">
                    <style>
                        .output {
                            background-color: #f0f0f0;
                            border-radius: 0.75em;
                            display: block;
                            margin: 0.5em;
                            padding: 0.5em;
                        }

                        #status {
                            margin: .5em 0;
                            font-style: italic;
                        }

                        #log {
                            margin: .5em 0;
                            white-space: pre-wrap;
                        }

                            #status:empty, #log:empty, #content:empty {
                                display: none;
                            }
                    </style>
                    <h3>Live Output</h3>
                    <div id="output" class="output">
                        <div id="content"></div>
                        <div id="status"></div>
                        <pre id="log"></pre>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="~/Scripts/jquery-1.12.4.min.js"></script>
    <script src="~/Scripts/bootstrap.js"></script>

    <script>

        var ChromeSamples = {
            log: function () {
                var line = Array.prototype.slice.call(arguments).map(function (argument) {
                    return typeof argument === 'string' ? argument : JSON.stringify(argument);
                }).join(' ');

                document.querySelector('#log').textContent += line + '\n';
            },

            clearLog: function () {
                document.querySelector('#log').textContent = '';
            },

            setStatus: function (status) {
                document.querySelector('#status').textContent = status;
            },

            setContent: function (newContent) {
                var content = document.querySelector('#content');
                while (content.hasChildNodes()) {
                    content.removeChild(content.lastChild);
                }
                content.appendChild(newContent);
            }
        };

        // Add a global error event listener early on in the page load, to help ensure that browsers
        // which don't support specific functionality still end up displaying a meaningful message.
        window.addEventListener('error', function (error) {
            if (ChromeSamples && ChromeSamples.setStatus) {
                console.error(error);
                ChromeSamples.setStatus(error.message + ' (Your browser may not support this feature.)');
                error.preventDefault();
            }
        });

        if (/Chrome\/(\d+\.\d+.\d+.\d+)/.test(navigator.userAgent)) {
            // Let's log a warning if the sample is not supposed to execute on this
            // version of Chrome.
            if (89 > parseInt(RegExp.$1)) {
                ChromeSamples.setStatus('Warning! Keep in mind this sample has been tested with Chrome ' + 89 + '.');
            }
        }

        if (!("NDEFReader" in window)) {
            ChromeSamples.setStatus(
                "Web NFC is not available.\n" +
                'Please make sure the "Experimental Web Platform features" flag is enabled on Android.'
            );
        }
    </script>

    <script>
        function setMessage(div, message) {
            if (Array.isArray(message)) {
                var arr = [];
                $.each(message, function (i, item) {
                    //Code cũ
                    //arr[i] = { err: item.ErrorMessage }
                    if (item.ErrorMessage != undefined && item.ErrorMessage != "") {
                        arr[i] = { err: item.ErrorMessage }
                    }
                    else {
                        arr[i] = { err: item }
                    }
                    $(div + " .alert-message").append("<li>" + arr[i].err + "</li>");
                });
            }
            else {
                $(div + " .alert-message").html(message);
            }
        }

        function alertPopup(isSuccess, message) {
            if (isSuccess == true) {
                $("#divAlertSuccess .alert-message").html("");
                setMessage("#divAlertSuccess", message);

                $('#divAlertSuccess').show();
                setTimeout(function () {
                    $('#divAlertSuccess').hide();
                }, 5000)
            }
            else if (isSuccess == false) {
                $("#divAlertWarning .alert-message").html("");
                setMessage("#divAlertWarning", message);
                $('#divAlertWarning').show();
            }

            $("html, body").animate({ scrollTop: 0 }, "fast");
        }
        //just hide alert when close, not remove
        $(document).on("click", ".alert-close", function () {
            var div = $(this).data("div");
            $("#" + div + " .alert-message").html("");
            $('.alert').hide();

            //Modal import
            $(".modal-alert-message").html("");

        });
    </script>
    <script>
        let ndef;
        log = ChromeSamples.log;
        //set event btn-save, btn-save-continue for btn-create
        $(document).ready(function () {
            //Chuyển qua https nếu chưa phải https
            if (location.protocol !== 'https:') {
                location.replace(`https:${location.href.substring(location.protocol.length)}`);
            }
            try {
                if (ndef == undefined) {
                    ndef = new NDEFReader();
                }
                ndef.scan();
                log("> Scan started");

                ndef.addEventListener("readingerror", () => {
                    log("Argh! Cannot read data from the NFC tag. Try another one?");
                });

                ndef.onreading = event => {
                    //const message = event.message;
                    const serialNumber = event.serialNumber;

                    log(`> Serial Number: ${serialNumber}`);
                    //log(`> Records: (${message.records.length})`);
                    SerialTagReady(serialNumber);
                };

            } catch (error) {
                log("Argh! " + error);
                $(this).button('reset');
            }
        });

        function SerialTagReady(serialNumber) {
            //Remove ':' in serial
            let seri = serialNumber.replace(/:/g, '');
            //Convert from HEX
            let intSerial = parseInt(seri, 16);
            $("#SerialTag").val(intSerial);
            $("#checkinHistory").html("");
            $.ajax({
                type: "GET",
                url: "/Work/CheckInOut/GetEmployeeBySerial",
                data: { serialTag: intSerial },
                success: function (response) {
                    if (response.Data != null) {
                        $(".btn-checkin").prop("disabled", false);
                        $("#SalesEmployeeCode").html(response.Data.SalesEmployeeCode);
                        $("#SalesEmployeeName").html(response.Data.SalesEmployeeName);
                        $("#DepartmentName").html(response.Data.DepartmentName);
                    } else {
                        //alertPopup(false, "Không tìm thấy thông tin nhân viên!");
                        $(".btn-checkin").prop("disabled", true);
                        $("#SalesEmployeeCode").html("");
                        $("#SalesEmployeeName").html("");
                        $("#DepartmentName").html("");
                    }
                }
            });
        }

        $(document).on("click", ".btn-checkin", function () {
            $btn = $(this);
            //$btn.attr("disabled", true);
            //$btn.html("Loadding...");
            $btn.button('loading');

            var serialTag = $("#SerialTag").val();
            if (serialTag) {
                $.ajax({
                    type: "POST",
                    url: "/Work/CheckInOut/_CheckInOut",
                    data: { SerialTag: serialTag },
                    success: function (response) {
                        $btn.button('reset');
                        $("#checkinHistory").html(response);
                    },
                    error: function (err) {
                        $btn.button('reset');
                        console.log(err.responseText);
                    }
                });
            }
        })
    </script>
</body>
</html>


