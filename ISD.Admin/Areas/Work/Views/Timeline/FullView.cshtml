@model TimeLineSearchViewModel
@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title></title>
    <link href="~/Areas/Work/CSS/dhtmlxgantt.css" rel="stylesheet" />
    <link href="~/Areas/Work/CSS/CustomGrantt.css" rel="stylesheet" />
    <style>
        .gantt-error{display:none !important;}
    </style>
</head>
<body>
    <form id="frmSearch">
        <input type="hidden" value="@string.Format("{0:yyyy-MM-dd}",Model.StartFromDate)" id="StartFromDate" name="StartFromDate" />
        <input type="hidden" value="@string.Format("{0:yyyy-MM-dd}",Model.StartToDate)" id="StartToDate" name="StartToDate" />
        <input type="hidden" value="@Model.VBELN" id="VBELN" name="VBELN" />
        <input type="hidden" value="@Model.Summary" id="Summary" name="Summary" />
        <input type="hidden" value="@Model.Summary_Dot" id="Summary_Dot" name="Summary_Dot" />
        <input type="hidden" value="@Model.Material" id="Material" name="Material" />
    </form>
    <div class="">
        <div style="text-align:right">
            <id id="save-custom" class="fa fa-save"></id>
            <i id="full-screen" class="fa fa-window-maximize"></i>
        </div>
        <div id="gantt_here" class="common" style="min-height:850px;margin-top:10px;" ;></div>
        <div id="gantt_dropdown">
        </div>
    </div>
</body>
</html>


<script src="~/Scripts/jquery-1.12.4.js"></script>
<script src="~/Areas/Work/Scripts/dhtmlxgantt.js"></script>
<script src="https://momentjs.com/downloads/moment.min.js"></script>

<script>
    // tạo dữ liệu ảo
    var dt = [];
    $(document).ready(function () {
        // load data
        //var fromDate = $('#StartFromDate').val();
        //var toDate = $('#StartToDate').val();
        var listTask = [];
        var data = $("#frmSearch").serialize();
        $.ajax({
            type: "GET",
            data: data,
            url: '/Work/Timeline/_search',
            success: function (jsonData) {
                mapGanttChart(jsonData);

            },
            error: function (jsonData) {
                console.log(jsonData)
            }
        }).done(

            function () {

                // ---- Begin Create list colum ------
                gantt.config.date_grid = "%m/%d"; // định dạng ngày hiển thị
                var colHeader = '<div class="gantt-dropdown" onclick="gantt.$showDropdown(this)">&#9660;</div>';
                var allColumns = [
                    { name: "text", label: "LSX", width: 120, resize: true, tree: true, },
                    { name: "txtDuration", label: "TG", width: 60, align: "center", resize: true, },
                    { name: "txtStartDate", label: "BĐDK", width: 88, align: "center", resize: true, },
                    { name: "txtBDDC", label: "BĐĐC", width: 88, align: "center", resize: true, },
                    { name: "txtEstimateEndDate", label: "KTDK", width: 88, align: "center", resize: true, },
                    { name: "txtReceiveDate", label: "KTĐC", width: 100, align: "center", resize: true, },
                    { name: "status", label: "TT", width: 70, align: "left", resize: true, },
                    { name: "materialCode", label: "Mã SP", align: "center", width: 70, resize: true, },
                    { name: "materialName", label: "Tên SP", align: "center", width: 70, resize: true, },
                    { name: "slkh", label: "SLKH", width: 70, align: "center", resize: true, },
                    { name: "sltt", label: "SLTT", width: 70, align: "center", resize: true, },
                    { name: "complete", label: "HT(%)", align: "center", width: 70, resize: true, },
                    { name: "SLNVLYC", label: "SLNVLYC", align: "center", width: 70, resize: true, },
                    { name: "buttons", label: colHeader, width: 100, align: "center", resize: true }
                ]
                gantt.config.columns = allColumns;


                // Begin custom date is sunday

                gantt.config.work_time = true;
                gantt.templates.timeline_cell_class = function (task, date) {
                    if (!gantt.isWorkTime({ task: task, date: date })) {
                        return "weekend";
                    }
                };


                    // End custom date is sunday

                // -- End Create list column---
                gantt.config.scale_height = 70;
                gantt.config.min_column_width = 25;
                gantt.config.scales = [
                    {
                        unit: "month", step: 1, format: "%m/%Y", css: function (date) {
                            return "text-color";
                        }
                    },
                    { unit: "day", step: 1, format: "%j" },

                ];

                // ----- begin hind show cloumn grantt -----
                function getDropdownNode() {
                    return document.querySelector("#gantt_dropdown");
                }

                gantt.$showDropdown = function (node) {
                    var position = node.getBoundingClientRect();
                    var dropDown = getDropdownNode();
                    dropDown.style.top = position.bottom + "px";
                    dropDown.style.left = position.left + "px";
                    dropDown.style.display = "block";
                    populateColumnsDropdown(dropDown);

                    dropDown.onchange = function () {
                        var selection = getColumnsSelection(dropDown);
                        gantt.config.columns = createColumnsConfig(selection);
                        gantt.render();
                    }

                    dropDown.keep = true;
                    setTimeout(function () {
                        dropDown.keep = false;
                    })
                }
                gantt.$hideDropdown = function () {
                    var dropDown = getDropdownNode();
                    dropDown.style.display = "none";

                }
                window.addEventListener("click", function (event) {
                    if (!event.target.closest("#gantt_dropdown") && !getDropdownNode().keep) {
                        gantt.$hideDropdown();
                    }
                });
                function populateColumnsDropdown(node) {
                    var visibleColumns = {};
                    gantt.config.columns.forEach(function (col) {
                        visibleColumns[col.name] = true;
                    });




                    var lines = [];
                    allColumns.forEach(function (col) {

                        if (col.name != 'buttons') {
                            var checked = visibleColumns[col.name] ? "checked" : "";
                            lines.push("<label><input type='checkbox' name='" + col.name + "' " + checked + ">" + col.label + "</label>");
                        }

                    });
                    node.innerHTML = lines.join("<br>");

                }

                function getColumnsSelection(node) {
                    var selectedColumns = node.querySelectorAll(":checked");
                    var checkedColumns = {};
                    selectedColumns.forEach(function (node) {
                        checkedColumns[node.name] = true;
                    });
                    checkedColumns.buttons;
                    checkedColumns.buttons = true;

                    return checkedColumns;
                }
                function createColumnsConfig(selectedColumns) {
                    var newColumns = [];

                    allColumns.forEach(function (column) {
                        if (selectedColumns[column.name]) {
                            newColumns.push(column);
                        }
                    });


                    return newColumns;
                }

                //Create column custom
                function createColumnsCustom(selectedColumns) {
                    var newColumns = [];
                    var json = localStorage.getItem("columnDefault");
                    var arrColumnDF = JSON.parse(json);
                    var listNameColumn = [];
                    $.each(selectedColumns, function (i, item) {
                        listNameColumn.push(item.name)
                    })
                    arrColumnDF.forEach(function (column) {
                        var index = jQuery.inArray(column.name, listNameColumn);
                        if (index != -1) {
                            column.width = selectedColumns[index].width;
                            newColumns.push(column);
                        }
                    });
                    return newColumns;
                }

                // --- end hind show column grantt
           gantt.attachEvent("onTaskClick", function (id, e) {
                        convertIconFileToFolderInGanttChart()
                        var button = e.target.closest("[data-action]")
                        if (button) {
                            var action = button.getAttribute("data-action");
                            var summary = button.getAttribute("data-summary");
                            switch (action) {
                                case "edit":
                                    loading2();
                                    $.ajax({
                                        type: "GET",
                                        data: {
                                            TaskId: id,
                                            KanbanId: "",
                                            NextColumnName: null,
                                            PartialName: "_FormUpdateSOSAP",

                                        },
                                        url: '/Work/Task/_Edit'
                                    }).done(function (html) {
                                        $("#popupTaskKanban .modal-content").html(html);
                                        $('#popupTaskKanban').modal('show');
                                    })
                                    break;
                                case "edit-lsxd":
                                    loading2();
                                    $.ajax({
                                        type: "GET",
                                        data: {
                                            TaskId: id,
                                            KanbanId: "",
                                            NextColumnName: null,
                                            PartialName: "_FormUpdateLSXD",
                                        },
                                        url: '/Work/Task/_Edit'
                                    }).done(function (html) {
                                        $("#popupTaskKanban .modal-content").html(html);
                                        $('#popupTaskKanban').modal('show');
                                    })
                                    break;
                                case "add":
                                    loading2();
                                    $.ajax({
                                        data: {
                                            Id: id,
                                            LSXDT: summary,
                                        },
                                        url: 'ProductionOrder/_DivisionOfTaskBy'
                                    }).done(function (html) {
                                        $('#popupProductionOrder .modal-content').html(html);
                                        $('#popupProductionOrder').modal('show');
                                    })
                                    break;
                                case "loadCDL":
                                    $.ajax({
                                        type: "GET",
                                        data: {
                                            fromDate: $('#StartFromDate').val(),
                                            toDate: $('#StartToDate').val(),
                                            parentTaskId: id

                                        },
                                        url: '/Work/Timeline/LoadSubTaskInTimeLine'
                                    }).done(function (jsonData) {
                                        mapGanttChart(jsonData);

                                        gantt.parse({
                                            data: listTask,
                                        });
                                    });

                                    break;
                                case "show_detail":
                                    loading2();
                                    $.ajax({
                                        type: "POST",
                                        url: "/Work/TimeLine/_GetBomDetails",
                                        data: {
                                            TaskId: id,
                                        },
                                        success: function (html) {
                                            $('#popupBomDetail .modal-content').html(html);
                                            $('#popupBomDetail').modal('show');
                                        },
                                        error: function (xhr, status, error) {
                                            alertPopup(false, xhr.responseText);
                                        }
                                    });

                                    break;

                                //case "loadCDN":
                                //    $.ajax({
                                //        type: "GET",
                                //        data: {
                                //            fromDate: $('#StartFromDate').val(),
                                //            toDate: $('#StartToDate').val(),
                                //            parentTaskId: id

                                    //    },
                                    //    url: '/Work/Timeline/LoadSubTaskInTimeLine'
                                    //}).done(function (jsonData) {
                                    //    mapGanttChart(jsonData);

                                //        gantt.parse({
                                //            data: listTask,
                                //        });
                                //    });

                                //    break;

                            }
                        }
                        return true;
                    });
                    // END event click task
                    // BEGIN event dupble click task
                    gantt.attachEvent("onTaskDblClick", function (id, e) {
                        convertIconFileToFolderInGanttChart()
                        for (var i = 0; i < listTask.length; i++) {
                            if (listTask[i].id == id && listTask[i].buttons.includes("edit")) {
                                loading2();

                                $.ajax({
                                    type: "GET",
                                    data: {
                                        TaskId: id,
                                        KanbanId: "",
                                        NextColumnName: null,
                                        PartialName: "_FormUpdateSOSAP",
                                    },
                                    url: '/Work/Task/_Edit'
                                }).done(function (html) {
                                    $("#popupTaskKanban .modal-content").html(html);
                                    $('#popupTaskKanban').modal('show');
                                });
                                break;
                            }

                        }

                    });
                    // END dupble event click task
                    gantt.attachEvent("onTaskClosed", function (id) {
                        convertIconFileToFolderInGanttChart();
                    });
                    gantt.attachEvent("onTaskOpened", function (id) {
                        convertIconFileToFolderInGanttChart();
                    });
                    gantt.attachEvent("onTaskUnselected", function (id) {
                        convertIconFileToFolderInGanttChart();
                    });
                    gantt.attachEvent("onDataRender", function () {
                        $('#gantt_here .gantt_grid_head_text').attr('title', 'Lệnh sản xuất');
                        $('#gantt_here .gantt_grid_head_txtDuration').attr('title', 'Thời gian');
                        $('#gantt_here .gantt_grid_head_txtStartDate').attr('title', 'Ngày bắt đầu dự kiến');
                        $('#gantt_here .gantt_grid_head_txtReceiveDate').attr('title', 'Ngày kết thúc điều chỉnh');
                        $('#gantt_here .gantt_grid_head_txtEstimateEndDate').attr('title', 'Ngày kết thúc dự kiến');
                        $('#gantt_here .gantt_grid_head_status').attr('title', 'Trạng thái');
                        $('#gantt_here .gantt_grid_head_materialCode').attr('title', 'Mã sản phẩm');
                        $('#gantt_here .gantt_grid_head_materialName').attr('title', 'Tên sản phẩm');
                        $('#gantt_here .gantt_grid_head_slkh').attr('title', 'Số lượng kế hoạch');
                        $('#gantt_here .gantt_grid_head_sltt').attr('title', 'Số lượng thực tế');
                        $('#gantt_here .gantt_grid_head_complete').attr('title', '% hoàn thành');
                        $('#gantt_here .gantt_grid_head_SLNVLYC').attr('title', 'Số lượng nguyên vật liệu yêu cầu');
                        convertIconFileToFolderInGanttChart();

                    });
                // BEGIN save Column default grantt in local storage
                localStorage.removeItem("columnDefault"); // remove local storage before add

                localStorage.removeItem("columnDefault");
                var listColumnDF = gantt.config.columns;
                var arrColumnDF = [];
                $.each(listColumnDF, function (i, item) {
                    var col = {
                        name: item.name,
                        label: item.label,
                        width: item.width,
                        height: item.height,
                        resize: item.resize,
                        tree: item.tree
                    }
                    arrColumnDF.push(col)
                })
                var JsonColumnDF = JSON.stringify(arrColumnDF);
                localStorage.setItem("columnDefault", JsonColumnDF);
                // END save Column default grantt in local storage

                //----- end hind show column grantt ------
                //---Begin Load column custom ---
                    /*var js = localStorage.getItem("column");*/
                    var arr = @Html.Raw(Json.Encode(ViewBag.PivotSetting));
                    $.each(arr, function (i, item) {
                        var col = {
                            name: item.FieldName,
                            label: item.Caption,
                            width: item.Width,
                            height: item.Height,
                            resize: item.Resize,
                            tree: item.Tree
                        }
                        dt.push(col)
                    });
                    var arrColumn = dt;
                // Trường hợp người dùng đã custom
                if (arr != null) {
                    gantt.config.columns = createColumnsCustom(arrColumn);
                    gantt.init("gantt_here");
                    gantt.parse({
                        data: listTask,
                    });
                }
                // Trường hợp người dùng chưa custom thì lấy default
                else {
                    gantt.init("gantt_here");
                    gantt.parse({
                        data: listTask,
                    });
                }
                    //-- END Load column custom from locol storage ---




            }
        )
        function convertIconFileToFolderInGanttChart() {
            for (var i = 0; i < listTask.length; i++) {
                if (listTask[i].type.includes("LSXC")) {
                    $('div[task_id="' + listTask[i].id + '"] .gantt_blank').removeClass("gantt_blank").addClass("gantt_open").attr('data-action', 'loadCDL');

                    $('div[task_id="' + listTask[i].id + '"] .gantt_file').removeClass("gantt_file").addClass("gantt_folder_closed");

                } else if (listTask[i].type.includes("CDL")) {
                    $('div[task_id="' + listTask[i].id + '"] .gantt_blank').removeClass("gantt_blank").addClass("gantt_open").attr('data-action', 'loadCDN');

                    $('div[task_id="' + listTask[i].id + '"] .gantt_file').removeClass("gantt_file").addClass("gantt_folder_closed");
                }
            }
        }
        function mapGanttChart(jsonData) {
            $.each(jsonData.Data, function (i, item) {
                var parent;
                if (item.ParentTaskId == null) {
                    parent = 0;
                }
                else {
                    parent = item.ParentTaskId;

                }
                var color = item.ProcessCode.split(',');
                var task = {
                    id: item.TaskId,
                    //LSX
                    text: item.Summary,
                    txtDuration: item.isHidden ? "" : item.Duration,
                    //BĐ DK (display)
                    txtStartDate: item.txtStartDate,
                    txtBDDC: item.txtBDDC,
                    txtEstimateEndDate: item.txtEstimateEndDate,
                    txtReceiveDate: item.txtReceiveDate,
                    status: item.status,
                    slkh: item.SL,
                    sldc: item.SLDC,
                    complete: item.Complate,
                    SLNVLYC: item.SLNVLYC,
                    materialCode: item.MaterialCode,
                    materialName: item.MaterialName,
                    sltt: item.SLTT,
                    parent: parent,
                    color: color[0],
                    textColor: color[1],
                    type: item.WorkFlowCode,
                    buttons: item.Button,
                    //start_date: moment(item.StartDate).format("DD/MM/YYYY"),
                    //end_date: moment(item.EstimateEndDate).add(1, 'days').format("DD/MM/YYYY"),
                    start_date: item.BDDC ? moment(item.BDDC).format("DD/MM/YYYY") : moment(item.StartDate).format("DD/MM/YYYY"),
                    end_date: item.ReceiveDate ? moment(item.ReceiveDate).add(1, 'days').format("DD/MM/YYYY") : moment(item.EstimateEndDate).add(1, 'days').format("DD/MM/YYYY"),
                    duration: 0,
                };
                listTask.push(task);
            })
        }
        //--- BEGIN Save Custom
        //$('#save-custom').on('click', function () {
        //    localStorage.removeItem("column");
        //    var listColumn = gantt.config.columns;
        //    var arrColumn = [];
        //    $.each(listColumn, function (i, item) {
        //        var col = {
        //            name: item.name,
        //            label: item.label,
        //            width: item.width,
        //            height: item.height,
        //            resize: item.resize,
        //            tree: item.tree
        //        }
        //        arrColumn.push(col)
        //    })
        //    var JsonColumn = JSON.stringify(arrColumn);
        //    localStorage.setItem("column", JsonColumn);

        //})
        //--- END Save Custom

    });

</script>

