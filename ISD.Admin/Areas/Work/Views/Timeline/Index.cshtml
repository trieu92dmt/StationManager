@model  TimeLineSearchViewModel

@{ ViewBag.Title = LanguageResource.MES_TimeLine;
    var listSystemTemplate = (List<PivotTemplateViewModel>)ViewBag.SystemTemplate;
    var listUserTemplate = (List<PivotTemplateViewModel>)ViewBag.UserTemplate;
    var templateId = ViewBag.TemplateId;
    var modeSearch = ViewBag.ModeSearch;
    var granttSettings = (List<FieldSettingGranttModel>)ViewBag.PivotSetting;
    string CurrentController = ConstController.Timeline;
    string CurrentArea = ConstArea.Work;
    string CurrentUrl = HtmlExtensions.GetCurrentUrl(CurrentArea, CurrentController);
    ViewBag.CurrentUrl = CurrentUrl; }
@Html.Hidden("TemplateId", null, new { value = templateId })
<div class="content-header clearfix">
    <h1 class="pull-left">
        @ViewBag.Title
    </h1>
    <div class="pull-right">

        <a class="btn bg-blue" id="full-screen"><i class="fa fa-window-maximize"></i> </a>
        <a class="btn bg-blue" id="export-Excel"><i class="fa fa-download"></i> Export</a>
    </div>
</div>
<div class="content">
    <div class="form-horizontal">
        <div class="panel-group">
            <div class="panel panel-default panel-search">
                <div class="row" style="padding-top:10px;">
                    <div class="col-sm-12">
                        <div class="box box-default box-solid">
                            <div class="box-header with-border">
                                <div class="box-tools pull-right">
                                    <button class="btn btn-box-tool" type="button" data-widget="collapse">
                                        <i class="fa fa-minus"></i>
                                    </button>
                                </div>
                            </div>
                            <div class="box-body">
                                @using (Html.BeginForm("_Search", null, FormMethod.Post, new { @id = "frmSearch", @class = "isd-form-search" }))
                                {
                                    <div class="panel-body">
                                        <div class="row">
                                            @*<div class="col-md-5">
                                        <div class="form-group">
                                            <div class="col-md-4">
                                                @Html.TooltipLabelFor(p => p.CompanyName)
                                            </div>
                                            <div class="col-md-8">
                                                @Html.DropDownList("CompanyId", null, LanguageResource.Dropdownlist_All, new { @class = "form-control with-search" })
                                            </div>
                                        </div>
                                    </div>*@
                                            <div class="col-md-5">
                                                <div class="form-group">
                                                    <div class="col-md-4">
                                                        @Html.TooltipLabelFor(p => p.VBELN)
                                                    </div>
                                                    <div class="col-md-8">
                                                        @Html.RequiredTextboxFor(p => p.VBELN, new { @autocomplete = "off" })
                                                    </div>
                                                </div>
                                            </div>

                                        </div>
                                        <div class="row">
                                            <div class="col-md-5">
                                                <div class="form-group">
                                                    <div class="col-md-4">
                                                        @Html.TooltipLabelFor(p => p.Summary)
                                                    </div>
                                                    <div class="col-md-8">
                                                        @Html.RequiredTextboxFor(p => p.Summary, new { @autocomplete = "off" })
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-5">
                                                <div class="form-group">
                                                    <div class="col-md-4">
                                                        @Html.TooltipLabelFor(p => p.Summary_Dot)
                                                    </div>
                                                    <div class="col-md-8">
                                                        @Html.RequiredTextboxFor(p => p.Summary_Dot, new { @autocomplete = "off" })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-5">
                                                <div class="form-group">
                                                    <div class="col-md-4">
                                                        @Html.TooltipLabelFor(p => p.Material)
                                                    </div>
                                                    <div class="col-md-8">
                                                        @Html.RequiredTextboxFor(p => p.Material, new { @autocomplete = "off" })
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-5">
                                                <div class="form-group">
                                                    <div class="col-md-4">
                                                        @Html.TooltipLabelFor(p => p.isDeleted)
                                                    </div>
                                                    <div class="col-md-8">
                                                        @Html.DropDownList("isDeleted", new List<SelectListItem>(){
                                                                        new SelectListItem(){Text = LanguageResource.Dropdownlist_All, Value = ""},
                                                                        new SelectListItem(){Text = "Đang mở", Value = "false"},
                                                                        new SelectListItem(){Text =  "Đã đóng", Value = "true"}
                                                                    }, new { @class = "form-control form-control-sm" })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-5">
                                                <div class="form-group">
                                                    <div class="col-md-4">
                                                        <div class="label-wrapper">
                                                            <label class="control-label">Ngày bắt đầu</label>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-8">
                                                        @Html.DropDownList("CommonDate1", null, new { @class = "form-control with-search ddl-common-date", @data_id = "Start", @id = "start-date", Name = "StartCommonDate" })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="row Start">
                                                <div class="col-md-5">
                                                    <div class="form-group">
                                                        <div class="col-md-4">
                                                            @Html.TooltipLabelFor(p => p.StartFromDate)
                                                        </div>
                                                        <div class="col-md-8">
                                                            @Html.RequiredTextboxFor(p => p.StartFromDate, "{0:yyyy-MM-dd}", new { type = "date" })
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-md-5">
                                                    <div class="form-group">
                                                        <div class="col-md-4">
                                                            @Html.TooltipLabelFor(p => p.StartToDate)
                                                        </div>
                                                        <div class="col-md-8">
                                                            @Html.RequiredTextboxFor(p => p.StartToDate, "{0:yyyy-MM-dd}", new { type = "date" })
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-5">
                                                <div class="form-group">
                                                    <div class="col-md-4">
                                                        <div class="label-wrapper">
                                                            <label class="control-label">Ngày kết thúc</label>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-8">
                                                        @Html.DropDownList("CommonDate2", null, new { @class = "form-control with-search ddl-common-date", @data_id = "End", @id = "end-date", Name = "EndCommonDate" })
                                                    </div>
                                                </div>
                                            </div>

                                        </div>
                                        <div class="row">
                                            <div class="row End">
                                                <div class="col-md-5">
                                                    <div class="form-group">
                                                        <div class="col-md-4">
                                                            @Html.TooltipLabelFor(p => p.EndFromDate)
                                                        </div>
                                                        <div class="col-md-8">
                                                            @Html.RequiredTextboxFor(p => p.EndFromDate, "{0:yyyy-MM-dd}", new { type = "date" })
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-md-5">
                                                    <div class="form-group">
                                                        <div class="col-md-4">
                                                            @Html.TooltipLabelFor(p => p.EndToDate)
                                                        </div>
                                                        <div class="col-md-8">
                                                            @Html.RequiredTextboxFor(p => p.EndToDate, "{0:yyyy-MM-dd}", new { type = "date" })
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-5">
                                                <div class="form-group">
                                                    <div class="col-md-4">
                                                        <div class="label-wrapper">
                                                            <label class="control-label">Ngày bắt đầu điều chỉnh</label>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-8">
                                                        @Html.DropDownList("CommonDate3", null, new { @class = "form-control with-search ddl-common-date", @data_id = "StartDC", @id = "start-dc-date", Name = "StartDCCommonDate" })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="row StartDC">
                                                <div class="col-md-5">
                                                    <div class="form-group">
                                                        <div class="col-md-4">
                                                            @Html.TooltipLabelFor(p => p.StartDCFromDate)
                                                        </div>
                                                        <div class="col-md-8">
                                                            @Html.RequiredTextboxFor(p => p.StartDCFromDate, "{0:yyyy-MM-dd}", new { type = "date" })
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-md-5">
                                                    <div class="form-group">
                                                        <div class="col-md-4">
                                                            @Html.TooltipLabelFor(p => p.StartDCToDate)
                                                        </div>
                                                        <div class="col-md-8">
                                                            @Html.RequiredTextboxFor(p => p.StartDCToDate, "{0:yyyy-MM-dd}", new { type = "date" })
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-5">
                                                <div class="form-group">
                                                    <div class="col-md-4">
                                                        <div class="label-wrapper">
                                                            <label class="control-label">Ngày kết thúc điều chỉnh</label>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-8">
                                                        @Html.DropDownList("CommonDate4", null, new { @class = "form-control with-search ddl-common-date", @data_id = "EndDC", @id = "end-dc-date", Name = "EndDCCommonDate" })
                                                    </div>
                                                </div>
                                            </div>

                                        </div>
                                        <div class="row">
                                            <div class="row EndDC">
                                                <div class="col-md-5">
                                                    <div class="form-group">
                                                        <div class="col-md-4">
                                                            @Html.TooltipLabelFor(p => p.EndDCFromDate)
                                                        </div>
                                                        <div class="col-md-8">
                                                            @Html.RequiredTextboxFor(p => p.EndDCFromDate, "{0:yyyy-MM-dd}", new { type = "date", Readonly = "" })
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-md-5">
                                                    <div class="form-group">
                                                        <div class="col-md-4">
                                                            @Html.TooltipLabelFor(p => p.EndDCToDate)
                                                        </div>
                                                        <div class="col-md-8">
                                                            @Html.RequiredTextboxFor(p => p.EndDCToDate, "{0:yyyy-MM-dd}", new { type = "date", Readonly = "" })
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-12">
                                            <div class="form-group">
                                                <div class="col-md-12 input-group" style="text-align:center">
                                                    <div class="col-md-12 input-group" style="text-align:center">
                                                        <a class="btn btn-primary btn-search" id="btn-Search"><i class="fa fa-search"></i> Tìm kiếm</a>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                    </div>
                                }
                            </div>

                        </div>
                    </div>
                    </div>
                    </div>
                    <div class="panel panel-default">

                        <div class="dropdown pull-right" style="padding-top:5px; padding-right: 5px;">
                            @Html.Partial("~/Areas/Reports/Views/_PivotTemplateHandle.cshtml")
                        </div>
                        <div class="panel-body" style="overflow-x:scroll;">
                            <div id="gantt_here" class="common" style="min-height:550px" ;></div>
                            <div id="gantt_dropdown">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
</div>

<div class="loading-modal"></div>


@section components {
    <div class="modal fade" id="popupProductionOrder" role="dialog">
        <div class="modal-dialog modal-xl">

            <!-- Modal content-->
            <div class="modal-content">

            </div>
        </div>
    </div>
    <div class="modal fade" id="popupTaskKanban" role="dialog">
        <div class="modal-dialog modal-lg">
            <!-- Modal content-->
            <div class="modal-content">

            </div>
        </div>
    </div>
    <div class="modal fade" id="popupBomDetail" role="dialog">
        <div class="modal-dialog modal-xl">

            <!-- Modal content-->
            <div class="modal-content">

            </div>
        </div>
    </div>
    <div class="modal fade" id="popupProductionOrderCheckValid" role="dialog">
        <div class="modal-dialog modal-lg">

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header bg-primary">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <h4 class="modal-title" id="">THÔNG BÁO</h4>

                </div>
                <div class="modal-body">
                    <div class="text-center" id="invalid-message"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Đóng</button>
                    <button type="button" class="btn btn-primary" id="btn-confirm-save-tach-dot">Lưu</button>
                </div>
            </div>
        </div>
    </div>
    @*@Html.Partial("~/Areas/Work/Views/Task/_DeletePopups.cshtml")*@
    <div id="popupSaveTemplate" class="modal fade" role="dialog">
        @Html.Partial("~/Areas/Reports/Views/_SaveTemplatePopup.cshtml")
    </div>
}

<!--Theo khuyến cáo của google, css đưa lên phần head, js đưa xuống cuối body-->
<!--Phần này là thư viện cần nhúng lên phần <head></head> -->
@section head{
    <link href="~/Scripts/jqwidgets/styles/jqx.base.css" rel="stylesheet" />
    <link href="~/Scripts/jqwidgets/styles/jqx.material-green.css" rel="stylesheet" />
    <link href="~/Areas/Work/CSS/dhtmlxgantt.css" rel="stylesheet" />
    <link href="~/Areas/Work/CSS/CustomGrantt.css" rel="stylesheet" />
    <style>
    </style>
}
@section jquery {
    <link href="~/Content/jquery-ui.css" rel="stylesheet" />
    <script src="~/Content/jquery-ui.js"></script>
}
<!--Phần này là thư viện cần nhúng lên cuối <body></body> -->

@section scripts{
    <!--Common Search result template-->
    <script src="~/Scripts/jqwidgets/jqxsortable.js"></script>
    <script src="~/Scripts/jqwidgets/jqxdata.js"></script>
    <script src="~/Scripts/jqwidgets/jqxcore.js"></script>
    <script src="~/Scripts/jqwidgets/jqxdragdrop.js"></script>
    <script src="~/Areas/Work/Scripts/CreateSubTask.js"></script>

    <script src="~/Areas/Work/Scripts/ISD.Kanban.js"></script>

    <!--gantt chart dhtmlx-->
    <script src="~/Areas/Work/Scripts/dhtmlxgantt.js"></script>
    <script src="~/Scripts/Common/ISD.SearchTemplate.js"></script>

    <script src="~/Areas/Work/Scripts/GranttChartTemplate.js"></script>
    @*<script src="https://export.dhtmlx.com/gantt/api.js?v=6.0.4"></script>*@
    <script src="https://momentjs.com/downloads/moment.min.js"></script>

    @*<script src="https://export.dhtmlx.com/gantt/api.js?v=7.1.2"></script>*@
    <!--Nhé thử vào đây xem được không, không được sẽ làm không đúng khuyến cáo trong 1 số trường hợp-->
    <!--CK Editor-->

    <script src="~/Content/Plugin/ckeditor/ckeditor.js"></script>
    <script src="~/ckfinder/ckfinder.js"></script>
    <script>
        var dt = [];
        //--BEGIN EVENT COMPANYCHANGE
        $('#CompanyId').on('change', function () {
            var CompanyId = $("#CompanyId").val();

            $.ajax({
                type: "POST",
                url: "/work/Timeline/GetWorkShopBy",
                data: {
                    CompanyId: CompanyId
                },
                success: function (jsonData) {
                    $("#WorkShopId").html("");
                    if (jsonData.length > 0) {
                        $.each(jsonData, function (index, value) {
                            $("#WorkShopId").append("<option value='" + value.Value + "'>" + value.Text + "</option>");
                        });
                    }
                    else {
                        $("#WorkShopId").append("<option>-- Tất cả --</option>");
                    }
                }
            });
        })
        //--END EVENT COMPANYCHANGE

        // tạo dữ liệu ảo

        //var arr = [
        //    { id: "676ca794-d859-4b68-963f-000042f514b0", text: "Trúc - 31/5 - Anh Sơn", duration: 0, start_date: "01/05/2021", end_date: "25/05/2021", finishDate: "15/04/2021", status: "", slkh: 0, sltt: 0, complete: 0, SLNVLYC: 0, parent: null, open: true, color: "red", textColor: "blue" },
        //    { id: "676ca794-d859-4b68-963f-000042f514b1", text: "Trúc - 31/5 - Anh Sơn", duration: 0, start_date: "01/05/2021", end_date: "25/05/2021", finishDate: "15/04/2021", status: "", slkh: 0, sltt: 0, complete: 0, SLNVLYC: 0, parent: '676ca794-d859-4b68-963f-000042f514b0', open: true, color: "yellow" },
        //    { id: "676ca794-d859-4b68-963f-000042f514b2", text: "Trúc - 31/5 - Anh Sơn", duration: 0, start_date: "01/05/2021", end_date: "25/05/2021", finishDate: "15/04/2021", status: "", slkh: 0, sltt: 0, complete: 0, SLNVLYC: 0, parent: '676ca794-d859-4b68-963f-000042f514b0', open: true }
        //    { id: 2, text: "Task #1", start_date: "02-02-2018", duration: 8, progress: 0.6, parent: 1, cc: 'c' },

        //    { id: 4, text: "Project #4", start_date: "01-04-2018", duration: 18, progress: 0.4, cc: 'c', open: true },
        //    { id: 5, text: "Task #5", start_date: "02-04-2018", duration: 8, progress: 0.6, parent: 4, cc: 'c' },
        //    { id: 6, text: "Task #6", start_date: "11-04-2018", duration: 8, progress: 0.6, parent: 4, cc: 'c' },
        //    { id: 3, text: "Task #2", start_date: "11-02-2018", duration: 8, progress: 0.6, parent: 1, cc: 'c' },
        //];
        //end tạo dữ liệu ảo
        var listTask = [];
        $(document).ready(function () {
            ISDPivotTemplate.Init("@CurrentUrl", "@CurrentController");
            window.alert = function () { };

            //common date
            $(document).on("change", ".ddl-common-date", function () {
                var cssClass = $(this).data('id');
                var commonDate = $(this).val();
                $.ajax({
                    type: "POST",
                    url: "/Utilities/CommonDate/Get",
                    data: {
                        CommonDate: commonDate
                    },
                    success: function (jsonData) {
                        $("." + cssClass + " input[name='" + cssClass + "FromDate']").val(jsonData.FromDate);
                        $("." + cssClass + " input[name='" + cssClass + "ToDate']").val(jsonData.ToDate);
                        if (jsonData.FromDate != '' && jsonData.FromDate != '') {
                            $("." + cssClass + " input[name='" + cssClass + "FromDate']").attr("readonly", true);
                            $("." + cssClass + " input[name='" + cssClass + "ToDate']").attr("readonly", true);
                        } else {
                            $("." + cssClass + " input[name='" + cssClass + "FromDate']").attr("readonly", false);
                            $("." + cssClass + " input[name='" + cssClass + "ToDate']").attr("readonly", false);
                        }

                    }
                });
            });





            // load data
            var fromDate = $('#StartFromDate').val();
            var toDate = $('#StartToDate').val();
            $data = $('#frmSearch').serializeArray();
            listTask = [];
            //GanttChart
            $.ajax({
                type: "GET",
                data: $data,
                url: '/Work/Timeline/_search',
                success: function (jsonData) {
                    mapGanttChart(jsonData);

              },
           error: function (jsonData) {
                    console.log(jsonData)
                }
            }).done(
                function () {
                    // ---- Begin Create list colum ------
                    gantt.config.date_grid = "%d/%m"; // định dạng ngày hiển thị
                    var colHeader = '<div class="gantt-dropdown" onclick="gantt.$showDropdown(this)">&#9660;</div>';
                    var allColumns = [

                        { name: "text", label: "LSX",width: 120, resize: true, tree: true, },
                        { name: "txtDuration", label: "TG", width: 60, align: "center", resize: true, },
                        { name: "txtStartDate", label: "BĐDK", width: 88, align: "center", resize: true, },
                        { name: "txtBDDC", label: "BĐĐC", width: 88, align: "center", resize: true, },
                        { name: "txtEstimateEndDate", label: "KTDK", width: 88, align: "center", resize: true, },
                        { name: "txtReceiveDate", label: "KTĐC", width: 100, align: "center", resize: true, },
                        { name: "status", label: "TT", width: 70, align: "left", resize: true, },
                        { name: "materialCode", label: "Mã SP", align: "center", width: 70, resize: true, },
                        { name: "materialName", label: "Tên SP", align: "center", width: 70, resize: true, },
                        { name: "slkh", label: "SLKH", width: 70, align: "center", resize: true, },
                        { name: "sltt", label: "SLTT", width: 70, align: "center", resize: true, },
                        { name: "complete", label: "HT(%)", align: "center", width: 70, resize: true, },
                        { name: "SLNVLYC", label: "SLNVLYC", align: "center", width: 70, resize: true, },
                        {name: "buttons", label: colHeader, width: 100, align: "center", resize: true}
                    ]
                    gantt.config.columns = allColumns;
                    // -- End Create list column---

                    // Begin custom date is sunday

                    var today = moment().valueOf()
                    var day = moment(today).format('MM/DD/YYYY');
                    gantt.config.work_time = true;
                    gantt.templates.timeline_cell_class = function (task, date) {
                        if (!gantt.isWorkTime({ task: task, date: date })) {
                            return "weekend";
                        }
                        date = moment(date).format('MM/DD/YYYY');
                        if (date == day) {
                            return "today-cell";
                        }
                    };
                    // End custom date is sunday


                    // custom scale
                    gantt.config.scale_height = 40;
                    gantt.config.min_column_width = 25;
                    gantt.config.scales = [
                        {
                            unit: "month", step: 1, format: "%m/%Y", css: function (date) {
                                return "text-color";
                            }
                        },
                        {
                            unit: "day", step: 1, format: "%j"
                        }

                    ];
                    // end custom sacle

                    // ----- begin hind show cloumn grantt -----
                    function getDropdownNode() {
                        return document.querySelector("#gantt_dropdown");
                    }

                    gantt.$showDropdown = function (node) {
                        var position = node.getBoundingClientRect();
                        var dropDown = getDropdownNode();
                        dropDown.style.top = position.bottom + "px";
                        dropDown.style.left = position.left + "px";
                        dropDown.style.display = "block";
                        populateColumnsDropdown(dropDown);

                        dropDown.onchange = function () {
                            var selection = getColumnsSelection(dropDown);
                            gantt.config.columns = createColumnsConfig(selection);
                            gantt.render();
                        }

                        dropDown.keep = true;
                        setTimeout(function () {
                            dropDown.keep = false;
                        })
                    }
                    gantt.$hideDropdown = function () {
                        var dropDown = getDropdownNode();
                        dropDown.style.display = "none";

                    }
                    window.addEventListener("click", function (event) {
                        if (!event.target.closest("#gantt_dropdown") && !getDropdownNode().keep) {
                            gantt.$hideDropdown();
                        }
                    });
                    function populateColumnsDropdown(node) {
                        var visibleColumns = {};
                        gantt.config.columns.forEach(function (col) {
                            visibleColumns[col.name] = true;
                        });




                        var lines = [];
                        allColumns.forEach(function (col) {

                            if (col.name != 'buttons') {
                                var checked = visibleColumns[col.name] ? "checked" : "";
                                lines.push("<label><input type='checkbox' name='" + col.name + "' " + checked + ">" + col.label + "</label>");
                            }

                        });
                        node.innerHTML = lines.join("<br>");

                    }

                    function getColumnsSelection(node) {
                        var selectedColumns = node.querySelectorAll(":checked");
                        var checkedColumns = {};
                        selectedColumns.forEach(function (node) {
                            checkedColumns[node.name] = true;
                        });
                        checkedColumns.buttons;
                        checkedColumns.buttons = true;

                        return checkedColumns;
                    }
                    function createColumnsConfig(selectedColumns) {
                        var newColumns = [];

                        allColumns.forEach(function (column) {
                            if (selectedColumns[column.name]) {
                                newColumns.push(column);
                            }
                        });


                        return newColumns;
                    }

                    //Create column custom
                    function createColumnsCustom(selectedColumns) {
                        var newColumns = [];
                        var json = localStorage.getItem("columnDefault");
                        var arrColumnDF = JSON.parse(json);
                        var listNameColumn = [];
                        $.each(selectedColumns, function (i, item) {
                            listNameColumn.push(item.name)
                        })
                        arrColumnDF.forEach(function (column) {
                            var index = jQuery.inArray(column.name, listNameColumn);
                            if (index != -1) {
                                column.width = selectedColumns[index].width;
                                newColumns.push(column);
                            }
                        });
                        return newColumns;
                    }

                    //----- end hind show column grantt ------

                    // -- BEGIN event search---
                    search();
                    // --END  event search---

                    // BEGIN event click task
                    function LoadDanhSachDotSX(LSXDT) {
                        $.ajax({
                            type: "GET",
                            data: {
                                LSXDT: LSXDT,
                            },
                            url: '/Work/ProductionOrder/_DivisionOfTaskDetailUpdate',
                            success: function (html) {
                                $(".detail-production-order-control").html(html);
                                //Set value for select list
                                //$(".dot-property7-value").each(function (index, element) {
                                //    var row = $(this).data('row');
                                //    var value = $(this).val();
                                //    if (value) {
                                //        var array = value.split(',');
                                //        $("#DotSXList_StepList_" + row).val(array).change();
                                //    }
                                //});
                                //Numeric input
                                $('.lsxsap-number2').inputFilter(function (value) {
                                    return /^-?\d*$/.test(value);
                                });

                                $.ajax({
                                    type: "GET",
                                    data: {
                                        LSXDT: LSXDT,
                                    },
                                    url: '/Work/ProductionOrder/_DivisionOfTaskStepUpdate',
                                    success: function (html) {
                                        $(".detail-step-control").html(html);
                                    },
                                })
                            },
                        })
                    }

                    gantt.attachEvent("onTaskClick", function (id, e) {
                        convertIconFileToFolderInGanttChart()
                        var button = e.target.closest("[data-action]")
                        if (button) {
                            var action = button.getAttribute("data-action");
                            var summary = button.getAttribute("data-summary");
                            switch (action) {
                                case "edit":
                                    loading2();
                                    $.ajax({
                                        type: "GET",
                                        data: {
                                            TaskId: id,
                                            KanbanId: "",
                                            NextColumnName: null,
                                            PartialName: "_FormUpdateSOSAP",

                                        },
                                        url: '/Work/Task/_Edit'
                                    }).done(function (html) {
                                        $("#popupTaskKanban .modal-content").html(html);
                                        $('#popupTaskKanban').modal('show');
                                    })
                                    break;
                                case "edit-lsxd":
                                    loading2();
                                    $.ajax({
                                        type: "GET",
                                        data: {
                                            TaskId: id,
                                            KanbanId: "",
                                            NextColumnName: null,
                                            PartialName: "_FormUpdateLSXD",
                                        },
                                        url: '/Work/Task/_Edit'
                                    }).done(function (html) {
                                        $("#popupTaskKanban .modal-content").html(html);
                                        $('#popupTaskKanban').modal('show');
                                    })
                                    break;
                                case "add":
                                    loading2();
                                    $.ajax({
                                        data: {
                                            Id: id,
                                            LSXDT: summary,
                                        },
                                        url: 'ProductionOrder/_DivisionOfTaskBy'
                                    }).done(function (html) {
                                        $('#popupProductionOrder .modal-content').html(html);
                                        $('#popupProductionOrder').modal('show');
                                        LoadDanhSachDotSX(summary);
                                    })
                                    break;
                                case "loadCDL":
                                    $.ajax({
                                        type: "GET",
                                        data: {
                                            fromDate: $('#StartFromDate').val(),
                                            toDate: $('#StartToDate').val(),
                                            parentTaskId: id

                                        },
                                        url: '/Work/Timeline/LoadSubTaskInTimeLine'
                                    }).done(function (jsonData) {
                                        mapGanttChart(jsonData);

                                        gantt.parse({
                                            data: listTask,
                                        });
                                    });

                                    break;
                                case "show_detail":
                                    loading2();
                                    $.ajax({
                                        type: "POST",
                                        url: "/@CurrentUrl/_GetBomDetails",
                                        data: {
                                            TaskId: id,
                                        },
                                        success: function (html) {
                                            $('#popupBomDetail .modal-content').html(html);
                                            $('#popupBomDetail').modal('show');
                                        },
                                        error: function (xhr, status, error) {
                                            alertPopup(false, xhr.responseText);
                                        }
                                    });

                                    break;

                                //case "loadCDN":
                                //    $.ajax({
                                //        type: "GET",
                                //        data: {
                                //            fromDate: $('#StartFromDate').val(),
                                //            toDate: $('#StartToDate').val(),
                                //            parentTaskId: id

                                    //    },
                                    //    url: '/Work/Timeline/LoadSubTaskInTimeLine'
                                    //}).done(function (jsonData) {
                                    //    mapGanttChart(jsonData);

                                //        gantt.parse({
                                //            data: listTask,
                                //        });
                                //    });

                                //    break;

                            }
                        }
                        return true;
                    });
                    // END event click task
                    // BEGIN event dupble click task
                    gantt.attachEvent("onTaskDblClick", function (id, e) {
                        convertIconFileToFolderInGanttChart()
                        for (var i = 0; i < listTask.length; i++) {
                            if (listTask[i].id == id && listTask[i].buttons.includes("edit")) {
                                loading2();

                                $.ajax({
                                    type: "GET",
                                    data: {
                                        TaskId: id,
                                        KanbanId: "",
                                        NextColumnName: null,
                                        PartialName: "_FormUpdateSOSAP",
                                    },
                                    url: '/Work/Task/_Edit'
                                }).done(function (html) {
                                    $("#popupTaskKanban .modal-content").html(html);
                                    $('#popupTaskKanban').modal('show');
                                });
                                break;
                            }

                        }

                    });
                    // END dupble event click task
                    gantt.attachEvent("onTaskClosed", function (id) {
                        convertIconFileToFolderInGanttChart();
                    });
                    gantt.attachEvent("onTaskOpened", function (id) {
                        convertIconFileToFolderInGanttChart();
                    });
                    gantt.attachEvent("onTaskUnselected", function (id) {
                        convertIconFileToFolderInGanttChart();
                    });
                    gantt.attachEvent("onDataRender", function () {
                        $('#gantt_here .gantt_grid_head_text').attr('title', 'Lệnh sản xuất');
                        $('#gantt_here .gantt_grid_head_txtDuration').attr('title', 'Thời gian');
                        $('#gantt_here .gantt_grid_head_txtStartDate').attr('title', 'Ngày bắt đầu dự kiến');
                        $('#gantt_here .gantt_grid_head_txtReceiveDate').attr('title', 'Ngày kết thúc điều chỉnh');
                        $('#gantt_here .gantt_grid_head_txtEstimateEndDate').attr('title', 'Ngày kết thúc dự kiến');
                        $('#gantt_here .gantt_grid_head_status').attr('title', 'Trạng thái');
                        $('#gantt_here .gantt_grid_head_materialCode').attr('title', 'Mã sản phẩm');
                        $('#gantt_here .gantt_grid_head_materialName').attr('title', 'Tên sản phẩm');
                        $('#gantt_here .gantt_grid_head_slkh').attr('title', 'Số lượng kế hoạch');
                        $('#gantt_here .gantt_grid_head_sltt').attr('title', 'Số lượng thực tế');
                        $('#gantt_here .gantt_grid_head_complete').attr('title', '% hoàn thành');
                        $('#gantt_here .gantt_grid_head_SLNVLYC').attr('title', 'Số lượng nguyên vật liệu yêu cầu');
                        convertIconFileToFolderInGanttChart();

                    });


                    // BEGIN save Column default grantt in local storage
                    localStorage.removeItem("columnDefault"); // remove local storage before add

                    localStorage.removeItem("columnDefault");
                    var listColumnDF = gantt.config.columns;
                    var arrColumnDF = [];
                    $.each(listColumnDF, function (i, item) {
                        var col = {
                            name: item.name,
                            label: item.label,
                            width: item.width,
                            height: item.height,
                            resize: item.resize,
                            tree: item.tree
                        }
                        arrColumnDF.push(col)
                    })
                    var JsonColumnDF = JSON.stringify(arrColumnDF);
                    localStorage.setItem("columnDefault", JsonColumnDF);
                    // END save Column default grantt in local storage

                    //---Begin Load column custom ---
                    /*var js = localStorage.getItem("column");*/
                    var arr = @Html.Raw(Json.Encode(ViewBag.PivotSetting));
                    $.each(arr, function (i, item) {
                        var col = {
                            name: item.FieldName,
                            label: item.Caption,
                            width: item.Width,
                            height: item.Height,
                            resize: item.Resize,
                            tree: item.Tree
                        }
                        dt.push(col)
                    });
                    var arrColumn = dt;
                       // Trường hợp người dùng đã custom
                    if (arr != null) {
                           gantt.config.columns = createColumnsCustom(arrColumn);
                           gantt.init("gantt_here");
                           gantt.parse({
                               data: listTask,
                           });
                       }
                    // Trường hợp người dùng chưa custom thì lấy default
                       else {
                            gantt.init("gantt_here");
                            gantt.parse({
                                data: listTask,
                            });
                        }
                    //-- END Load column custom from locol storage ---

                }
            )

            ISD.ShowMessage(window.location.href);
            ISD.Delete();
            ISD.Cancel();
            ISD.DateTimeInitial();
        });

        function convertIconFileToFolderInGanttChart() {
            for (var i = 0; i < listTask.length; i++) {
                if (listTask[i].type.includes("LSXC")) {
                    $('div[task_id="' + listTask[i].id + '"] .gantt_blank').removeClass("gantt_blank").addClass("gantt_open").attr('data-action', 'loadCDL');

                    $('div[task_id="' + listTask[i].id + '"] .gantt_file').removeClass("gantt_file").addClass("gantt_folder_closed");

                } else if (listTask[i].type.includes("CDL")) {
                    $('div[task_id="' + listTask[i].id + '"] .gantt_blank').removeClass("gantt_blank").addClass("gantt_open").attr('data-action', 'loadCDN');

                    $('div[task_id="' + listTask[i].id + '"] .gantt_file').removeClass("gantt_file").addClass("gantt_folder_closed");
                }

                //if (listTask[i].sldc != null && listTask[i].sldc != listTask[i].slkh) {
                //    $('.gantt_grid_data div[task_id="' + listTask[i].id + '"]').css('background-color', '#F19373');
                //}
            }
        }
        function mapGanttChart(jsonData) {
            $.each(jsonData.Data, function (i, item) {
                var parent;
                if (item.ParentTaskId == null) {
                    parent = 0;
                }
                else {
                    parent = item.ParentTaskId;

                }

                var color = item.ProcessCode.split(',');

                var task = {
                    id: item.TaskId,
                    //LSX
                    text: item.Summary,
                    txtDuration: item.isHidden ? "" : item.Duration,
                    //BĐ DK (display)
                    txtStartDate: item.txtStartDate,
                    txtBDDC: item.txtBDDC,
                    txtEstimateEndDate: item.txtEstimateEndDate,
                    txtReceiveDate: item.txtReceiveDate,
                    status: item.status,
                    slkh: item.SLDC,
                    sldc: item.SLDC,
                    complete: item.Complate,
                    SLNVLYC: item.SLNVLYC,
                    materialCode: item.MaterialCode,
                    materialName: item.MaterialName,
                    sltt: item.SLTT,
                    parent: parent,
                    color: color[0],
                    textColor: color[1],
                    type: item.WorkFlowCode,
                    buttons: item.Button,
                    //start_date: moment(item.StartDate).format("DD/MM/YYYY"),
                    //end_date: moment(item.EstimateEndDate).add(1, 'days').format("DD/MM/YYYY"),
                    start_date: item.BDDC ? moment(item.BDDC).format("DD/MM/YYYY") : moment(item.StartDate).format("DD/MM/YYYY"),
                    end_date: item.ReceiveDate ? moment(item.ReceiveDate).add(1, 'days').format("DD/MM/YYYY") : moment(item.EstimateEndDate).add(1, 'days').format("DD/MM/YYYY"),
                    duration: 0,
                };
                listTask.push(task);

            })
        }
        // --- BEGIN event search ---
        function search() {
            $('#btn-Search').on('click', function () {
                var $btn = $('#btn-Search');
                loading2();
                gantt.templates.scale_cell_class = function (date) {
                    if (date.getDay() == 0 || date.getDay() == 6) {
                        return "weekend";
                    }
                };
                var fromDate = $('#StartFromDate').val();
                var toDate = $('#StartToDate').val();
                $data = $('#frmSearch').serializeArray();
                listTask = [];
                $.ajax({
                    type: "GET",
                    data: $data,
                    url: '/Work/Timeline/_search',
                    success: function (jsonData) {
                        mapGanttChart(jsonData);
                    },
                    error: function (jsonData) {
                        console.log(jsonData)
                    }
                }).done(
                    function () {
                        gantt.clearAll();
                        gantt.init("gantt_here");
                        gantt.parse({
                            data: listTask,
                        });
                        gantt.attachEvent("onDataRender", function () {
                           convertIconFileToFolderInGanttChart();

                        });

                    })

            })

        }
        // ---- END event search ---

        // --- BEGIN event Full Screen ---
        $('#full-screen').on('click', function () {

            var fromDate = $('#StartFromDate').val();
            var toDate = $('#StartToDate').val();
            var VBELN = $('#VBELN').val();
            var Summary = $('#Summary').val();
            var Summary_Dot = $('#Summary_Dot').val();
            var Material = $('#Material').val();
            var date = $.datepicker.formatDate('yy-mm-dd', new Date());
            if (fromDate == "") {
                var fromDate = date;
            }
            if (toDate == "") {
                var toDate = date;
            }
            var url = '/work/Timeline/FullView?StartFromDate=' + fromDate + '&StartToDate=' + toDate + '&VBELN=' + VBELN + '&Summary=' + Summary + '&Summary_Dot=' + Summary_Dot + '&Material=' + Material + '';
            window.open(url, 'window name', 'window settings');


        })



        //-- BEGIN Export excel

        $('#export-Excel').on('click', function () {

            gantt.config.scales = [
                { unit: "day", step: 1, format: "%j-%M-%Y" }
            ];
            //gantt.eachTask(function (task) {
            //    task.$open = true;
            //});
            //gantt.render();
            gantt.exportToExcel({
                visual: "base-colors",

            })
            gantt.config.scales = [
                { unit: "month", step: 1, format: "%M-%Y" },
                { unit: "day", step: 1, format: "%j" },
                { unit: "day", step: 1, format: "%D" }
            ];
            //gantt.eachTask(function (task) {
            //    task.$open = false;
            //});
            //gantt.render();
        })
         //-- END export excel

       // BEGIN even change template
        $(document).off("click", ".pivot-template-item").on("click", ".pivot-template-item", function () {
            var arr = {};
            var data = $("#frmSearch").serializeArray();
            var obj = {};
            $.each(data, function (index, val) {
                obj[val.name] = val.value;
                $.extend(true, arr, obj)
            });
            obj["IsView"] = true;
            obj["modeSearch"] = "Recently";
            $.extend(true, arr, obj);
            var templateId = $(this).data('id');
            obj["pivotTemplate"] = templateId;
            $.extend(true, arr, obj);
            ISD.Download("/@CurrentUrl/ChangeTemplate", arr);

             @*var arr = {};
             var data = $("#frmSearch").serializeArray();
             var obj = {};
             $.each(data, function (index, val) {
                 obj[val.name] = val.value;
                 $.extend(true, arr, obj)
             });
            obj["IsView"] = true;
            obj["modeSearch"] = "Recently";
            $.extend(true, arr, obj);
            var templateId = $(this).data('id');
            obj["pivotTemplate"] = templateId;
            $.extend(true, arr, obj);
            //Save localStorage
            localStorage.setItem('pageId-' + currentPageId, JSON.stringify(arr));
            ISD.Download("/@CurrentUrl/ChangeTemplate", arr);*@
        });
        // END event change template
        $('#popupBomDetail').on('hidden.bs.modal', function () {
            $('#popupBomDetail .modal-content').html("");
        });

        //  begin tách đợt
        $(document).on('click', '.btn-them-dot', function (event) {
            var $btn = $(this);
            //$btn.button('loading');
            //event.preventDefault();
            var indexRow = 0;
            $(".detail-production-order").each(function (index, value) {
                indexRow = index;
            });
            indexRow++;

            var indexChildrenRow = 0;
            $(".DetailProductOrder").each(function (index, value) {
                indexChildrenRow = index;
            });
            indexChildrenRow++;

            var controlForm = $('.detail-production-order-control:first'),
                currentEntry = $('.detail-production-order:last'),
                newEntry = $(currentEntry.clone()).appendTo(controlForm);

            //Đợt sản xuất: cập nhật lại index và value cho từng row
            newEntry.find('.dot-id').attr('name', 'DotSXList[' + indexRow + '].DotId').val('');
            newEntry.find('.dot-id').attr('id', 'DotSXList_DotId_' + indexRow);
            //Lấy tên đợt + 1: VD: 01-21-ABCD-Đ1 => 01-21-ABCD-Đ2
            var dotName = newEntry.find('.dot-name').val();
            var newDotName = dotName.substring(0, dotName.lastIndexOf('-')) + '-D' + (indexRow + 1);
            newEntry.find('.dot-name').attr('name', 'DotSXList[' + indexRow + '].DotName').val(newDotName);
            newEntry.find('.dot-name').attr('id', 'DotSXList_DotName_' + indexRow);
            //STT đợt: dùng đề tìm danh sách LSX SAP theo đợt
            newEntry.find('.stt-dot').attr('name', 'DotSXList[' + indexRow + '].STTDot').val(indexRow + 1);
            newEntry.find('.stt-dot').attr('id', 'DotSXList_STTDot_' + indexRow);
            //LSX ĐT
            newEntry.find('.dot-property3').attr('name', 'DotSXList[' + indexRow + '].Property3');
            newEntry.find('.dot-property3').attr('id', 'DotSXList_Property3_' + indexRow);
            newEntry.find('.dot-property4').attr('name', 'DotSXList[' + indexRow + '].Property4');
            newEntry.find('.dot-property4').attr('id', 'DotSXList_Property4_' + indexRow);
            newEntry.find('.dot-property5').attr('name', 'DotSXList[' + indexRow + '].Property5');
            newEntry.find('.dot-property5').attr('id', 'DotSXList_Property5_' + indexRow);
            //Nhân sự phụ trách TDSX + XH
            newEntry.find('.dot-property6').attr('name', 'DotSXList[' + indexRow + '].Property6');
            newEntry.find('.dot-property6').attr('id', 'DotSXList_Property6_' + indexRow);
            //--Nhân sự cấp phát NVL
            //Công đoạn thực hiện
            //newEntry.find('.dot-property7').attr('name', 'DotSXList[' + indexRow + '].Property7');
            //newEntry.find('.dot-property7').attr('id', 'DotSXList_Property7_' + indexRow);
            //BD SC DK
            newEntry.find('.dot-date1').attr('name', 'DotSXList[' + indexRow + '].Date1');
            newEntry.find('.dot-date1').attr('id', 'DotSXList_Date1_' + indexRow);
            //KT SC DK
            newEntry.find('.dot-date2').attr('name', 'DotSXList[' + indexRow + '].Date2');
            newEntry.find('.dot-date2').attr('id', 'DotSXList_Date2_' + indexRow);
            //BD TC DK
            newEntry.find('.dot-date3').attr('name', 'DotSXList[' + indexRow + '].Date3');
            newEntry.find('.dot-date3').attr('id', 'DotSXList_Date3_' + indexRow);
            //KT TC DK
            newEntry.find('.dot-date4').attr('name', 'DotSXList[' + indexRow + '].Date4');
            newEntry.find('.dot-date4').attr('id', 'DotSXList_Date4_' + indexRow);
            //BD LRHT DK
            newEntry.find('.dot-date5').attr('name', 'DotSXList[' + indexRow + '].Date5');
            newEntry.find('.dot-date5').attr('id', 'DotSXList_Date5_' + indexRow);
            //KT LRHT DK
            newEntry.find('.dot-date6').attr('name', 'DotSXList[' + indexRow + '].Date6');
            newEntry.find('.dot-date6').attr('id', 'DotSXList_Date6_' + indexRow);
            //BD HTDG DK
            newEntry.find('.dot-date7').attr('name', 'DotSXList[' + indexRow + '].Date7');
            newEntry.find('.dot-date7').attr('id', 'DotSXList_Date7_' + indexRow);
            //KT HTDG DK
            newEntry.find('.dot-date8').attr('name', 'DotSXList[' + indexRow + '].Date8');
            newEntry.find('.dot-date8').attr('id', 'DotSXList_Date8_' + indexRow);
            //Ngày giao hàng điều chỉnh
            newEntry.find('.dot-date9').attr('name', 'DotSXList[' + indexRow + '].Date9');
            newEntry.find('.dot-date9').attr('id', 'DotSXList_Date9_' + indexRow);
            //Lệnh sản xuất: cập nhật lại index và value cho từng row
            //STT đợt:
            var stt_dot_con = newEntry.find('.stt-dot-con');
            $.each(stt_dot_con, function (index, element) {
                var indexChildrenListRow = indexChildrenRow + index;
                $(this).attr('name', 'LSXSAPList[' + indexChildrenListRow + '].STTDot').val(indexRow + 1);
                $(this).attr('id', 'LSXSAPList_STTDot_' + indexChildrenListRow);
            });
            //LSX SAP Id
            var lsxsap_id = newEntry.find('.lsxsap-id');
            $.each(lsxsap_id, function (index, element) {
                var indexChildrenListRow = indexChildrenRow + index;
                $(this).attr('name', 'LSXSAPList[' + indexChildrenListRow + '].LXSSAPId').val('');
                $(this).attr('id', 'LSXSAPList_LXSSAPId_' + indexChildrenListRow);
            });
            //LSX SAP
            var lsxsap_name = newEntry.find('.lsxsap-name');
            $.each(lsxsap_name, function (index, element) {
                var indexChildrenListRow = indexChildrenRow + index;
                $(this).attr('name', 'LSXSAPList[' + indexChildrenListRow + '].LSXSAP');
                $(this).attr('id', 'LSXSAPList_LSXSAP_' + indexChildrenListRow);
            });
            //BĐ Dự kién
            var start_date = newEntry.find('.lsxsap-start-date');
            $.each(start_date, function (index, element) {
                var indexChildrenListRow = indexChildrenRow + index;
                $(this).attr('name', 'LSXSAPList[' + indexChildrenListRow + '].StartDate');
                $(this).attr('id', 'LSXSAPList_StartDate_' + indexChildrenListRow);
            });
            //BĐ Điều chỉnh
            var date1 = newEntry.find('.lsxsap-date1');
            $.each(date1, function (index, element) {
                var indexChildrenListRow = indexChildrenRow + index;
                $(this).attr('name', 'LSXSAPList[' + indexChildrenListRow + '].Date1').val('');
                $(this).attr('id', 'LSXSAPList_Date1_' + indexChildrenListRow);
            });
            //KT Dự kiến
            var estimate_end_date = newEntry.find('.lsxsap-estimate-end-date');
            $.each(estimate_end_date, function (index, element) {
                var indexChildrenListRow = indexChildrenRow + index;
                $(this).attr('name', 'LSXSAPList[' + indexChildrenListRow + '].EstimateEndDate');
                $(this).attr('id', 'LSXSAPList_EstimateEndDate_' + indexChildrenListRow);
            });
            //KT Điều chỉnh
            var receive_date = newEntry.find('.lsxsap-receivedate');
            $.each(receive_date, function (index, element) {
                var indexChildrenListRow = indexChildrenRow + index;
                $(this).attr('name', 'LSXSAPList[' + indexChildrenListRow + '].ReceiveDate').val('');
                $(this).attr('id', 'LSXSAPList_ReceiveDate_' + indexChildrenListRow);
            });
            //SL KH
            var qty = newEntry.find('.lsxsap-qty');
            $.each(qty, function (index, element) {
                var indexChildrenListRow = indexChildrenRow + index;
                $(this).attr('name', 'LSXSAPList[' + indexChildrenListRow + '].Qty');
                $(this).attr('id', 'LSXSAPList_Qty_' + indexChildrenListRow);
            });
            //SL Đc
            var number2 = newEntry.find('.lsxsap-number2');
            $.each(number2, function (index, element) {
                var indexChildrenListRow = indexChildrenRow + index;
                $(this).attr('name', 'LSXSAPList[' + indexChildrenListRow + '].Number2').val('');
                $(this).attr('id', 'LSXSAPList_Number2_' + indexChildrenListRow);
            });
            //Trạng thái
            var task_status_id = newEntry.find('.lsxsap-task-status-id');
            $.each(task_status_id, function (index, element) {
                var indexChildrenListRow = indexChildrenRow + index;
                $(this).attr('name', 'LSXSAPList[' + indexChildrenListRow + '].TaskStatusId');
                $(this).attr('id', 'LSXSAPList_TaskStatusId_' + indexChildrenListRow);
            });
            //SL NVL YC
            var sl_nvl_yc = newEntry.find('.lsxsap-sl-nvl-yc');
            $.each(sl_nvl_yc, function (index, element) {
                var indexChildrenListRow = indexChildrenRow + index;
                $(this).attr('name', 'LSXSAPList[' + indexChildrenListRow + '].SL_NVL_YC');
                $(this).attr('id', 'LSXSAPList_SL_NVL_YC_' + indexChildrenListRow);
            });
            //Property
            var property1 = newEntry.find('.lsxsap-property1');
            $.each(property1, function (index, element) {
                var indexChildrenListRow = indexChildrenRow + index;
                $(this).attr('name', 'LSXSAPList[' + indexChildrenListRow + '].Property1');
                $(this).attr('id', 'LSXSAPList_Property1_' + indexChildrenListRow);
            });
            var property2 = newEntry.find('.lsxsap-property2');
            $.each(property2, function (index, element) {
                var indexChildrenListRow = indexChildrenRow + index;
                $(this).attr('name', 'LSXSAPList[' + indexChildrenListRow + '].Property2');
                $(this).attr('id', 'LSXSAPList_Property2_' + indexChildrenListRow);
            });
            var property3 = newEntry.find('.lsxsap-property3');
            $.each(property3, function (index, element) {
                var indexChildrenListRow = indexChildrenRow + index;
                $(this).attr('name', 'LSXSAPList[' + indexChildrenListRow + '].Property3');
                $(this).attr('id', 'LSXSAPList_Property3_' + indexChildrenListRow);
            });
            var property4 = newEntry.find('.lsxsap-property4');
            $.each(property4, function (index, element) {
                var indexChildrenListRow = indexChildrenRow + index;
                $(this).attr('name', 'LSXSAPList[' + indexChildrenListRow + '].Property4');
                $(this).attr('id', 'LSXSAPList_Property4_' + indexChildrenListRow);
            });
            var property5 = newEntry.find('.lsxsap-property5');
            $.each(property5, function (index, element) {
                var indexChildrenListRow = indexChildrenRow + index;
                $(this).attr('name', 'LSXSAPList[' + indexChildrenListRow + '].Property5');
                $(this).attr('id', 'LSXSAPList_Property5_' + indexChildrenListRow);
            });
            //ProductId
            var product_id = newEntry.find('.lsxsap-product-id');
            $.each(product_id, function (index, element) {
                var indexChildrenListRow = indexChildrenRow + index;
                $(this).attr('name', 'LSXSAPList[' + indexChildrenListRow + '].ProductId');
                $(this).attr('id', 'LSXSAPList_ProductId_' + indexChildrenListRow);
            });
            //Unit
            var unit = newEntry.find('.lsxsap-unit');
            $.each(unit, function (index, element) {
                var indexChildrenListRow = indexChildrenRow + index;
                $(this).attr('name', 'LSXSAPList[' + indexChildrenListRow + '].Unit');
                $(this).attr('id', 'LSXSAPList_Unit_' + indexChildrenListRow);
            });
            //div
            if ($('.lsxsap-dot').length - 1 > 0) {
                $('.lsxsap-dot').last().attr('id', 'lsxsap-dot-' + ($('.lsxsap-dot').length - 1));
            }
            //Tab công đoạn
            var indexStepRow = 0;
            $(".StepProductOrder").each(function (index, value) {
                indexStepRow = index;
            });
            indexStepRow++;
            var controlForm2 = $('.detail-step-control:first'),
                currentEntry2 = $('.detail-step:last'),
                newEntry2 = $(currentEntry2.clone()).appendTo(controlForm2);
            //DotId
            newEntry2.find('.dot-step-id').attr('name', 'DotSXStepList[' + indexRow + '].DotId').val('');
            newEntry2.find('.dot-step-id').attr('id', 'DotSXStepList_DotId_' + indexRow);
            //Lấy tên đợt + 1: VD: 01-21-ABCD-Đ1 => 01-21-ABCD-Đ2
            newEntry2.find('.dot-step-name').attr('name', 'DotSXStepList[' + indexRow + '].DotName').val(newDotName);
            newEntry2.find('.dot-step-name').attr('id', 'DotSXStepList_DotName_' + indexRow);
            //STT đợt: dùng đề tìm danh sách công đoạn theo đợt
            newEntry2.find('.stt-dot-step').attr('name', 'DotSXStepList[' + indexRow + '].STTDot').val(indexRow + 1);
            newEntry2.find('.stt-dot-step').attr('id', 'DotSXStepList_STTDot_' + indexRow);
            newEntry2.find('.panel-stt-dot').html(indexRow + 1);
            newEntry2.find('.accordion-toggle').attr('href', '#collapse-' + (indexRow + 1));
            newEntry2.find('.panel-collapse').attr('id', 'collapse-' + (indexRow + 1));
            //Công đoạn
            newEntry2.find('.cong-doan-check-all').attr('name', 'DotSXStepList[' + indexRow + '].IsCheckAll');
            newEntry2.find('.cong-doan-check-all').attr('id', 'DotSXStepList_IsCheckAll_' + indexRow);
            var sttdotstep = newEntry2.find('.stt-dot-cong-doan');
            $.each(sttdotstep, function (index, element) {
                var indexChildrenListRow = indexStepRow + index;
                $(this).attr('name', 'CongDoanList[' + indexChildrenListRow + '].STTDot').val(indexRow + 1);
                $(this).attr('id', 'CongDoanList_STTDot_' + indexChildrenListRow);
            });
            var stepcode = newEntry2.find('.cong-doan-code');
            $.each(stepcode, function (index, element) {
                var indexChildrenListRow = indexStepRow + index;
                $(this).attr('name', 'CongDoanList[' + indexChildrenListRow + '].StepCode');
                $(this).attr('id', 'CongDoanList_StepCode_' + indexChildrenListRow);
            });
            var ischoosen = newEntry2.find('.cong-doan-is-choosen');
            $.each(ischoosen, function (index, element) {
                var indexChildrenListRow = indexStepRow + index;
                $(this).attr('name', 'CongDoanList[' + indexChildrenListRow + '].IsChoosen');
                $(this).attr('id', 'CongDoanList_IsChoosen_' + indexChildrenListRow);
            });
            //div
            if ($('.cong-doan-dot').length - 1 > 0) {
                $('.cong-doan-dot').last().attr('id', 'cong-doan-dot-' + ($('.cong-doan-dot').length - 1));
                $('.cong-doan-check-all').last().data('row', $('.cong-doan-dot').length - 1);
            }
            //numeric input
            $('.lsxsap-number2').inputFilter(function (value) {
                return /^-?\d*$/.test(value);
            });
            //select2
            newEntry.find('.select2').remove();
            $("select").select2();
        })

        //lưu thông tin tách đợt
        //$(document).on('click', '#btn-save-tach-dot', function () {
        //    var $btn = $(this);
        //    $btn.button('loading');
        //    var frm = $('#frm-tach-dot'),
        //        formData = new FormData(),
        //        formParams = frm.serializeArray();
        //    if (frm.valid()) {
        //        $.each(formParams, function (i, val) {
        //            formData.append(val.name, val.value);
        //        });

        //        $.ajax({
        //            type: "POST",
        //            url: "/Work/ProductionOrder/CreateDivisionOfTask",
        //            data: formData,
        //            processData: false,
        //            contentType: false,
        //            success: function (jsonData) {
        //                $btn.button('reset');
        //                if (jsonData.Success == true) {
        //                    $('#popupProductionOrder').modal('hide');
        //                    if (jsonData.RedirectUrl) {
        //                        window.location.href = jsonData.RedirectUrl + "?message=" + jsonData.Data;
        //                    }
        //                }
        //                else {
        //                    if (jsonData.Data != null && jsonData.Data != "") {
        //                        //Báo lỗi trên popup
        //                        ISD.setMessage("#popupProductionOrder #divAlertWarningTask", jsonData.Data);
        //                        $('#popupProductionOrder #divAlertWarningTask').show();
        //                    }
        //                }
        //            },
        //            error: function (xhr, status, error) {
        //                $btn.button('reset');
        //                //Báo lỗi trên popup
        //                ISD.setMessage("#popupProductionOrder #divAlertWarningTask", xhr.responseText);
        //                $('#popupProductionOrder #divAlertWarningTask').show();
        //            }
        //        });
        //    }
        //    else {
        //        //show error invalid
        //        var validator = frm.validate();
        //        var arr = [];
        //        $.each(validator.errorMap, function (index, value) {
        //            console.log('Id: ' + index + ' Message: ' + value);
        //            arr.push(value);
        //        });
        //        if (arr.length > 0) {
        //            //  //alertPopup(false, arr);
        //        }
        //        $btn.button('reset');
        //    }
        //});

        $(document).ajaxStop(function () {
            $('.btn').button('reset');
        });

        //lưu thông tin tách đợt
        $(document).on('click', '#btn-save-tach-dot', function () {
            var $btn = $(this);
            $btn.button('loading');
            checkLSXSAPValid();
        });

        $(document).on('click', '#btn-confirm-save-tach-dot', function () {
            saveTachDot();
            $('#popupProductionOrderCheckValid').modal('hide');
        });


        //save tách đợt
        function saveTachDot() {
            var frm = $('#frm-tach-dot'),
                formData = new FormData(),
                formParams = frm.serializeArray();
            var frm2 = $('#frm-cong-doan'),
                formParams2 = frm2.serializeArray();
            if (frm.valid()) {
                $.each(formParams, function (i, val) {
                    formData.append(val.name, val.value);
                });
                $.each(formParams2, function (i, val) {
                    formData.append(val.name, val.value);
                });

                $.ajax({
                    type: "POST",
                    url: "/Work/ProductionOrder/CreateDivisionOfTask",
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (jsonData) {
                        if (jsonData.Success == true) {
                            $('#popupProductionOrder').modal('hide');
                            if (jsonData.RedirectUrl) {
                                window.location.href = jsonData.RedirectUrl + "?message=" + jsonData.Data;
                            }
                        }
                        else {
                            if (jsonData.Data != null && jsonData.Data != "") {
                                //Báo lỗi trên popup
                                ISD.setMessage("#popupProductionOrder #divAlertWarningTask", jsonData.Data);
                                $('#popupProductionOrder #divAlertWarningTask').show();
                            }
                        }
                    },
                    error: function (xhr, status, error) {
                        //Báo lỗi trên popup
                        ISD.setMessage("#popupProductionOrder #divAlertWarningTask", xhr.responseText);
                        $('#popupProductionOrder #divAlertWarningTask').show();
                    }
                });
            }
            else {
                //show error invalid
                var validator = frm.validate();
                var arr = [];
                $.each(validator.errorMap, function (index, value) {
                    console.log('Id: ' + index + ' Message: ' + value);
                    arr.push(value);
                });
                if (arr.length > 0) {
                    ISD.setMessage("#popupProductionOrder #divAlertWarningTask", arr);
                    $('#popupProductionOrder #divAlertWarningTask').show();
                }
                $btn.button('reset');
            }
        }

        //check valid
        function checkLSXSAPValid() {
            var frm = $('#frm-tach-dot'),
                formData = new FormData(),
                formParams = frm.serializeArray();
            if (frm.valid()) {
                $.each(formParams, function (i, val) {
                    formData.append(val.name, val.value);
                });

                $.ajax({
                    type: "POST",
                    url: "/Work/ProductionOrder/CheckLSXSAPValid",
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (jsonData) {
                        if (jsonData.Success) {
                            //return jsonData;
                            if (jsonData.IsValid) {
                                saveTachDot();
                            } else {
                                // there are errors
                                $('#popupProductionOrderCheckValid #invalid-message').html(jsonData.Data);
                                $('#popupProductionOrderCheckValid').modal('show');
                            }
                        }
                        else {
                            //Báo lỗi trên popup
                            ISD.setMessage("#popupProductionOrder #divAlertWarningTask", jsonData.Data);
                            $('#popupProductionOrder #divAlertWarningTask').show();
                        }
                    },
                    error: function (xhr, status, error) {
                        //Báo lỗi trên popup
                        ISD.setMessage("#popupProductionOrder #divAlertWarningTask", xhr.responseText);
                        $('#popupProductionOrder #divAlertWarningTask').show();
                    }
                });
            }
            else {
                //show error invalid
                var validator = frm.validate();
                var arr = [];
                $.each(validator.errorMap, function (index, value) {
                    console.log('Id: ' + index + ' Message: ' + value);
                    arr.push(value);
                });
                if (arr.length > 0) {
                    ISD.setMessage("#popupProductionOrder #divAlertWarningTask", arr);
                    $('#popupProductionOrder #divAlertWarningTask').show();
                }
            }
        }

        //xử lý copy thông tin ngày điều chỉnh
        $(document).on('click', '.copy-bddc', function () {
                var row = $(this).data('row');
                var parent = $(this).parents('#lsxsap-dot-' + row);
                var childrenCopy = parent.find('.lsxsap-date1:first').val();
                $(parent).find('.lsxsap-date1').not(':first').val(childrenCopy);

        });

        $(document).on('click',  '.copy-ktdc', function () {
                var row = $(this).data('row');
                var parent = $(this).parents('#lsxsap-dot-' + row);
            var childrenCopy = parent.find('.lsxsap-receivedate:first').val();
                $(parent).find('.lsxsap-receivedate').not(':first').val(childrenCopy);
                $(this).prop('disabled', true);
        });
        // end tách đợt

        //Tab công đoạn
        //Xử lý check all
        $(document).on('change', '.cong-doan-check-all', function () {
            var row = $(this).data('row');
            if ($(this).is(':checked')) {
                $('#cong-doan-dot-' + row + ' .cong-doan-is-choosen').prop('checked', true);
            }
            else {
                $('#cong-doan-dot-' + row + ' .cong-doan-is-choosen').prop('checked', false);
            }
        });

    </script>
}

