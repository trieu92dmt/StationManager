@model TaskViewModel
@using ISD.Core
@{
    var taskAssignList = Model.taskAssignList;
    var taskReporterList = Model.taskReporterList;
    var SalesEmployeeList = (List<SalesEmployeeViewModel>)ViewBag.EmployeeList;
    var TaskRolesList = (List<RolesViewModel>)ViewBag.TaskRolesList;
    var RolesList = (List<CatalogViewModel>)ViewBag.RoleList;
    string taskColor = ViewBag.TaskColor;

    //Cấu hình thuộc tính
    var configList = (List<WorkFlowConfigModel>)ViewBag.WorkFlowConfig;
    var fieldCodeList = (List<string>)ViewBag.WorkFlowConfigCode;
}

<div class="loading-modal">

</div>
<div class="box-body form-update-so-sap">
    <div class="form-horizontal">
        @Html.HiddenFor(p => p.TaskId)
        @Html.HiddenFor(p => p.WorkFlowCode)
        @Html.HiddenFor(p => p.ProductId)
        @Html.HiddenFor(p => p.Unit)
        @Html.Hidden("TaskStatusBackgroundColor", (string)ViewBag.TaskStatusBackgroundColor)
        @Html.Hidden("TaskStatusColor", (string)ViewBag.TaskStatusColor)


        <div class="form-group row">
            <!--LSX ĐT-->
            <div class="col-md-3">
                @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<TaskViewModel, string>(p => p.Property5)))
                {
                    <div class="form-group">
                        <div class="col-md-5">
                            @Html.LabelByPropertyNameFor(p => p.Property5, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<TaskViewModel, string>(p1 => p1.Property5)).Select(p => p.Note).FirstOrDefault())
                        </div>
                        <div class="col-md-7">
                            <div class="input-group-required input-group-select-required ">
                                @Html.RequiredTextboxFor(p => p.Property5, new { @readonly = "readonly" })
                                @Html.HiddenFor(p => p.Property5)
                            </div>
                            <div class="btn-save-hidden div-summary">
                                <button type="button" class="btn btn-default btn-cancel-task">@LanguageResource.Cancel</button>
                                <button type="button" class="btn btn-primary btn-save-task" data-add-success-call-back="CancelUpdateTask">@LanguageResource.Btn_Save</button>
                            </div>
                        </div>

                    </div>
                }
            </div>
            <!--Ngày bắt đầu dự kiến LSX ĐT-->
            <div class="col-md-3">
                <div class="form-group">
                    <div class="col-md-5">
                        @Html.LabelByPropertyNameFor(p => p.StartDate_LSXDT, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<TaskViewModel, DateTime?>(p1 => p1.StartDate)).Select(p => p.Note).FirstOrDefault())
                    </div>
                    <div class="form-inline col-md-7">
                        @Html.RequiredTextboxFor(p => p.StartDate_LSXDT, "{0:yyyy-MM-dd}", new { type = "date", @readonly = "readonly" })
                        @*@Html.Hidden("DisplayStartDate", Model.StartDate)*@
                    </div>
                </div>
            </div>
            <!--Ngày Kết thúc dự kiến LSX ĐT-->
            <div class="col-md-3">
                <div class="form-group">
                    <div class="col-md-5">
                        @Html.LabelByPropertyNameFor(p => p.EstimateEndDate_LSXDT, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<TaskViewModel, DateTime?>(p1 => p1.EstimateEndDate)).Select(p => p.Note).FirstOrDefault())
                    </div>
                    <div class="form-inline col-md-7">
                        @Html.RequiredTextboxFor(p => p.EstimateEndDate_LSXDT, "{0:yyyy-MM-dd}", new { type = "date", @readonly = "readonly" })
                        @*@Html.Hidden("DisplayEstimateEndDate", Model.EstimateEndDate)*@
                    </div>
                </div>
            </div>
            <!--Thời gian LSX ĐT-->
            <div class="col-md-3">
                <div class="form-group">
                    <div class="col-md-5">
                        @*@Html.LabelByPropertyNameFor(p => p.Duration, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<TaskViewModel, string>(p1 => p1.Duration)).Select(p => p.Note).FirstOrDefault())*@
                        @Html.TooltipLabelFor(p => p.Duration_LSXDT, LanguageResource.Duration)
                    </div>
                    <div class="form-inline col-md-7">
                        @Html.RequiredTextboxFor(p => p.Duration_LSXDT, new { @type = "number", @readonly = "readonly" })
                    </div>
                </div>
            </div>
        </div>
        <div class="form-group row">
            <!--LSX Con-->
            <div class="col-md-3">
                @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<TaskViewModel, string>(p => p.Summary)))
                {
                    <div class="form-group">
                        <div class="col-md-5">
                            @Html.LabelByPropertyNameFor(p => p.Summary, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<TaskViewModel, string>(p1 => p1.Summary)).Select(p => p.Note).FirstOrDefault())
                        </div>
                        <div class="col-md-7">
                            <div class="input-group-required input-group-select-required">
                                @Html.RequiredTextboxFor(p => p.Summary, new { @readonly = "readonly" })
                                @Html.HiddenFor(p => p.Summary)
                            </div>
                            <div class="btn-save-hidden div-summary">
                                <button type="button" class="btn btn-default btn-cancel-task">@LanguageResource.Cancel</button>
                                <button type="button" class="btn btn-primary btn-save-task" data-add-success-call-back="CancelUpdateTask">@LanguageResource.Btn_Save</button>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <!--Ngày bắt đầu dự kiến LSX Con-->
            <div class="col-md-3">
                @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<TaskViewModel, DateTime?>(p => p.StartDate)))
                {
                    <div class="form-group">
                        <div class="col-md-5">
                            @Html.LabelByPropertyNameFor(p => p.StartDate, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<TaskViewModel, DateTime?>(p1 => p1.StartDate)).Select(p => p.Note).FirstOrDefault())
                        </div>
                        <div class="form-inline col-md-7">
                            @Html.RequiredTextboxFor(p => p.StartDate, "{0:yyyy-MM-dd}", new { type = "date", @readonly = "readonly" })
                            @*@Html.Hidden("DisplayStartDate", Model.StartDate)*@
                        </div>
                    </div>
                }
            </div>
            <!--Ngày kết thúc dự kiến LSX Con-->
            <div class="col-md-3">
                @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<TaskViewModel, DateTime?>(p => p.EstimateEndDate)))
                {
                    <div class="form-group">
                        <div class="col-md-5">
                            @Html.LabelByPropertyNameFor(p => p.EstimateEndDate, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<TaskViewModel, DateTime?>(p1 => p1.EstimateEndDate)).Select(p => p.Note).FirstOrDefault())
                        </div>
                        <div class="form-inline col-md-7">
                            @Html.RequiredTextboxFor(p => p.EstimateEndDate, "{0:yyyy-MM-dd}", new { type = "date", @readonly = "readonly" })
                            @*@Html.Hidden("DisplayEstimateEndDate", Model.EstimateEndDate)*@
                        </div>
                    </div>
                }
            </div>
            <div class="col-md-3">
                @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<TaskViewModel, DateTime?>(p => p.ReceiveDate)))
                {
                    <div class="form-group">
                        <div class="col-md-5">
                            @Html.LabelByPropertyNameFor(p => p.ReceiveDate, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<TaskViewModel, DateTime?>(p1 => p1.ReceiveDate)).Select(p => p.Note).FirstOrDefault())
                        </div>
                        <div class="form-inline col-md-7">
                            @Html.RequiredTextboxFor(p => p.ReceiveDate, "{0:yyyy-MM-dd}", new { type = "date" })
                            @Html.Hidden("DisplayReceiveDate", Model.ReceiveDate)
                        </div>
                    </div>
                }
            </div>

            @if (Model.Type == ConstWorkFlow.LSXD)
            {
                <!--Ngày bắt đầu dự kiến Đợt-->
                <div class="col-md-3">
                    <div class="form-group">
                        <div class="col-md-5">
                            @Html.LabelByPropertyNameFor(p => p.Dot_StartDate, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<TaskViewModel, DateTime?>(p1 => p1.StartDate)).Select(p => p.Note).FirstOrDefault())
                        </div>
                        <div class="form-inline col-md-7">
                            @Html.RequiredTextboxFor(p => p.Dot_StartDate, "{0:yyyy-MM-dd}", new { type = "date", @readonly = "readonly" })
                        </div>
                    </div>
                </div>
                <!--Ngày kết thúc dự kiến Đợt-->
                <div class="col-md-3">
                    <div class="form-group">
                        <div class="col-md-5">
                            @Html.LabelByPropertyNameFor(p => p.Dot_EstimateEndDate, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<TaskViewModel, DateTime?>(p1 => p1.EstimateEndDate)).Select(p => p.Note).FirstOrDefault())
                        </div>
                        <div class="form-inline col-md-7">
                            @Html.RequiredTextboxFor(p => p.Dot_EstimateEndDate, "{0:yyyy-MM-dd}", new { type = "date", @readonly = "readonly" })
                        </div>
                    </div>
                </div>
                <!--Thời gian Đợt-->
                <div class="col-md-3">
                    <div class="form-group">
                        <div class="col-md-5">
                            @Html.TooltipLabelFor(p => p.Duration, "Thời gian")
                        </div>
                        <div class="form-inline col-md-7">
                            @Html.RequiredTextboxFor(p => p.Dot_Duration, new { @type = "number", @readonly = "readonly" })
                        </div>
                    </div>
                </div>
            }
            @if (Model.Type == ConstWorkFlow.LSXC)
            {
                <div class="form-group row">
                    <!--Mã thành phẩm-->
                    <div class="col-md-3">
                        <div class="form-group">
                            <div class="col-md-5">
                                @Html.TooltipLabelFor(p => p.ProductCode, "Mã thành phẩm")
                            </div>
                            <div class="col-md-7">
                                @Html.RequiredTextboxFor(p => p.ProductCode, new { @disabled = "disabled" })
                            </div>
                        </div>
                    </div>
                    <!--Tên Thành phẩm-->
                    <div class="col-md-3">
                        <div class="form-group">
                            <div class="col-md-5">

                                @Html.TooltipLabelFor(p => p.ProductName, "Tên thành phẩm")
                            </div>
                            <div class="col-md-7">
                                @Html.RequiredTextboxFor(p => p.ProductName, new { @readonly = "readonly" })
                            </div>
                        </div>
                    </div>
                    <!-- SLKH -->
                    <div class="col-md-3">
                        @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<TaskViewModel, int?>(p => p.Qty)))
                        {
                            <div class="form-group">
                                <div class="col-md-5">
                                    @Html.LabelByPropertyNameFor(p => p.Qty, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<TaskViewModel, int?>(p1 => p1.Qty)).Select(p => p.Note).FirstOrDefault())
                                </div>
                                <div class="col-md-7">
                                    <div class="input-group-required input-group-select-required ">
                                        @Html.TextBoxFor(p => p.Qty, new { @type = "number", @class = "form-control", @readonly = "readonly" })
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                    <!--Thời gian LSX Con-->
                    <div class="col-md-3">
                        <div class="form-group">
                            <div class="col-md-5">
                                @*@Html.LabelByPropertyNameFor(p => p.Duration, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<TaskViewModel, string>(p1 => p1.Duration)).Select(p => p.Note).FirstOrDefault())*@
                                @Html.TooltipLabelFor(p => p.Duration, "Thời gian")
                            </div>
                            <div class="form-inline col-md-7">
                                @Html.RequiredTextboxFor(p => p.Duration, new { @type = "number", @readonly = "readonly" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="form-group row">
                    <!-- NVL Yêu cầu -->
                    <div class="col-md-3">
                        <div class="form-group">
                            <div class="col-md-5">
                                @Html.TooltipLabelFor(p => p.MaterialsRequired, "Nguyên vật liệu yêu cầu")

                                @*@Html.LabelByPropertyNameFor(p => p.CompletedSubtask, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<TaskViewModel, int?>(p1 => p1.Qty)).Select(p => p.Note).FirstOrDefault())*@
                            </div>
                            <div class="col-md-7">
                                <div class="input-group-required input-group-select-required">
                                    @Html.TextBoxFor(p => p.MaterialsRequired, new { @type = "number", @class = "form-control", @readonly = "readonly" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- NVL Đã nhận -->
                    <div class="col-md-3">
                        <div class="form-group">
                            <div class="col-md-5">
                                <div class="label-wrapper">
                                    @Html.TooltipLabelFor(p => p.MaterialsReceived, "Nguyên vật liệu đã nhận")

                                </div>
                            </div>
                            <div class="col-md-7">
                                <div class="input-group-required input-group-select-required">
                                    @Html.TextBoxFor(p => p.MaterialsReceived, new { @type = "number", @class = "form-control", @readonly = "readonly" })
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- SLTT -->
                    <div class="col-md-3">
                        @*@if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<TaskViewModel, int?>(p => p.ActualNumber)))
                            {*@
                        <div class="form-group">
                            <div class="col-md-5">
                                @Html.TooltipLabelFor(p => p.ActualNumber, "Số lượng thực tế")
                            </div>
                            <div class="col-md-7">
                                <div class="input-group-required input-group-select-required">
                                    @Html.TextBoxFor(p => p.ActualNumber, new { @type = "number", @class = "form-control", @readonly = "readonly" })
                                </div>
                            </div>
                        </div>
                        @*  }*@
                    </div>
                    <!-- % hoàn thành -->
                    <div class="col-md-3">
                        <div class="form-group">
                            <div class="col-md-5">
                                @Html.TooltipLabelFor(p => p.PercentComplete, "% hoàn thành")
                            </div>
                            <div class="col-md-7">
                                <div class="input-group-required input-group-select-required">
                                    @Html.TextBoxFor(p => p.PercentComplete, new { @type = "number", @class = "form-control", @readonly = "readonly" })
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
            }
            <!--Trạng thái LSX Con-->
            <div class="form-group row">
                <div class="col-md-3">
                    @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<TaskViewModel, Guid>(p => p.TaskStatusId)))
                    {
                        <div class="form-group">
                            <div class="col-md-5">
                                @Html.LabelByPropertyNameFor(p => p.TaskStatusId, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<TaskViewModel, Guid>(p1 => p1.TaskStatusId)).Select(p => p.Note).FirstOrDefault())
                            </div>
                            <div class="col-md-7">
                                @Html.HiddenFor(p => p.TaskStatusId)
                                @Html.DropDownList("ToStatus", null, null, new { @class = "form-control with-search" })
                            </div>
                        </div>
                    }
                </div>

            </div>

        </div>
    </div>
</div>
    