//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ISD.EntityModels
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EntityDataContext : DbContext
    {
        public EntityDataContext()
            : base("name=EntityDataContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AddressBookModel> AddressBookModel { get; set; }
        public virtual DbSet<CreditLimitModel> CreditLimitModel { get; set; }
        public virtual DbSet<CustomerTastes_CollectionModel> CustomerTastes_CollectionModel { get; set; }
        public virtual DbSet<CustomerTastes_ColorToneModel> CustomerTastes_ColorToneModel { get; set; }
        public virtual DbSet<CustomerTastes_ProductGroupModel> CustomerTastes_ProductGroupModel { get; set; }
        public virtual DbSet<CustomerTastes_WoodGrainModel> CustomerTastes_WoodGrainModel { get; set; }
        public virtual DbSet<CustomerTastesModel> CustomerTastesModel { get; set; }
        public virtual DbSet<FileAttachmentModel> FileAttachmentModel { get; set; }
        public virtual DbSet<PartnerModel> PartnerModel { get; set; }
        public virtual DbSet<PersonInChargeDeletedModel> PersonInChargeDeletedModel { get; set; }
        public virtual DbSet<PersonInChargeModel> PersonInChargeModel { get; set; }
        public virtual DbSet<Profile_File_Mapping> Profile_File_Mapping { get; set; }
        public virtual DbSet<Profile_Opportunity_CompetitorModel> Profile_Opportunity_CompetitorModel { get; set; }
        public virtual DbSet<Profile_Opportunity_InternalModel> Profile_Opportunity_InternalModel { get; set; }
        public virtual DbSet<Profile_Opportunity_MaterialModel> Profile_Opportunity_MaterialModel { get; set; }
        public virtual DbSet<Profile_Opportunity_PartnerModel> Profile_Opportunity_PartnerModel { get; set; }
        public virtual DbSet<ProfileBAttributeModel> ProfileBAttributeModel { get; set; }
        public virtual DbSet<ProfileCareerModel> ProfileCareerModel { get; set; }
        public virtual DbSet<ProfileCategoryModel> ProfileCategoryModel { get; set; }
        public virtual DbSet<ProfileCAttributeModel> ProfileCAttributeModel { get; set; }
        public virtual DbSet<ProfileConfigModel> ProfileConfigModel { get; set; }
        public virtual DbSet<ProfileContactAttributeDeletedModel> ProfileContactAttributeDeletedModel { get; set; }
        public virtual DbSet<ProfileContactAttributeModel> ProfileContactAttributeModel { get; set; }
        public virtual DbSet<ProfileDeletedModel> ProfileDeletedModel { get; set; }
        public virtual DbSet<ProfileEmailDeletedModel> ProfileEmailDeletedModel { get; set; }
        public virtual DbSet<ProfileEmailModel> ProfileEmailModel { get; set; }
        public virtual DbSet<ProfileFieldModel> ProfileFieldModel { get; set; }
        public virtual DbSet<ProfileGroupModel> ProfileGroupModel { get; set; }
        public virtual DbSet<ProfileLevelModel> ProfileLevelModel { get; set; }
        public virtual DbSet<ProfileModel> ProfileModel { get; set; }
        public virtual DbSet<ProfilePhoneDeletedModel> ProfilePhoneDeletedModel { get; set; }
        public virtual DbSet<ProfilePhoneModel> ProfilePhoneModel { get; set; }
        public virtual DbSet<ProfileTypeModel> ProfileTypeModel { get; set; }
        public virtual DbSet<RegisterReceiveNewsModel> RegisterReceiveNewsModel { get; set; }
        public virtual DbSet<RoleInChargeDeletedModel> RoleInChargeDeletedModel { get; set; }
        public virtual DbSet<RoleInChargeModel> RoleInChargeModel { get; set; }
        public virtual DbSet<SMSModel> SMSModel { get; set; }
        public virtual DbSet<ApplicationConfig> ApplicationConfig { get; set; }
        public virtual DbSet<ApplicationLog> ApplicationLog { get; set; }
        public virtual DbSet<EquipmentStatus_Temp> EquipmentStatus_Temp { get; set; }
        public virtual DbSet<FaceCheckInOutModel> FaceCheckInOutModel { get; set; }
        public virtual DbSet<LastRunCheckInOutModel> LastRunCheckInOutModel { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<AccessoryPriceModel> AccessoryPriceModel { get; set; }
        public virtual DbSet<CareerModel> CareerModel { get; set; }
        public virtual DbSet<CollectingAuthorityModel> CollectingAuthorityModel { get; set; }
        public virtual DbSet<ContainerRequirementModel> ContainerRequirementModel { get; set; }
        public virtual DbSet<CustomerModel> CustomerModel { get; set; }
        public virtual DbSet<GH_NotificationModel> GH_NotificationModel { get; set; }
        public virtual DbSet<LaborModel> LaborModel { get; set; }
        public virtual DbSet<MaterialModel> MaterialModel { get; set; }
        public virtual DbSet<MobileScreenModel> MobileScreenModel { get; set; }
        public virtual DbSet<NotificationAccountMappingModel> NotificationAccountMappingModel { get; set; }
        public virtual DbSet<NotificationModel> NotificationModel { get; set; }
        public virtual DbSet<PaymentMethodModel> PaymentMethodModel { get; set; }
        public virtual DbSet<PaymentNationalBudgetModel> PaymentNationalBudgetModel { get; set; }
        public virtual DbSet<PrintMoldModel> PrintMoldModel { get; set; }
        public virtual DbSet<ProductHierarchyModel> ProductHierarchyModel { get; set; }
        public virtual DbSet<ProfitCenterModel> ProfitCenterModel { get; set; }
        public virtual DbSet<PromotionByStoreModel> PromotionByStoreModel { get; set; }
        public virtual DbSet<PromotionGiftAccessoryModel> PromotionGiftAccessoryModel { get; set; }
        public virtual DbSet<ProspectModel> ProspectModel { get; set; }
        public virtual DbSet<ServiceTypeModel> ServiceTypeModel { get; set; }
        public virtual DbSet<StateTreasuryModel> StateTreasuryModel { get; set; }
        public virtual DbSet<TaxConfigModel> TaxConfigModel { get; set; }
        public virtual DbSet<TemperatureConditionModel> TemperatureConditionModel { get; set; }
        public virtual DbSet<AccessorySaleOrderDetailModel> AccessorySaleOrderDetailModel { get; set; }
        public virtual DbSet<AccessorySaleOrderModel> AccessorySaleOrderModel { get; set; }
        public virtual DbSet<AccessorySellTypeModel> AccessorySellTypeModel { get; set; }
        public virtual DbSet<SaleOrderDetailModel> SaleOrderDetailModel { get; set; }
        public virtual DbSet<SaleOrderMasterModel> SaleOrderMasterModel { get; set; }
        public virtual DbSet<BookingModel> BookingModel { get; set; }
        public virtual DbSet<CheckingTimesNotificationModel> CheckingTimesNotificationModel { get; set; }
        public virtual DbSet<ClaimAccessoryLogModel> ClaimAccessoryLogModel { get; set; }
        public virtual DbSet<ClaimAccessoryModel> ClaimAccessoryModel { get; set; }
        public virtual DbSet<ClaimAccessoryStatusModel> ClaimAccessoryStatusModel { get; set; }
        public virtual DbSet<FixingTypeModel> FixingTypeModel { get; set; }
        public virtual DbSet<ServiceAppointmentModel> ServiceAppointmentModel { get; set; }
        public virtual DbSet<ServiceFlagModel> ServiceFlagModel { get; set; }
        public virtual DbSet<ServiceOrderConsultModel> ServiceOrderConsultModel { get; set; }
        public virtual DbSet<ServiceOrderDetailAccessoryModel> ServiceOrderDetailAccessoryModel { get; set; }
        public virtual DbSet<ServiceOrderDetailModel> ServiceOrderDetailModel { get; set; }
        public virtual DbSet<ServiceOrderDetailServiceModel> ServiceOrderDetailServiceModel { get; set; }
        public virtual DbSet<ServiceOrderModel> ServiceOrderModel { get; set; }
        public virtual DbSet<ServiceOrderPoolModel> ServiceOrderPoolModel { get; set; }
        public virtual DbSet<ServiceOrderTypeModel> ServiceOrderTypeModel { get; set; }
        public virtual DbSet<VehicleInfoModel> VehicleInfoModel { get; set; }
        public virtual DbSet<WorkingDateModel> WorkingDateModel { get; set; }
        public virtual DbSet<WorkingTimeConfigModel> WorkingTimeConfigModel { get; set; }
        public virtual DbSet<WorkingTimeDetailModel> WorkingTimeDetailModel { get; set; }
        public virtual DbSet<WorkingTimeModel> WorkingTimeModel { get; set; }
        public virtual DbSet<ProductWarrantyModel> ProductWarrantyModel { get; set; }
        public virtual DbSet<WarrantyModel> WarrantyModel { get; set; }
        public virtual DbSet<CampaignModel> CampaignModel { get; set; }
        public virtual DbSet<ContentModel> ContentModel { get; set; }
        public virtual DbSet<EmailAccountModel> EmailAccountModel { get; set; }
        public virtual DbSet<MailServerProviderModel> MailServerProviderModel { get; set; }
        public virtual DbSet<MemberOfExternalProfileTargetGroupModel> MemberOfExternalProfileTargetGroupModel { get; set; }
        public virtual DbSet<MemberOfTargetGroupModel> MemberOfTargetGroupModel { get; set; }
        public virtual DbSet<SendMailCalendarModel> SendMailCalendarModel { get; set; }
        public virtual DbSet<TargetGroupModel> TargetGroupModel { get; set; }
        public virtual DbSet<TemplateAndGiftCampaignModel> TemplateAndGiftCampaignModel { get; set; }
        public virtual DbSet<TemplateAndGiftMemberAddressModel> TemplateAndGiftMemberAddressModel { get; set; }
        public virtual DbSet<TemplateAndGiftMemberModel> TemplateAndGiftMemberModel { get; set; }
        public virtual DbSet<TemplateAndGiftTargetGroupModel> TemplateAndGiftTargetGroupModel { get; set; }
        public virtual DbSet<Unfollow> Unfollow { get; set; }
        public virtual DbSet<Assignment_ProductionOrderModel> Assignment_ProductionOrderModel { get; set; }
        public virtual DbSet<Assignment_StepModel> Assignment_StepModel { get; set; }
        public virtual DbSet<AssignmentModel> AssignmentModel { get; set; }
        public virtual DbSet<BOM_Header_InventorModel> BOM_Header_InventorModel { get; set; }
        public virtual DbSet<BOM_Item_InventorModel> BOM_Item_InventorModel { get; set; }
        public virtual DbSet<BOMDetailModel> BOMDetailModel { get; set; }
        public virtual DbSet<BOMHeaderModel> BOMHeaderModel { get; set; }
        public virtual DbSet<ConsumableMaterialsDeliveryModel> ConsumableMaterialsDeliveryModel { get; set; }
        public virtual DbSet<ContConfigModel> ContConfigModel { get; set; }
        public virtual DbSet<DateClosedHistoryModel> DateClosedHistoryModel { get; set; }
        public virtual DbSet<DateClosedModel> DateClosedModel { get; set; }
        public virtual DbSet<EquipmentGroupModel> EquipmentGroupModel { get; set; }
        public virtual DbSet<EquipmentModel> EquipmentModel { get; set; }
        public virtual DbSet<HangTagModel> HangTagModel { get; set; }
        public virtual DbSet<MarmModel> MarmModel { get; set; }
        public virtual DbSet<MaterialGroupModel> MaterialGroupModel { get; set; }
        public virtual DbSet<MaterialTypeModel> MaterialTypeModel { get; set; }
        public virtual DbSet<MigoModel> MigoModel { get; set; }
        public virtual DbSet<NFCCheckInOutModel> NFCCheckInOutModel { get; set; }
        public virtual DbSet<PlantRoutingConfigModel> PlantRoutingConfigModel { get; set; }
        public virtual DbSet<POTEXT_PR_SO_Model> POTEXT_PR_SO_Model { get; set; }
        public virtual DbSet<Product_Routing_Mapping> Product_Routing_Mapping { get; set; }
        public virtual DbSet<Product_Routing_Mapping_Deleted> Product_Routing_Mapping_Deleted { get; set; }
        public virtual DbSet<Product_Routing_Mold_Mapping> Product_Routing_Mold_Mapping { get; set; }
        public virtual DbSet<Product_Routing_Mold_Mapping_Deleted> Product_Routing_Mold_Mapping_Deleted { get; set; }
        public virtual DbSet<ProductionComponent80Model> ProductionComponent80Model { get; set; }
        public virtual DbSet<ProductionComponentModel> ProductionComponentModel { get; set; }
        public virtual DbSet<ProductionOperation80Model> ProductionOperation80Model { get; set; }
        public virtual DbSet<ProductionOperationModel> ProductionOperationModel { get; set; }
        public virtual DbSet<ProductionOrder80Model> ProductionOrder80Model { get; set; }
        public virtual DbSet<ProductionOrderModel> ProductionOrderModel { get; set; }
        public virtual DbSet<ProductVersionModel> ProductVersionModel { get; set; }
        public virtual DbSet<PurchaseOrderModel> PurchaseOrderModel { get; set; }
        public virtual DbSet<PurchaseRequisitionModel> PurchaseRequisitionModel { get; set; }
        public virtual DbSet<QualityControl_Error_File_Mapping> QualityControl_Error_File_Mapping { get; set; }
        public virtual DbSet<QualityControl_Error_Mapping> QualityControl_Error_Mapping { get; set; }
        public virtual DbSet<QualityControl_FileAttachment_Mapping> QualityControl_FileAttachment_Mapping { get; set; }
        public virtual DbSet<QualityControl_QCInformation_File_Mapping> QualityControl_QCInformation_File_Mapping { get; set; }
        public virtual DbSet<QualityControl_QCInformation_Mapping> QualityControl_QCInformation_Mapping { get; set; }
        public virtual DbSet<QualityControlDetailModel> QualityControlDetailModel { get; set; }
        public virtual DbSet<QualityControlModel> QualityControlModel { get; set; }
        public virtual DbSet<ReservationModel> ReservationModel { get; set; }
        public virtual DbSet<RoutingInventorModel> RoutingInventorModel { get; set; }
        public virtual DbSet<RoutingModel> RoutingModel { get; set; }
        public virtual DbSet<RoutingSapModel> RoutingSapModel { get; set; }
        public virtual DbSet<SaleOrderHeader100Model> SaleOrderHeader100Model { get; set; }
        public virtual DbSet<SaleOrderHeader80Model> SaleOrderHeader80Model { get; set; }
        public virtual DbSet<SaleOrderItem100Model> SaleOrderItem100Model { get; set; }
        public virtual DbSet<SaleOrderItem80Model> SaleOrderItem80Model { get; set; }
        public virtual DbSet<SO100ScheduleLineModel> SO100ScheduleLineModel { get; set; }
        public virtual DbSet<SO100TextModel> SO100TextModel { get; set; }
        public virtual DbSet<SO80ScheduleLineModel> SO80ScheduleLineModel { get; set; }
        public virtual DbSet<SO80TextModel> SO80TextModel { get; set; }
        public virtual DbSet<SOTEXT_PR_Model> SOTEXT_PR_Model { get; set; }
        public virtual DbSet<SOTextHeader100Model> SOTextHeader100Model { get; set; }
        public virtual DbSet<SOTextHeader80Model> SOTextHeader80Model { get; set; }
        public virtual DbSet<SOTextItem100Model> SOTextItem100Model { get; set; }
        public virtual DbSet<SOTextItem80Model> SOTextItem80Model { get; set; }
        public virtual DbSet<ThucThiLenhSanXuatModel> ThucThiLenhSanXuatModel { get; set; }
        public virtual DbSet<WorkCenterModel> WorkCenterModel { get; set; }
        public virtual DbSet<WorkShopModel> WorkShopModel { get; set; }
        public virtual DbSet<CheckInOutModel> CheckInOutModel { get; set; }
        public virtual DbSet<CommandQCModel> CommandQCModel { get; set; }
        public virtual DbSet<ConfirmStageModel> ConfirmStageModel { get; set; }
        public virtual DbSet<DetailQCModel> DetailQCModel { get; set; }
        public virtual DbSet<DetailSaleOrderModel> DetailSaleOrderModel { get; set; }
        public virtual DbSet<DetailStageTranferModel> DetailStageTranferModel { get; set; }
        public virtual DbSet<EmployeeRecordModel> EmployeeRecordModel { get; set; }
        public virtual DbSet<EquimenRecordModel> EquimenRecordModel { get; set; }
        public virtual DbSet<EquipmentCard_Equiment_Mapping> EquipmentCard_Equiment_Mapping { get; set; }
        public virtual DbSet<EquipmentCardModel> EquipmentCardModel { get; set; }
        public virtual DbSet<HeaderSaleOrderModel> HeaderSaleOrderModel { get; set; }
        public virtual DbSet<MoldRecordModel> MoldRecordModel { get; set; }
        public virtual DbSet<OutputRecordModel> OutputRecordModel { get; set; }
        public virtual DbSet<StageTransferModel> StageTransferModel { get; set; }
        public virtual DbSet<WorkOrder_Mold_Mapping> WorkOrder_Mold_Mapping { get; set; }
        public virtual DbSet<WorkOrder_Product_Mapping> WorkOrder_Product_Mapping { get; set; }
        public virtual DbSet<WorkOrderCardModel> WorkOrderCardModel { get; set; }
        public virtual DbSet<WorkOrderModel> WorkOrderModel { get; set; }
        public virtual DbSet<Account_Device_Mapping> Account_Device_Mapping { get; set; }
        public virtual DbSet<AccountModel> AccountModel { get; set; }
        public virtual DbSet<FunctionModel> FunctionModel { get; set; }
        public virtual DbSet<MenuModel> MenuModel { get; set; }
        public virtual DbSet<MobileScreenPermissionModel> MobileScreenPermissionModel { get; set; }
        public virtual DbSet<ModuleModel> ModuleModel { get; set; }
        public virtual DbSet<Page_Module_Mapping> Page_Module_Mapping { get; set; }
        public virtual DbSet<PageModel> PageModel { get; set; }
        public virtual DbSet<PagePermissionModel> PagePermissionModel { get; set; }
        public virtual DbSet<RefreshToken> RefreshToken { get; set; }
        public virtual DbSet<ResourceModel> ResourceModel { get; set; }
        public virtual DbSet<RolesModel> RolesModel { get; set; }
        public virtual DbSet<BC01Model> BC01Model { get; set; }
        public virtual DbSet<BC03Model> BC03Model { get; set; }
        public virtual DbSet<BC07Model> BC07Model { get; set; }
        public virtual DbSet<BC15Model> BC15Model { get; set; }
        public virtual DbSet<BC16Model> BC16Model { get; set; }
        public virtual DbSet<BC18Model> BC18Model { get; set; }
        public virtual DbSet<BC19Model> BC19Model { get; set; }
        public virtual DbSet<Log_BC01Model> Log_BC01Model { get; set; }
        public virtual DbSet<Log_BC18Model> Log_BC18Model { get; set; }
        public virtual DbSet<AppointmentModel> AppointmentModel { get; set; }
        public virtual DbSet<AutoConditionModel> AutoConditionModel { get; set; }
        public virtual DbSet<Comment_File_Mapping> Comment_File_Mapping { get; set; }
        public virtual DbSet<RatingModel> RatingModel { get; set; }
        public virtual DbSet<RemindTaskModel> RemindTaskModel { get; set; }
        public virtual DbSet<StatusTransition_Task_Mapping> StatusTransition_Task_Mapping { get; set; }
        public virtual DbSet<StatusTransitionModel> StatusTransitionModel { get; set; }
        public virtual DbSet<Task_Component_Mapping> Task_Component_Mapping { get; set; }
        public virtual DbSet<Task_File_Mapping> Task_File_Mapping { get; set; }
        public virtual DbSet<Task_Mold_Mapping> Task_Mold_Mapping { get; set; }
        public virtual DbSet<Task_ProductPerPage_Mapping> Task_ProductPerPage_Mapping { get; set; }
        public virtual DbSet<TaskAssignModel> TaskAssignModel { get; set; }
        public virtual DbSet<TaskCommentModel> TaskCommentModel { get; set; }
        public virtual DbSet<TaskContactModel> TaskContactModel { get; set; }
        public virtual DbSet<TaskGroupDetailModel> TaskGroupDetailModel { get; set; }
        public virtual DbSet<TaskGroupModel> TaskGroupModel { get; set; }
        public virtual DbSet<TaskModel> TaskModel { get; set; }
        public virtual DbSet<TaskProductAccessoryModel> TaskProductAccessoryModel { get; set; }
        public virtual DbSet<TaskProductModel> TaskProductModel { get; set; }
        public virtual DbSet<TaskProductUsualErrorModel> TaskProductUsualErrorModel { get; set; }
        public virtual DbSet<TaskReferenceModel> TaskReferenceModel { get; set; }
        public virtual DbSet<TaskReporterModel> TaskReporterModel { get; set; }
        public virtual DbSet<TaskRoleInChargeModel> TaskRoleInChargeModel { get; set; }
        public virtual DbSet<TaskStatusModel> TaskStatusModel { get; set; }
        public virtual DbSet<WorkFlowCategoryModel> WorkFlowCategoryModel { get; set; }
        public virtual DbSet<WorkFlowConfigModel> WorkFlowConfigModel { get; set; }
        public virtual DbSet<WorkFlowFieldModel> WorkFlowFieldModel { get; set; }
        public virtual DbSet<WorkFlowModel> WorkFlowModel { get; set; }
        public virtual DbSet<AllDepartmentModel> AllDepartmentModel { get; set; }
        public virtual DbSet<APIModel> APIModel { get; set; }
        public virtual DbSet<BangTinModel> BangTinModel { get; set; }
        public virtual DbSet<BannerModel> BannerModel { get; set; }
        public virtual DbSet<CapacityRegisterModel> CapacityRegisterModel { get; set; }
        public virtual DbSet<CatalogModel> CatalogModel { get; set; }
        public virtual DbSet<CatalogTypeModel> CatalogTypeModel { get; set; }
        public virtual DbSet<CompanyModel> CompanyModel { get; set; }
        public virtual DbSet<ContactDetailModel> ContactDetailModel { get; set; }
        public virtual DbSet<ContactModel> ContactModel { get; set; }
        public virtual DbSet<ContRegisterModel> ContRegisterModel { get; set; }
        public virtual DbSet<ContRegisterSO60Model> ContRegisterSO60Model { get; set; }
        public virtual DbSet<CustomerGiftDetailModel> CustomerGiftDetailModel { get; set; }
        public virtual DbSet<CustomerGiftModel> CustomerGiftModel { get; set; }
        public virtual DbSet<CustomerLevelModel> CustomerLevelModel { get; set; }
        public virtual DbSet<CustomerPromotionModel> CustomerPromotionModel { get; set; }
        public virtual DbSet<Department_Equipment_Mapping> Department_Equipment_Mapping { get; set; }
        public virtual DbSet<Department_Routing_Mapping> Department_Routing_Mapping { get; set; }
        public virtual DbSet<DepartmentModel> DepartmentModel { get; set; }
        public virtual DbSet<DistrictModel> DistrictModel { get; set; }
        public virtual DbSet<EmailConfig> EmailConfig { get; set; }
        public virtual DbSet<ErrorListModel> ErrorListModel { get; set; }
        public virtual DbSet<FavoriteReportModel> FavoriteReportModel { get; set; }
        public virtual DbSet<Kanban_TaskStatus_Mapping> Kanban_TaskStatus_Mapping { get; set; }
        public virtual DbSet<KanbanDetailModel> KanbanDetailModel { get; set; }
        public virtual DbSet<KanbanModel> KanbanModel { get; set; }
        public virtual DbSet<MachineChainModel> MachineChainModel { get; set; }
        public virtual DbSet<News_Company_Mapping> News_Company_Mapping { get; set; }
        public virtual DbSet<NewsCategoryModel> NewsCategoryModel { get; set; }
        public virtual DbSet<NewsModel> NewsModel { get; set; }
        public virtual DbSet<PhysicsWorkShopModel> PhysicsWorkShopModel { get; set; }
        public virtual DbSet<Product_FileAttachment_Mapping> Product_FileAttachment_Mapping { get; set; }
        public virtual DbSet<ProductImageModel> ProductImageModel { get; set; }
        public virtual DbSet<PrognosisModel> PrognosisModel { get; set; }
        public virtual DbSet<PromotionModel> PromotionModel { get; set; }
        public virtual DbSet<ProvinceModel> ProvinceModel { get; set; }
        public virtual DbSet<QualityControlInformationModel> QualityControlInformationModel { get; set; }
        public virtual DbSet<QuestionBankModel> QuestionBankModel { get; set; }
        public virtual DbSet<RequestEccEmailConfigModel> RequestEccEmailConfigModel { get; set; }
        public virtual DbSet<Routing_Equipment_Mapping> Routing_Equipment_Mapping { get; set; }
        public virtual DbSet<SaleProcessModel> SaleProcessModel { get; set; }
        public virtual DbSet<SalesEmployeeModel> SalesEmployeeModel { get; set; }
        public virtual DbSet<SaleUnitModel> SaleUnitModel { get; set; }
        public virtual DbSet<SourceModel> SourceModel { get; set; }
        public virtual DbSet<StoreModel> StoreModel { get; set; }
        public virtual DbSet<StoreTypeModel> StoreTypeModel { get; set; }
        public virtual DbSet<TestTargetModel> TestTargetModel { get; set; }
        public virtual DbSet<WardModel> WardModel { get; set; }
        public virtual DbSet<WorkOrder_ProductPerPage_Mapping> WorkOrder_ProductPerPage_Mapping { get; set; }
        public virtual DbSet<AccessoryCategoryModel> AccessoryCategoryModel { get; set; }
        public virtual DbSet<AccessoryDetailModel> AccessoryDetailModel { get; set; }
        public virtual DbSet<AccessoryModel> AccessoryModel { get; set; }
        public virtual DbSet<AccessoryProductModel> AccessoryProductModel { get; set; }
        public virtual DbSet<CategoryModel> CategoryModel { get; set; }
        public virtual DbSet<CategoryTypeModel> CategoryTypeModel { get; set; }
        public virtual DbSet<ColorModel> ColorModel { get; set; }
        public virtual DbSet<ColorProductModel> ColorProductModel { get; set; }
        public virtual DbSet<ConfigurationModel> ConfigurationModel { get; set; }
        public virtual DbSet<ImageProductModel> ImageProductModel { get; set; }
        public virtual DbSet<PeriodicallyCheckingModel> PeriodicallyCheckingModel { get; set; }
        public virtual DbSet<PlateFeeDetailModel> PlateFeeDetailModel { get; set; }
        public virtual DbSet<PlateFeeModel> PlateFeeModel { get; set; }
        public virtual DbSet<PriceProductModel> PriceProductModel { get; set; }
        public virtual DbSet<ProductAttributeModel> ProductAttributeModel { get; set; }
        public virtual DbSet<ProductModel> ProductModel { get; set; }
        public virtual DbSet<ProductTypeModel> ProductTypeModel { get; set; }
        public virtual DbSet<PropertiesProductModel> PropertiesProductModel { get; set; }
        public virtual DbSet<ShowroomCategoryModel> ShowroomCategoryModel { get; set; }
        public virtual DbSet<SpecificationsModel> SpecificationsModel { get; set; }
        public virtual DbSet<SpecificationsProductModel> SpecificationsProductModel { get; set; }
        public virtual DbSet<StyleModel> StyleModel { get; set; }
        public virtual DbSet<WarehouseModel> WarehouseModel { get; set; }
        public virtual DbSet<WarehouseProductModel> WarehouseProductModel { get; set; }
        public virtual DbSet<AggregatedCounter> AggregatedCounter { get; set; }
        public virtual DbSet<Hash> Hash { get; set; }
        public virtual DbSet<Job> Job { get; set; }
        public virtual DbSet<JobParameter> JobParameter { get; set; }
        public virtual DbSet<JobQueue> JobQueue { get; set; }
        public virtual DbSet<List> List { get; set; }
        public virtual DbSet<Schema> Schema { get; set; }
        public virtual DbSet<Server> Server { get; set; }
        public virtual DbSet<Set> Set { get; set; }
        public virtual DbSet<State> State { get; set; }
        public virtual DbSet<ChangeDataLogModel> ChangeDataLogModel { get; set; }
        public virtual DbSet<DatatableConfig> DatatableConfig { get; set; }
        public virtual DbSet<ExcelLogModel> ExcelLogModel { get; set; }
        public virtual DbSet<HistoryModel> HistoryModel { get; set; }
        public virtual DbSet<MesSyncLogModel> MesSyncLogModel { get; set; }
        public virtual DbSet<SearchResultDetailTemplateModel> SearchResultDetailTemplateModel { get; set; }
        public virtual DbSet<SearchResultTemplateModel> SearchResultTemplateModel { get; set; }
        public virtual DbSet<SearchTemplateModel> SearchTemplateModel { get; set; }
        public virtual DbSet<DeliveryDetailModel> DeliveryDetailModel { get; set; }
        public virtual DbSet<DeliveryModel> DeliveryModel { get; set; }
        public virtual DbSet<DimDateModel> DimDateModel { get; set; }
        public virtual DbSet<Stock_Store_Mapping> Stock_Store_Mapping { get; set; }
        public virtual DbSet<StockModel> StockModel { get; set; }
        public virtual DbSet<StockReceivingDetailModel> StockReceivingDetailModel { get; set; }
        public virtual DbSet<StockReceivingMasterModel> StockReceivingMasterModel { get; set; }
        public virtual DbSet<StockTransferRequestDetailModel> StockTransferRequestDetailModel { get; set; }
        public virtual DbSet<StockTransferRequestModel> StockTransferRequestModel { get; set; }
        public virtual DbSet<TransferDetailModel> TransferDetailModel { get; set; }
        public virtual DbSet<TransferModel> TransferModel { get; set; }
        public virtual DbSet<Counter> Counter { get; set; }
        public virtual DbSet<View_Catalog_Category> View_Catalog_Category { get; set; }
    
        [DbFunction("EntityDataContext", "splitstring")]
        public virtual IQueryable<splitstring_Result> splitstring(string stringToSplit)
        {
            var stringToSplitParameter = stringToSplit != null ?
                new ObjectParameter("stringToSplit", stringToSplit) :
                new ObjectParameter("stringToSplit", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<splitstring_Result>("[EntityDataContext].[splitstring](@stringToSplit)", stringToSplitParameter);
        }
    
        public virtual int UpdateProfileCodeByCreateTime()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProfileCodeByCreateTime");
        }
    
        public virtual ObjectResult<usp_CustomerTastes_Result> usp_CustomerTastes(Nullable<System.Guid> profileId)
        {
            var profileIdParameter = profileId.HasValue ?
                new ObjectParameter("ProfileId", profileId) :
                new ObjectParameter("ProfileId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomerTastes_Result>("usp_CustomerTastes", profileIdParameter);
        }
    
        public virtual ObjectResult<usp_CustomerTastesAppointment_Result> usp_CustomerTastesAppointment(Nullable<System.Guid> appointmentId)
        {
            var appointmentIdParameter = appointmentId.HasValue ?
                new ObjectParameter("AppointmentId", appointmentId) :
                new ObjectParameter("AppointmentId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomerTastesAppointment_Result>("usp_CustomerTastesAppointment", appointmentIdParameter);
        }
    
        public virtual int usp_CustomerTastesReport(string saleOrgCode, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string customerSourceCode, string customerGroupCode, string saleEmployeeCode, Nullable<bool> isViewByStore)
        {
            var saleOrgCodeParameter = saleOrgCode != null ?
                new ObjectParameter("SaleOrgCode", saleOrgCode) :
                new ObjectParameter("SaleOrgCode", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var customerSourceCodeParameter = customerSourceCode != null ?
                new ObjectParameter("CustomerSourceCode", customerSourceCode) :
                new ObjectParameter("CustomerSourceCode", typeof(string));
    
            var customerGroupCodeParameter = customerGroupCode != null ?
                new ObjectParameter("CustomerGroupCode", customerGroupCode) :
                new ObjectParameter("CustomerGroupCode", typeof(string));
    
            var saleEmployeeCodeParameter = saleEmployeeCode != null ?
                new ObjectParameter("SaleEmployeeCode", saleEmployeeCode) :
                new ObjectParameter("SaleEmployeeCode", typeof(string));
    
            var isViewByStoreParameter = isViewByStore.HasValue ?
                new ObjectParameter("isViewByStore", isViewByStore) :
                new ObjectParameter("isViewByStore", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CustomerTastesReport", saleOrgCodeParameter, fromDateParameter, toDateParameter, customerSourceCodeParameter, customerGroupCodeParameter, saleEmployeeCodeParameter, isViewByStoreParameter);
        }
    
        public virtual int usp_SearchAppointment_Dynamic(string taskCode, string profileName, Nullable<System.Guid> companyId, string salesEmployeeCode, string customerGroupCode, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string saleOfficeCode, string customerTypeCode, string age, Nullable<System.Guid> taskStatusId, string phone, string taxNo, string customerCareerCode, Nullable<System.DateTime> createFromDate, Nullable<System.DateTime> createToDate, string currentCompanyCode, Nullable<int> pageSize, Nullable<int> pageNumber, ObjectParameter filteredResultsCount)
        {
            var taskCodeParameter = taskCode != null ?
                new ObjectParameter("TaskCode", taskCode) :
                new ObjectParameter("TaskCode", typeof(string));
    
            var profileNameParameter = profileName != null ?
                new ObjectParameter("ProfileName", profileName) :
                new ObjectParameter("ProfileName", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var salesEmployeeCodeParameter = salesEmployeeCode != null ?
                new ObjectParameter("SalesEmployeeCode", salesEmployeeCode) :
                new ObjectParameter("SalesEmployeeCode", typeof(string));
    
            var customerGroupCodeParameter = customerGroupCode != null ?
                new ObjectParameter("CustomerGroupCode", customerGroupCode) :
                new ObjectParameter("CustomerGroupCode", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var saleOfficeCodeParameter = saleOfficeCode != null ?
                new ObjectParameter("SaleOfficeCode", saleOfficeCode) :
                new ObjectParameter("SaleOfficeCode", typeof(string));
    
            var customerTypeCodeParameter = customerTypeCode != null ?
                new ObjectParameter("CustomerTypeCode", customerTypeCode) :
                new ObjectParameter("CustomerTypeCode", typeof(string));
    
            var ageParameter = age != null ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(string));
    
            var taskStatusIdParameter = taskStatusId.HasValue ?
                new ObjectParameter("TaskStatusId", taskStatusId) :
                new ObjectParameter("TaskStatusId", typeof(System.Guid));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var taxNoParameter = taxNo != null ?
                new ObjectParameter("TaxNo", taxNo) :
                new ObjectParameter("TaxNo", typeof(string));
    
            var customerCareerCodeParameter = customerCareerCode != null ?
                new ObjectParameter("CustomerCareerCode", customerCareerCode) :
                new ObjectParameter("CustomerCareerCode", typeof(string));
    
            var createFromDateParameter = createFromDate.HasValue ?
                new ObjectParameter("CreateFromDate", createFromDate) :
                new ObjectParameter("CreateFromDate", typeof(System.DateTime));
    
            var createToDateParameter = createToDate.HasValue ?
                new ObjectParameter("CreateToDate", createToDate) :
                new ObjectParameter("CreateToDate", typeof(System.DateTime));
    
            var currentCompanyCodeParameter = currentCompanyCode != null ?
                new ObjectParameter("CurrentCompanyCode", currentCompanyCode) :
                new ObjectParameter("CurrentCompanyCode", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SearchAppointment_Dynamic", taskCodeParameter, profileNameParameter, companyIdParameter, salesEmployeeCodeParameter, customerGroupCodeParameter, fromDateParameter, toDateParameter, saleOfficeCodeParameter, customerTypeCodeParameter, ageParameter, taskStatusIdParameter, phoneParameter, taxNoParameter, customerCareerCodeParameter, createFromDateParameter, createToDateParameter, currentCompanyCodeParameter, pageSizeParameter, pageNumberParameter, filteredResultsCount);
        }
    
        public virtual int usp_SearchContactDeleted(string currentCompanyCode, string profileCode, string profileName, string phone, Nullable<System.Guid> profileId, Nullable<System.Guid> accountId, string email, Nullable<bool> emailIsNull, Nullable<int> pageSize, Nullable<int> pageNumber, ObjectParameter filteredResultsCount)
        {
            var currentCompanyCodeParameter = currentCompanyCode != null ?
                new ObjectParameter("CurrentCompanyCode", currentCompanyCode) :
                new ObjectParameter("CurrentCompanyCode", typeof(string));
    
            var profileCodeParameter = profileCode != null ?
                new ObjectParameter("ProfileCode", profileCode) :
                new ObjectParameter("ProfileCode", typeof(string));
    
            var profileNameParameter = profileName != null ?
                new ObjectParameter("ProfileName", profileName) :
                new ObjectParameter("ProfileName", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var profileIdParameter = profileId.HasValue ?
                new ObjectParameter("ProfileId", profileId) :
                new ObjectParameter("ProfileId", typeof(System.Guid));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(System.Guid));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var emailIsNullParameter = emailIsNull.HasValue ?
                new ObjectParameter("EmailIsNull", emailIsNull) :
                new ObjectParameter("EmailIsNull", typeof(bool));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SearchContactDeleted", currentCompanyCodeParameter, profileCodeParameter, profileNameParameter, phoneParameter, profileIdParameter, accountIdParameter, emailParameter, emailIsNullParameter, pageSizeParameter, pageNumberParameter, filteredResultsCount);
        }
    
        public virtual int usp_SearchProfile(string type, string profileCode, string profileForeignCode, string customerTypeCode, string createAtCompany, string age, string profileName, string phone, Nullable<System.Guid> provinceId, Nullable<System.Guid> districtId, Nullable<System.Guid> wardId, string address, Nullable<bool> actived, Nullable<System.Guid> profileId, string customerGroupCode, string customerCareerCode, string salesEmployeeCode, string rolesCode, Nullable<System.DateTime> createFromDate, Nullable<System.DateTime> createToDate, string createByCode, string customerSourceCode, Nullable<int> pageSize, Nullable<int> pageNumber, ObjectParameter filteredResultsCount)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var profileCodeParameter = profileCode != null ?
                new ObjectParameter("ProfileCode", profileCode) :
                new ObjectParameter("ProfileCode", typeof(string));
    
            var profileForeignCodeParameter = profileForeignCode != null ?
                new ObjectParameter("ProfileForeignCode", profileForeignCode) :
                new ObjectParameter("ProfileForeignCode", typeof(string));
    
            var customerTypeCodeParameter = customerTypeCode != null ?
                new ObjectParameter("CustomerTypeCode", customerTypeCode) :
                new ObjectParameter("CustomerTypeCode", typeof(string));
    
            var createAtCompanyParameter = createAtCompany != null ?
                new ObjectParameter("CreateAtCompany", createAtCompany) :
                new ObjectParameter("CreateAtCompany", typeof(string));
    
            var ageParameter = age != null ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(string));
    
            var profileNameParameter = profileName != null ?
                new ObjectParameter("ProfileName", profileName) :
                new ObjectParameter("ProfileName", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(System.Guid));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(System.Guid));
    
            var wardIdParameter = wardId.HasValue ?
                new ObjectParameter("WardId", wardId) :
                new ObjectParameter("WardId", typeof(System.Guid));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var activedParameter = actived.HasValue ?
                new ObjectParameter("Actived", actived) :
                new ObjectParameter("Actived", typeof(bool));
    
            var profileIdParameter = profileId.HasValue ?
                new ObjectParameter("ProfileId", profileId) :
                new ObjectParameter("ProfileId", typeof(System.Guid));
    
            var customerGroupCodeParameter = customerGroupCode != null ?
                new ObjectParameter("CustomerGroupCode", customerGroupCode) :
                new ObjectParameter("CustomerGroupCode", typeof(string));
    
            var customerCareerCodeParameter = customerCareerCode != null ?
                new ObjectParameter("CustomerCareerCode", customerCareerCode) :
                new ObjectParameter("CustomerCareerCode", typeof(string));
    
            var salesEmployeeCodeParameter = salesEmployeeCode != null ?
                new ObjectParameter("SalesEmployeeCode", salesEmployeeCode) :
                new ObjectParameter("SalesEmployeeCode", typeof(string));
    
            var rolesCodeParameter = rolesCode != null ?
                new ObjectParameter("RolesCode", rolesCode) :
                new ObjectParameter("RolesCode", typeof(string));
    
            var createFromDateParameter = createFromDate.HasValue ?
                new ObjectParameter("CreateFromDate", createFromDate) :
                new ObjectParameter("CreateFromDate", typeof(System.DateTime));
    
            var createToDateParameter = createToDate.HasValue ?
                new ObjectParameter("CreateToDate", createToDate) :
                new ObjectParameter("CreateToDate", typeof(System.DateTime));
    
            var createByCodeParameter = createByCode != null ?
                new ObjectParameter("CreateByCode", createByCode) :
                new ObjectParameter("CreateByCode", typeof(string));
    
            var customerSourceCodeParameter = customerSourceCode != null ?
                new ObjectParameter("CustomerSourceCode", customerSourceCode) :
                new ObjectParameter("CustomerSourceCode", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SearchProfile", typeParameter, profileCodeParameter, profileForeignCodeParameter, customerTypeCodeParameter, createAtCompanyParameter, ageParameter, profileNameParameter, phoneParameter, provinceIdParameter, districtIdParameter, wardIdParameter, addressParameter, activedParameter, profileIdParameter, customerGroupCodeParameter, customerCareerCodeParameter, salesEmployeeCodeParameter, rolesCodeParameter, createFromDateParameter, createToDateParameter, createByCodeParameter, customerSourceCodeParameter, pageSizeParameter, pageNumberParameter, filteredResultsCount);
        }
    
        public virtual int usp_SearchProfile_Dynamic(string type, string profileCode, string profileForeignCode, string customerTypeCode, string createAtCompany, string age, string profileName, string phone, Nullable<System.Guid> provinceId, Nullable<System.Guid> districtId, Nullable<System.Guid> wardId, string address, Nullable<bool> actived, Nullable<System.Guid> profileId, string customerGroupCode, string customerCareerCode, string salesEmployeeCode, string rolesCode, Nullable<System.DateTime> createFromDate, Nullable<System.DateTime> createToDate, string createByCode, string customerSourceCode, string currentCompanyCode, string taxNo, Nullable<System.Guid> accountId, Nullable<int> pageSize, Nullable<int> pageNumber, ObjectParameter filteredResultsCount, string email, Nullable<bool> emailIsNull, Nullable<bool> taxNoIsNull, Nullable<bool> searchProfileForeignCodeIsNull, Nullable<bool> addressIsNull, Nullable<bool> customerSourceCodeIsNull, Nullable<bool> provinceIdIsNull, Nullable<bool> districtIdIsNull, Nullable<bool> wardIdIsNull, Nullable<bool> customerTypeCodeIsNull, Nullable<bool> customerGroupCodeIsNull, Nullable<bool> customerCareerCodeIsNull, Nullable<bool> salesEmployeeCodeIsNull, Nullable<bool> isCreateRequest, string createRequestAll, Nullable<System.DateTime> createRequestTimeFrom, Nullable<System.DateTime> createRequestTimeTo, Nullable<bool> customerAccountGroupAll, string saleOfficeCode, string competitorType)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var profileCodeParameter = profileCode != null ?
                new ObjectParameter("ProfileCode", profileCode) :
                new ObjectParameter("ProfileCode", typeof(string));
    
            var profileForeignCodeParameter = profileForeignCode != null ?
                new ObjectParameter("ProfileForeignCode", profileForeignCode) :
                new ObjectParameter("ProfileForeignCode", typeof(string));
    
            var customerTypeCodeParameter = customerTypeCode != null ?
                new ObjectParameter("CustomerTypeCode", customerTypeCode) :
                new ObjectParameter("CustomerTypeCode", typeof(string));
    
            var createAtCompanyParameter = createAtCompany != null ?
                new ObjectParameter("CreateAtCompany", createAtCompany) :
                new ObjectParameter("CreateAtCompany", typeof(string));
    
            var ageParameter = age != null ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(string));
    
            var profileNameParameter = profileName != null ?
                new ObjectParameter("ProfileName", profileName) :
                new ObjectParameter("ProfileName", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(System.Guid));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(System.Guid));
    
            var wardIdParameter = wardId.HasValue ?
                new ObjectParameter("WardId", wardId) :
                new ObjectParameter("WardId", typeof(System.Guid));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var activedParameter = actived.HasValue ?
                new ObjectParameter("Actived", actived) :
                new ObjectParameter("Actived", typeof(bool));
    
            var profileIdParameter = profileId.HasValue ?
                new ObjectParameter("ProfileId", profileId) :
                new ObjectParameter("ProfileId", typeof(System.Guid));
    
            var customerGroupCodeParameter = customerGroupCode != null ?
                new ObjectParameter("CustomerGroupCode", customerGroupCode) :
                new ObjectParameter("CustomerGroupCode", typeof(string));
    
            var customerCareerCodeParameter = customerCareerCode != null ?
                new ObjectParameter("CustomerCareerCode", customerCareerCode) :
                new ObjectParameter("CustomerCareerCode", typeof(string));
    
            var salesEmployeeCodeParameter = salesEmployeeCode != null ?
                new ObjectParameter("SalesEmployeeCode", salesEmployeeCode) :
                new ObjectParameter("SalesEmployeeCode", typeof(string));
    
            var rolesCodeParameter = rolesCode != null ?
                new ObjectParameter("RolesCode", rolesCode) :
                new ObjectParameter("RolesCode", typeof(string));
    
            var createFromDateParameter = createFromDate.HasValue ?
                new ObjectParameter("CreateFromDate", createFromDate) :
                new ObjectParameter("CreateFromDate", typeof(System.DateTime));
    
            var createToDateParameter = createToDate.HasValue ?
                new ObjectParameter("CreateToDate", createToDate) :
                new ObjectParameter("CreateToDate", typeof(System.DateTime));
    
            var createByCodeParameter = createByCode != null ?
                new ObjectParameter("CreateByCode", createByCode) :
                new ObjectParameter("CreateByCode", typeof(string));
    
            var customerSourceCodeParameter = customerSourceCode != null ?
                new ObjectParameter("CustomerSourceCode", customerSourceCode) :
                new ObjectParameter("CustomerSourceCode", typeof(string));
    
            var currentCompanyCodeParameter = currentCompanyCode != null ?
                new ObjectParameter("CurrentCompanyCode", currentCompanyCode) :
                new ObjectParameter("CurrentCompanyCode", typeof(string));
    
            var taxNoParameter = taxNo != null ?
                new ObjectParameter("TaxNo", taxNo) :
                new ObjectParameter("TaxNo", typeof(string));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(System.Guid));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var emailIsNullParameter = emailIsNull.HasValue ?
                new ObjectParameter("EmailIsNull", emailIsNull) :
                new ObjectParameter("EmailIsNull", typeof(bool));
    
            var taxNoIsNullParameter = taxNoIsNull.HasValue ?
                new ObjectParameter("TaxNoIsNull", taxNoIsNull) :
                new ObjectParameter("TaxNoIsNull", typeof(bool));
    
            var searchProfileForeignCodeIsNullParameter = searchProfileForeignCodeIsNull.HasValue ?
                new ObjectParameter("SearchProfileForeignCodeIsNull", searchProfileForeignCodeIsNull) :
                new ObjectParameter("SearchProfileForeignCodeIsNull", typeof(bool));
    
            var addressIsNullParameter = addressIsNull.HasValue ?
                new ObjectParameter("AddressIsNull", addressIsNull) :
                new ObjectParameter("AddressIsNull", typeof(bool));
    
            var customerSourceCodeIsNullParameter = customerSourceCodeIsNull.HasValue ?
                new ObjectParameter("CustomerSourceCodeIsNull", customerSourceCodeIsNull) :
                new ObjectParameter("CustomerSourceCodeIsNull", typeof(bool));
    
            var provinceIdIsNullParameter = provinceIdIsNull.HasValue ?
                new ObjectParameter("ProvinceIdIsNull", provinceIdIsNull) :
                new ObjectParameter("ProvinceIdIsNull", typeof(bool));
    
            var districtIdIsNullParameter = districtIdIsNull.HasValue ?
                new ObjectParameter("DistrictIdIsNull", districtIdIsNull) :
                new ObjectParameter("DistrictIdIsNull", typeof(bool));
    
            var wardIdIsNullParameter = wardIdIsNull.HasValue ?
                new ObjectParameter("WardIdIsNull", wardIdIsNull) :
                new ObjectParameter("WardIdIsNull", typeof(bool));
    
            var customerTypeCodeIsNullParameter = customerTypeCodeIsNull.HasValue ?
                new ObjectParameter("CustomerTypeCodeIsNull", customerTypeCodeIsNull) :
                new ObjectParameter("CustomerTypeCodeIsNull", typeof(bool));
    
            var customerGroupCodeIsNullParameter = customerGroupCodeIsNull.HasValue ?
                new ObjectParameter("CustomerGroupCodeIsNull", customerGroupCodeIsNull) :
                new ObjectParameter("CustomerGroupCodeIsNull", typeof(bool));
    
            var customerCareerCodeIsNullParameter = customerCareerCodeIsNull.HasValue ?
                new ObjectParameter("CustomerCareerCodeIsNull", customerCareerCodeIsNull) :
                new ObjectParameter("CustomerCareerCodeIsNull", typeof(bool));
    
            var salesEmployeeCodeIsNullParameter = salesEmployeeCodeIsNull.HasValue ?
                new ObjectParameter("SalesEmployeeCodeIsNull", salesEmployeeCodeIsNull) :
                new ObjectParameter("SalesEmployeeCodeIsNull", typeof(bool));
    
            var isCreateRequestParameter = isCreateRequest.HasValue ?
                new ObjectParameter("isCreateRequest", isCreateRequest) :
                new ObjectParameter("isCreateRequest", typeof(bool));
    
            var createRequestAllParameter = createRequestAll != null ?
                new ObjectParameter("CreateRequestAll", createRequestAll) :
                new ObjectParameter("CreateRequestAll", typeof(string));
    
            var createRequestTimeFromParameter = createRequestTimeFrom.HasValue ?
                new ObjectParameter("CreateRequestTimeFrom", createRequestTimeFrom) :
                new ObjectParameter("CreateRequestTimeFrom", typeof(System.DateTime));
    
            var createRequestTimeToParameter = createRequestTimeTo.HasValue ?
                new ObjectParameter("CreateRequestTimeTo", createRequestTimeTo) :
                new ObjectParameter("CreateRequestTimeTo", typeof(System.DateTime));
    
            var customerAccountGroupAllParameter = customerAccountGroupAll.HasValue ?
                new ObjectParameter("CustomerAccountGroupAll", customerAccountGroupAll) :
                new ObjectParameter("CustomerAccountGroupAll", typeof(bool));
    
            var saleOfficeCodeParameter = saleOfficeCode != null ?
                new ObjectParameter("SaleOfficeCode", saleOfficeCode) :
                new ObjectParameter("SaleOfficeCode", typeof(string));
    
            var competitorTypeParameter = competitorType != null ?
                new ObjectParameter("CompetitorType", competitorType) :
                new ObjectParameter("CompetitorType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SearchProfile_Dynamic", typeParameter, profileCodeParameter, profileForeignCodeParameter, customerTypeCodeParameter, createAtCompanyParameter, ageParameter, profileNameParameter, phoneParameter, provinceIdParameter, districtIdParameter, wardIdParameter, addressParameter, activedParameter, profileIdParameter, customerGroupCodeParameter, customerCareerCodeParameter, salesEmployeeCodeParameter, rolesCodeParameter, createFromDateParameter, createToDateParameter, createByCodeParameter, customerSourceCodeParameter, currentCompanyCodeParameter, taxNoParameter, accountIdParameter, pageSizeParameter, pageNumberParameter, filteredResultsCount, emailParameter, emailIsNullParameter, taxNoIsNullParameter, searchProfileForeignCodeIsNullParameter, addressIsNullParameter, customerSourceCodeIsNullParameter, provinceIdIsNullParameter, districtIdIsNullParameter, wardIdIsNullParameter, customerTypeCodeIsNullParameter, customerGroupCodeIsNullParameter, customerCareerCodeIsNullParameter, salesEmployeeCodeIsNullParameter, isCreateRequestParameter, createRequestAllParameter, createRequestTimeFromParameter, createRequestTimeToParameter, customerAccountGroupAllParameter, saleOfficeCodeParameter, competitorTypeParameter);
        }
    
        public virtual int creAttendance()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("creAttendance");
        }
    
        public virtual ObjectResult<devups_GetAllBatchTrungNhau_Result> devups_GetAllBatchTrungNhau()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<devups_GetAllBatchTrungNhau_Result>("devups_GetAllBatchTrungNhau");
        }
    
        public virtual ObjectResult<devusp_GetAllBatchTrungNhau_Result> devusp_GetAllBatchTrungNhau()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<devusp_GetAllBatchTrungNhau_Result>("devusp_GetAllBatchTrungNhau");
        }
    
        public virtual int devusp_GetAllDuplicateRecordProcessing()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("devusp_GetAllDuplicateRecordProcessing");
        }
    
        public virtual ObjectResult<devusp_GetAllDuplicateServiceOrderByMonth_Result> devusp_GetAllDuplicateServiceOrderByMonth(Nullable<int> month)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<devusp_GetAllDuplicateServiceOrderByMonth_Result>("devusp_GetAllDuplicateServiceOrderByMonth", monthParameter);
        }
    
        public virtual ObjectResult<devusp_KiemTraDonHangSuaChuaServiceOrder_Result> devusp_KiemTraDonHangSuaChuaServiceOrder(string serviceOrderCode)
        {
            var serviceOrderCodeParameter = serviceOrderCode != null ?
                new ObjectParameter("ServiceOrderCode", serviceOrderCode) :
                new ObjectParameter("ServiceOrderCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<devusp_KiemTraDonHangSuaChuaServiceOrder_Result>("devusp_KiemTraDonHangSuaChuaServiceOrder", serviceOrderCodeParameter);
        }
    
        public virtual ObjectResult<FaceCheckInOut_Result> FaceCheckInOut(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string type)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FaceCheckInOut_Result>("FaceCheckInOut", fromDateParameter, toDateParameter, typeParameter);
        }
    
        public virtual int MasterData_Student_SearchStudent(string fullName, string studentCode, Nullable<System.DateTime> searchDateOfBirthFrom, Nullable<System.DateTime> searchDateOfBirthTo, Nullable<bool> gender, Nullable<bool> isKT3, Nullable<bool> isDisadvantaged, Nullable<System.Guid> disabilityGroupId, Nullable<System.Guid> departmentId)
        {
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var studentCodeParameter = studentCode != null ?
                new ObjectParameter("StudentCode", studentCode) :
                new ObjectParameter("StudentCode", typeof(string));
    
            var searchDateOfBirthFromParameter = searchDateOfBirthFrom.HasValue ?
                new ObjectParameter("SearchDateOfBirthFrom", searchDateOfBirthFrom) :
                new ObjectParameter("SearchDateOfBirthFrom", typeof(System.DateTime));
    
            var searchDateOfBirthToParameter = searchDateOfBirthTo.HasValue ?
                new ObjectParameter("SearchDateOfBirthTo", searchDateOfBirthTo) :
                new ObjectParameter("SearchDateOfBirthTo", typeof(System.DateTime));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(bool));
    
            var isKT3Parameter = isKT3.HasValue ?
                new ObjectParameter("isKT3", isKT3) :
                new ObjectParameter("isKT3", typeof(bool));
    
            var isDisadvantagedParameter = isDisadvantaged.HasValue ?
                new ObjectParameter("isDisadvantaged", isDisadvantaged) :
                new ObjectParameter("isDisadvantaged", typeof(bool));
    
            var disabilityGroupIdParameter = disabilityGroupId.HasValue ?
                new ObjectParameter("DisabilityGroupId", disabilityGroupId) :
                new ObjectParameter("DisabilityGroupId", typeof(System.Guid));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MasterData_Student_SearchStudent", fullNameParameter, studentCodeParameter, searchDateOfBirthFromParameter, searchDateOfBirthToParameter, genderParameter, isKT3Parameter, isDisadvantagedParameter, disabilityGroupIdParameter, departmentIdParameter);
        }
    
        public virtual int resultSearch(Nullable<System.DateTime> timeKeepingFromDate, Nullable<System.DateTime> timeKeepingToDate)
        {
            var timeKeepingFromDateParameter = timeKeepingFromDate.HasValue ?
                new ObjectParameter("TimeKeepingFromDate", timeKeepingFromDate) :
                new ObjectParameter("TimeKeepingFromDate", typeof(System.DateTime));
    
            var timeKeepingToDateParameter = timeKeepingToDate.HasValue ?
                new ObjectParameter("TimeKeepingToDate", timeKeepingToDate) :
                new ObjectParameter("TimeKeepingToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("resultSearch", timeKeepingFromDateParameter, timeKeepingToDateParameter);
        }
    
        public virtual ObjectResult<rpt_ProfileListReport_Result> rpt_ProfileListReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.Guid> userName, string customerSourceCode, string customerTypeCode, string customerGroupCode, string customerCareerCode, Nullable<System.Guid> taskStatusId, string currentCompanyCode, string currentSaleOrg, string currentUserName, Nullable<bool> isAgency)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var userNameParameter = userName.HasValue ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(System.Guid));
    
            var customerSourceCodeParameter = customerSourceCode != null ?
                new ObjectParameter("CustomerSourceCode", customerSourceCode) :
                new ObjectParameter("CustomerSourceCode", typeof(string));
    
            var customerTypeCodeParameter = customerTypeCode != null ?
                new ObjectParameter("CustomerTypeCode", customerTypeCode) :
                new ObjectParameter("CustomerTypeCode", typeof(string));
    
            var customerGroupCodeParameter = customerGroupCode != null ?
                new ObjectParameter("CustomerGroupCode", customerGroupCode) :
                new ObjectParameter("CustomerGroupCode", typeof(string));
    
            var customerCareerCodeParameter = customerCareerCode != null ?
                new ObjectParameter("CustomerCareerCode", customerCareerCode) :
                new ObjectParameter("CustomerCareerCode", typeof(string));
    
            var taskStatusIdParameter = taskStatusId.HasValue ?
                new ObjectParameter("TaskStatusId", taskStatusId) :
                new ObjectParameter("TaskStatusId", typeof(System.Guid));
    
            var currentCompanyCodeParameter = currentCompanyCode != null ?
                new ObjectParameter("CurrentCompanyCode", currentCompanyCode) :
                new ObjectParameter("CurrentCompanyCode", typeof(string));
    
            var currentSaleOrgParameter = currentSaleOrg != null ?
                new ObjectParameter("CurrentSaleOrg", currentSaleOrg) :
                new ObjectParameter("CurrentSaleOrg", typeof(string));
    
            var currentUserNameParameter = currentUserName != null ?
                new ObjectParameter("CurrentUserName", currentUserName) :
                new ObjectParameter("CurrentUserName", typeof(string));
    
            var isAgencyParameter = isAgency.HasValue ?
                new ObjectParameter("isAgency", isAgency) :
                new ObjectParameter("isAgency", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_ProfileListReport_Result>("rpt_ProfileListReport", fromDateParameter, toDateParameter, userNameParameter, customerSourceCodeParameter, customerTypeCodeParameter, customerGroupCodeParameter, customerCareerCodeParameter, taskStatusIdParameter, currentCompanyCodeParameter, currentSaleOrgParameter, currentUserNameParameter, isAgencyParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<usp_EstimatedCalendar_Result> usp_EstimatedCalendar(Nullable<System.Guid> companyId, string rolesCode, string reporter, string assignee, Nullable<System.Guid> workFlowId, Nullable<System.DateTime> startFromDate, Nullable<System.DateTime> startToDate)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var rolesCodeParameter = rolesCode != null ?
                new ObjectParameter("RolesCode", rolesCode) :
                new ObjectParameter("RolesCode", typeof(string));
    
            var reporterParameter = reporter != null ?
                new ObjectParameter("Reporter", reporter) :
                new ObjectParameter("Reporter", typeof(string));
    
            var assigneeParameter = assignee != null ?
                new ObjectParameter("Assignee", assignee) :
                new ObjectParameter("Assignee", typeof(string));
    
            var workFlowIdParameter = workFlowId.HasValue ?
                new ObjectParameter("WorkFlowId", workFlowId) :
                new ObjectParameter("WorkFlowId", typeof(System.Guid));
    
            var startFromDateParameter = startFromDate.HasValue ?
                new ObjectParameter("StartFromDate", startFromDate) :
                new ObjectParameter("StartFromDate", typeof(System.DateTime));
    
            var startToDateParameter = startToDate.HasValue ?
                new ObjectParameter("StartToDate", startToDate) :
                new ObjectParameter("StartToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EstimatedCalendar_Result>("usp_EstimatedCalendar", companyIdParameter, rolesCodeParameter, reporterParameter, assigneeParameter, workFlowIdParameter, startFromDateParameter, startToDateParameter);
        }
    
        public virtual ObjectResult<usp_GetMinMaxByMaterialCodeSaleOrg_Result> usp_GetMinMaxByMaterialCodeSaleOrg(string materialCode, string saleOrg)
        {
            var materialCodeParameter = materialCode != null ?
                new ObjectParameter("MaterialCode", materialCode) :
                new ObjectParameter("MaterialCode", typeof(string));
    
            var saleOrgParameter = saleOrg != null ?
                new ObjectParameter("SaleOrg", saleOrg) :
                new ObjectParameter("SaleOrg", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetMinMaxByMaterialCodeSaleOrg_Result>("usp_GetMinMaxByMaterialCodeSaleOrg", materialCodeParameter, saleOrgParameter);
        }
    
        public virtual ObjectResult<usp_GetProduct_ACShopping_Result> usp_GetProduct_ACShopping(string companyCode)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetProduct_ACShopping_Result>("usp_GetProduct_ACShopping", companyCodeParameter);
        }
    
        public virtual ObjectResult<usp_MaterialExportMinMax_Result> usp_MaterialExportMinMax(string materialCode, string materialName, string materialGroupCode, string profitCenterCode, string productHierarchyCode, string laborCode, string materialFreightGroupCode, string externalMaterialGroupCode, string temperatureConditionCode, string containerRequirementCode, string saleOrg)
        {
            var materialCodeParameter = materialCode != null ?
                new ObjectParameter("MaterialCode", materialCode) :
                new ObjectParameter("MaterialCode", typeof(string));
    
            var materialNameParameter = materialName != null ?
                new ObjectParameter("MaterialName", materialName) :
                new ObjectParameter("MaterialName", typeof(string));
    
            var materialGroupCodeParameter = materialGroupCode != null ?
                new ObjectParameter("MaterialGroupCode", materialGroupCode) :
                new ObjectParameter("MaterialGroupCode", typeof(string));
    
            var profitCenterCodeParameter = profitCenterCode != null ?
                new ObjectParameter("ProfitCenterCode", profitCenterCode) :
                new ObjectParameter("ProfitCenterCode", typeof(string));
    
            var productHierarchyCodeParameter = productHierarchyCode != null ?
                new ObjectParameter("ProductHierarchyCode", productHierarchyCode) :
                new ObjectParameter("ProductHierarchyCode", typeof(string));
    
            var laborCodeParameter = laborCode != null ?
                new ObjectParameter("LaborCode", laborCode) :
                new ObjectParameter("LaborCode", typeof(string));
    
            var materialFreightGroupCodeParameter = materialFreightGroupCode != null ?
                new ObjectParameter("MaterialFreightGroupCode", materialFreightGroupCode) :
                new ObjectParameter("MaterialFreightGroupCode", typeof(string));
    
            var externalMaterialGroupCodeParameter = externalMaterialGroupCode != null ?
                new ObjectParameter("ExternalMaterialGroupCode", externalMaterialGroupCode) :
                new ObjectParameter("ExternalMaterialGroupCode", typeof(string));
    
            var temperatureConditionCodeParameter = temperatureConditionCode != null ?
                new ObjectParameter("TemperatureConditionCode", temperatureConditionCode) :
                new ObjectParameter("TemperatureConditionCode", typeof(string));
    
            var containerRequirementCodeParameter = containerRequirementCode != null ?
                new ObjectParameter("ContainerRequirementCode", containerRequirementCode) :
                new ObjectParameter("ContainerRequirementCode", typeof(string));
    
            var saleOrgParameter = saleOrg != null ?
                new ObjectParameter("SaleOrg", saleOrg) :
                new ObjectParameter("SaleOrg", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MaterialExportMinMax_Result>("usp_MaterialExportMinMax", materialCodeParameter, materialNameParameter, materialGroupCodeParameter, profitCenterCodeParameter, productHierarchyCodeParameter, laborCodeParameter, materialFreightGroupCodeParameter, externalMaterialGroupCodeParameter, temperatureConditionCodeParameter, containerRequirementCodeParameter, saleOrgParameter);
        }
    
        public virtual ObjectResult<usp_MaterialSearch_Result> usp_MaterialSearch(string materialCode, string materialName, string materialGroupCode, string profitCenterCode, string productHierarchyCode, string laborCode, string materialFreightGroupCode, string externalMaterialGroupCode, string temperatureConditionCode, string containerRequirementCode, string saleOrg)
        {
            var materialCodeParameter = materialCode != null ?
                new ObjectParameter("MaterialCode", materialCode) :
                new ObjectParameter("MaterialCode", typeof(string));
    
            var materialNameParameter = materialName != null ?
                new ObjectParameter("MaterialName", materialName) :
                new ObjectParameter("MaterialName", typeof(string));
    
            var materialGroupCodeParameter = materialGroupCode != null ?
                new ObjectParameter("MaterialGroupCode", materialGroupCode) :
                new ObjectParameter("MaterialGroupCode", typeof(string));
    
            var profitCenterCodeParameter = profitCenterCode != null ?
                new ObjectParameter("ProfitCenterCode", profitCenterCode) :
                new ObjectParameter("ProfitCenterCode", typeof(string));
    
            var productHierarchyCodeParameter = productHierarchyCode != null ?
                new ObjectParameter("ProductHierarchyCode", productHierarchyCode) :
                new ObjectParameter("ProductHierarchyCode", typeof(string));
    
            var laborCodeParameter = laborCode != null ?
                new ObjectParameter("LaborCode", laborCode) :
                new ObjectParameter("LaborCode", typeof(string));
    
            var materialFreightGroupCodeParameter = materialFreightGroupCode != null ?
                new ObjectParameter("MaterialFreightGroupCode", materialFreightGroupCode) :
                new ObjectParameter("MaterialFreightGroupCode", typeof(string));
    
            var externalMaterialGroupCodeParameter = externalMaterialGroupCode != null ?
                new ObjectParameter("ExternalMaterialGroupCode", externalMaterialGroupCode) :
                new ObjectParameter("ExternalMaterialGroupCode", typeof(string));
    
            var temperatureConditionCodeParameter = temperatureConditionCode != null ?
                new ObjectParameter("TemperatureConditionCode", temperatureConditionCode) :
                new ObjectParameter("TemperatureConditionCode", typeof(string));
    
            var containerRequirementCodeParameter = containerRequirementCode != null ?
                new ObjectParameter("ContainerRequirementCode", containerRequirementCode) :
                new ObjectParameter("ContainerRequirementCode", typeof(string));
    
            var saleOrgParameter = saleOrg != null ?
                new ObjectParameter("SaleOrg", saleOrg) :
                new ObjectParameter("SaleOrg", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MaterialSearch_Result>("usp_MaterialSearch", materialCodeParameter, materialNameParameter, materialGroupCodeParameter, profitCenterCodeParameter, productHierarchyCodeParameter, laborCodeParameter, materialFreightGroupCodeParameter, externalMaterialGroupCodeParameter, temperatureConditionCodeParameter, containerRequirementCodeParameter, saleOrgParameter);
        }
    
        public virtual int usp_SearchAccessoryForService(string searchInput)
        {
            var searchInputParameter = searchInput != null ?
                new ObjectParameter("SearchInput", searchInput) :
                new ObjectParameter("SearchInput", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SearchAccessoryForService", searchInputParameter);
        }
    
        public virtual int usp_SearchCustomer(string fullName, string phone)
        {
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SearchCustomer", fullNameParameter, phoneParameter);
        }
    
        public virtual ObjectResult<usp_SearchMobileScreen_Result> usp_SearchMobileScreen(string searchText, Nullable<bool> actived)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var activedParameter = actived.HasValue ?
                new ObjectParameter("Actived", actived) :
                new ObjectParameter("Actived", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchMobileScreen_Result>("usp_SearchMobileScreen", searchTextParameter, activedParameter);
        }
    
        public virtual ObjectResult<usp_SearchVehicle_Result> usp_SearchVehicle(string searchInput)
        {
            var searchInputParameter = searchInput != null ?
                new ObjectParameter("SearchInput", searchInput) :
                new ObjectParameter("SearchInput", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchVehicle_Result>("usp_SearchVehicle", searchInputParameter);
        }
    
        public virtual ObjectResult<usp_SearchVehicle2_Result> usp_SearchVehicle2(string phone, string soBH, string tenKH, string soKhung, string licensePlate)
        {
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var soBHParameter = soBH != null ?
                new ObjectParameter("SoBH", soBH) :
                new ObjectParameter("SoBH", typeof(string));
    
            var tenKHParameter = tenKH != null ?
                new ObjectParameter("TenKH", tenKH) :
                new ObjectParameter("TenKH", typeof(string));
    
            var soKhungParameter = soKhung != null ?
                new ObjectParameter("SoKhung", soKhung) :
                new ObjectParameter("SoKhung", typeof(string));
    
            var licensePlateParameter = licensePlate != null ?
                new ObjectParameter("LicensePlate", licensePlate) :
                new ObjectParameter("LicensePlate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchVehicle2_Result>("usp_SearchVehicle2", phoneParameter, soBHParameter, tenKHParameter, soKhungParameter, licensePlateParameter);
        }
    
        public virtual int usp_SearchVehicleByLicensePlate(string searchInput)
        {
            var searchInputParameter = searchInput != null ?
                new ObjectParameter("SearchInput", searchInput) :
                new ObjectParameter("SearchInput", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SearchVehicleByLicensePlate", searchInputParameter);
        }
    
        public virtual int uspAccount_Search(Nullable<bool> isDeveloper, string userName, string fullName, Nullable<bool> actived)
        {
            var isDeveloperParameter = isDeveloper.HasValue ?
                new ObjectParameter("isDeveloper", isDeveloper) :
                new ObjectParameter("isDeveloper", typeof(bool));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var activedParameter = actived.HasValue ?
                new ObjectParameter("Actived", actived) :
                new ObjectParameter("Actived", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAccount_Search", isDeveloperParameter, userNameParameter, fullNameParameter, activedParameter);
        }
    
        public virtual ObjectResult<uspMobile_CheckQuantityByProductId_Result> uspMobile_CheckQuantityByProductId(Nullable<System.Guid> productId, string userName)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(System.Guid));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspMobile_CheckQuantityByProductId_Result>("uspMobile_CheckQuantityByProductId", productIdParameter, userNameParameter);
        }
    
        public virtual int uspWebAdmin_CountData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspWebAdmin_CountData");
        }
    
        public virtual int uspWebAdmin_ResetTestData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspWebAdmin_ResetTestData");
        }
    
        public virtual ObjectResult<Nullable<int>> uspWebAdmin_SelectSyncData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspWebAdmin_SelectSyncData");
        }
    
        public virtual int Warehouse_Search_Inventory(Nullable<System.Guid> companyId, Nullable<System.Guid> storeId, Nullable<System.Guid> productId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(System.Guid));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Warehouse_Search_Inventory", companyIdParameter, storeIdParameter, productIdParameter);
        }
    
        public virtual ObjectResult<Warehouse_Stock_OnHand_Result> Warehouse_Stock_OnHand(Nullable<System.Guid> stockId, Nullable<System.Guid> productId)
        {
            var stockIdParameter = stockId.HasValue ?
                new ObjectParameter("StockId", stockId) :
                new ObjectParameter("StockId", typeof(System.Guid));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Warehouse_Stock_OnHand_Result>("Warehouse_Stock_OnHand", stockIdParameter, productIdParameter);
        }
    
        public virtual ObjectResult<Warehouse_View_Stock_Delivery_Result> Warehouse_View_Stock_Delivery()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Warehouse_View_Stock_Delivery_Result>("Warehouse_View_Stock_Delivery");
        }
    
        public virtual ObjectResult<Warehouse_View_Stock_Receive_Result> Warehouse_View_Stock_Receive()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Warehouse_View_Stock_Receive_Result>("Warehouse_View_Stock_Receive");
        }
    
        public virtual int Warehouse_View_Stock_Summary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Warehouse_View_Stock_Summary");
        }
    
        public virtual ObjectResult<Warehouse_View_Stock_TransferFrom_Delivery_Result> Warehouse_View_Stock_TransferFrom_Delivery()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Warehouse_View_Stock_TransferFrom_Delivery_Result>("Warehouse_View_Stock_TransferFrom_Delivery");
        }
    
        public virtual ObjectResult<Warehouse_View_Stock_TransferTo_Receive_Result> Warehouse_View_Stock_TransferTo_Receive()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Warehouse_View_Stock_TransferTo_Receive_Result>("Warehouse_View_Stock_TransferTo_Receive");
        }
    
        public virtual int msp_ComponentGetAccessory(Nullable<int> searchAccessoryByCategoryType, string searchAccessoryCategoryCode, string searchAccessoryCode, string searchAccessoryName, Nullable<bool> isSale, Nullable<bool> isPromo)
        {
            var searchAccessoryByCategoryTypeParameter = searchAccessoryByCategoryType.HasValue ?
                new ObjectParameter("SearchAccessoryByCategoryType", searchAccessoryByCategoryType) :
                new ObjectParameter("SearchAccessoryByCategoryType", typeof(int));
    
            var searchAccessoryCategoryCodeParameter = searchAccessoryCategoryCode != null ?
                new ObjectParameter("SearchAccessoryCategoryCode", searchAccessoryCategoryCode) :
                new ObjectParameter("SearchAccessoryCategoryCode", typeof(string));
    
            var searchAccessoryCodeParameter = searchAccessoryCode != null ?
                new ObjectParameter("SearchAccessoryCode", searchAccessoryCode) :
                new ObjectParameter("SearchAccessoryCode", typeof(string));
    
            var searchAccessoryNameParameter = searchAccessoryName != null ?
                new ObjectParameter("SearchAccessoryName", searchAccessoryName) :
                new ObjectParameter("SearchAccessoryName", typeof(string));
    
            var isSaleParameter = isSale.HasValue ?
                new ObjectParameter("isSale", isSale) :
                new ObjectParameter("isSale", typeof(bool));
    
            var isPromoParameter = isPromo.HasValue ?
                new ObjectParameter("isPromo", isPromo) :
                new ObjectParameter("isPromo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_ComponentGetAccessory", searchAccessoryByCategoryTypeParameter, searchAccessoryCategoryCodeParameter, searchAccessoryCodeParameter, searchAccessoryNameParameter, isSaleParameter, isPromoParameter);
        }
    
        public virtual int msp_ComponentGetAccessoryPromotion(string searchAccessoryCategoryCode, string searchAccessoryCode, string searchAccessoryName, Nullable<System.Guid> searchPromotionId, Nullable<System.Guid> searchSaleOrderMasterId)
        {
            var searchAccessoryCategoryCodeParameter = searchAccessoryCategoryCode != null ?
                new ObjectParameter("SearchAccessoryCategoryCode", searchAccessoryCategoryCode) :
                new ObjectParameter("SearchAccessoryCategoryCode", typeof(string));
    
            var searchAccessoryCodeParameter = searchAccessoryCode != null ?
                new ObjectParameter("SearchAccessoryCode", searchAccessoryCode) :
                new ObjectParameter("SearchAccessoryCode", typeof(string));
    
            var searchAccessoryNameParameter = searchAccessoryName != null ?
                new ObjectParameter("SearchAccessoryName", searchAccessoryName) :
                new ObjectParameter("SearchAccessoryName", typeof(string));
    
            var searchPromotionIdParameter = searchPromotionId.HasValue ?
                new ObjectParameter("SearchPromotionId", searchPromotionId) :
                new ObjectParameter("SearchPromotionId", typeof(System.Guid));
    
            var searchSaleOrderMasterIdParameter = searchSaleOrderMasterId.HasValue ?
                new ObjectParameter("SearchSaleOrderMasterId", searchSaleOrderMasterId) :
                new ObjectParameter("SearchSaleOrderMasterId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_ComponentGetAccessoryPromotion", searchAccessoryCategoryCodeParameter, searchAccessoryCodeParameter, searchAccessoryNameParameter, searchPromotionIdParameter, searchSaleOrderMasterIdParameter);
        }
    
        public virtual int msp_GetAccessoryBy(string accessoryCategoryCode, string domainImageAccessory, string noImageUrl, string priceCode, string accessorySearchKey)
        {
            var accessoryCategoryCodeParameter = accessoryCategoryCode != null ?
                new ObjectParameter("AccessoryCategoryCode", accessoryCategoryCode) :
                new ObjectParameter("AccessoryCategoryCode", typeof(string));
    
            var domainImageAccessoryParameter = domainImageAccessory != null ?
                new ObjectParameter("DomainImageAccessory", domainImageAccessory) :
                new ObjectParameter("DomainImageAccessory", typeof(string));
    
            var noImageUrlParameter = noImageUrl != null ?
                new ObjectParameter("NoImageUrl", noImageUrl) :
                new ObjectParameter("NoImageUrl", typeof(string));
    
            var priceCodeParameter = priceCode != null ?
                new ObjectParameter("PriceCode", priceCode) :
                new ObjectParameter("PriceCode", typeof(string));
    
            var accessorySearchKeyParameter = accessorySearchKey != null ?
                new ObjectParameter("AccessorySearchKey", accessorySearchKey) :
                new ObjectParameter("AccessorySearchKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_GetAccessoryBy", accessoryCategoryCodeParameter, domainImageAccessoryParameter, noImageUrlParameter, priceCodeParameter, accessorySearchKeyParameter);
        }
    
        public virtual int msp_GetAccessoryPriceByAccessoryCode(string accessoryCode)
        {
            var accessoryCodeParameter = accessoryCode != null ?
                new ObjectParameter("AccessoryCode", accessoryCode) :
                new ObjectParameter("AccessoryCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_GetAccessoryPriceByAccessoryCode", accessoryCodeParameter);
        }
    
        public virtual ObjectResult<msp_GetLaborBy_Result> msp_GetLaborBy(string materialGroupCode, string productHierarchyCode)
        {
            var materialGroupCodeParameter = materialGroupCode != null ?
                new ObjectParameter("MaterialGroupCode", materialGroupCode) :
                new ObjectParameter("MaterialGroupCode", typeof(string));
    
            var productHierarchyCodeParameter = productHierarchyCode != null ?
                new ObjectParameter("ProductHierarchyCode", productHierarchyCode) :
                new ObjectParameter("ProductHierarchyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<msp_GetLaborBy_Result>("msp_GetLaborBy", materialGroupCodeParameter, productHierarchyCodeParameter);
        }
    
        public virtual ObjectResult<msp_GetMaterialBy_Result> msp_GetMaterialBy(string materialGroupCode, string productHierarchyCode, string domainMaterial, string domainProductHierarchy, string noImageUrl)
        {
            var materialGroupCodeParameter = materialGroupCode != null ?
                new ObjectParameter("MaterialGroupCode", materialGroupCode) :
                new ObjectParameter("MaterialGroupCode", typeof(string));
    
            var productHierarchyCodeParameter = productHierarchyCode != null ?
                new ObjectParameter("ProductHierarchyCode", productHierarchyCode) :
                new ObjectParameter("ProductHierarchyCode", typeof(string));
    
            var domainMaterialParameter = domainMaterial != null ?
                new ObjectParameter("DomainMaterial", domainMaterial) :
                new ObjectParameter("DomainMaterial", typeof(string));
    
            var domainProductHierarchyParameter = domainProductHierarchy != null ?
                new ObjectParameter("DomainProductHierarchy", domainProductHierarchy) :
                new ObjectParameter("DomainProductHierarchy", typeof(string));
    
            var noImageUrlParameter = noImageUrl != null ?
                new ObjectParameter("NoImageUrl", noImageUrl) :
                new ObjectParameter("NoImageUrl", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<msp_GetMaterialBy_Result>("msp_GetMaterialBy", materialGroupCodeParameter, productHierarchyCodeParameter, domainMaterialParameter, domainProductHierarchyParameter, noImageUrlParameter);
        }
    
        public virtual ObjectResult<msp_GetMaterialFreightGroupBy_Result> msp_GetMaterialFreightGroupBy(string materialGroupCode, string productHierarchyCode)
        {
            var materialGroupCodeParameter = materialGroupCode != null ?
                new ObjectParameter("MaterialGroupCode", materialGroupCode) :
                new ObjectParameter("MaterialGroupCode", typeof(string));
    
            var productHierarchyCodeParameter = productHierarchyCode != null ?
                new ObjectParameter("ProductHierarchyCode", productHierarchyCode) :
                new ObjectParameter("ProductHierarchyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<msp_GetMaterialFreightGroupBy_Result>("msp_GetMaterialFreightGroupBy", materialGroupCodeParameter, productHierarchyCodeParameter);
        }
    
        public virtual int msp_GetPromotionBy(string saleOrg, string materialCode)
        {
            var saleOrgParameter = saleOrg != null ?
                new ObjectParameter("SaleOrg", saleOrg) :
                new ObjectParameter("SaleOrg", typeof(string));
    
            var materialCodeParameter = materialCode != null ?
                new ObjectParameter("MaterialCode", materialCode) :
                new ObjectParameter("MaterialCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_GetPromotionBy", saleOrgParameter, materialCodeParameter);
        }
    
        public virtual int msp_GetPromotionDetailBy(Nullable<System.Guid> promotionId)
        {
            var promotionIdParameter = promotionId.HasValue ?
                new ObjectParameter("PromotionId", promotionId) :
                new ObjectParameter("PromotionId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_GetPromotionDetailBy", promotionIdParameter);
        }
    
        public virtual ObjectResult<msp_GetSpecificationsBy_Result> msp_GetSpecificationsBy(string materialCode)
        {
            var materialCodeParameter = materialCode != null ?
                new ObjectParameter("MaterialCode", materialCode) :
                new ObjectParameter("MaterialCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<msp_GetSpecificationsBy_Result>("msp_GetSpecificationsBy", materialCodeParameter);
        }
    
        public virtual ObjectResult<msp_SearchMaterial_Result> msp_SearchMaterial(string materialCode)
        {
            var materialCodeParameter = materialCode != null ?
                new ObjectParameter("MaterialCode", materialCode) :
                new ObjectParameter("MaterialCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<msp_SearchMaterial_Result>("msp_SearchMaterial", materialCodeParameter);
        }
    
        public virtual int InPhieuThuPhuKien(Nullable<System.Guid> serviceOrderId)
        {
            var serviceOrderIdParameter = serviceOrderId.HasValue ?
                new ObjectParameter("ServiceOrderId", serviceOrderId) :
                new ObjectParameter("ServiceOrderId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InPhieuThuPhuKien", serviceOrderIdParameter);
        }
    
        public virtual int InPhieuThuPhuKien2(Nullable<System.Guid> serviceOrderId)
        {
            var serviceOrderIdParameter = serviceOrderId.HasValue ?
                new ObjectParameter("ServiceOrderId", serviceOrderId) :
                new ObjectParameter("ServiceOrderId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InPhieuThuPhuKien2", serviceOrderIdParameter);
        }
    
        public virtual int msp_AccessoryFixingSuggest()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_AccessoryFixingSuggest");
        }
    
        public virtual int msp_Certificate(Nullable<System.Guid> saleOrderId)
        {
            var saleOrderIdParameter = saleOrderId.HasValue ?
                new ObjectParameter("SaleOrderId", saleOrderId) :
                new ObjectParameter("SaleOrderId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_Certificate", saleOrderIdParameter);
        }
    
        public virtual int msp_ConfirmDeposit(Nullable<System.Guid> saleOrderId)
        {
            var saleOrderIdParameter = saleOrderId.HasValue ?
                new ObjectParameter("SaleOrderId", saleOrderId) :
                new ObjectParameter("SaleOrderId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_ConfirmDeposit", saleOrderIdParameter);
        }
    
        public virtual int msp_Deposit(Nullable<System.Guid> accessorySaleOrderId)
        {
            var accessorySaleOrderIdParameter = accessorySaleOrderId.HasValue ?
                new ObjectParameter("AccessorySaleOrderId", accessorySaleOrderId) :
                new ObjectParameter("AccessorySaleOrderId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_Deposit", accessorySaleOrderIdParameter);
        }
    
        public virtual int msp_Deposit2(Nullable<System.Guid> accessorySaleOrderId)
        {
            var accessorySaleOrderIdParameter = accessorySaleOrderId.HasValue ?
                new ObjectParameter("AccessorySaleOrderId", accessorySaleOrderId) :
                new ObjectParameter("AccessorySaleOrderId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_Deposit2", accessorySaleOrderIdParameter);
        }
    
        public virtual int msp_ExpenditureReceipt(Nullable<System.Guid> expenditureReceiptId)
        {
            var expenditureReceiptIdParameter = expenditureReceiptId.HasValue ?
                new ObjectParameter("ExpenditureReceiptId", expenditureReceiptId) :
                new ObjectParameter("ExpenditureReceiptId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_ExpenditureReceipt", expenditureReceiptIdParameter);
        }
    
        public virtual int msp_Mobile_BaoCaoDoanhSoBanXe(string saleOrg, string saleEmployee, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string profitCenterCode, string productHierarchyCode, Nullable<System.Guid> accountId)
        {
            var saleOrgParameter = saleOrg != null ?
                new ObjectParameter("SaleOrg", saleOrg) :
                new ObjectParameter("SaleOrg", typeof(string));
    
            var saleEmployeeParameter = saleEmployee != null ?
                new ObjectParameter("SaleEmployee", saleEmployee) :
                new ObjectParameter("SaleEmployee", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var profitCenterCodeParameter = profitCenterCode != null ?
                new ObjectParameter("ProfitCenterCode", profitCenterCode) :
                new ObjectParameter("ProfitCenterCode", typeof(string));
    
            var productHierarchyCodeParameter = productHierarchyCode != null ?
                new ObjectParameter("ProductHierarchyCode", productHierarchyCode) :
                new ObjectParameter("ProductHierarchyCode", typeof(string));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_Mobile_BaoCaoDoanhSoBanXe", saleOrgParameter, saleEmployeeParameter, fromDateParameter, toDateParameter, profitCenterCodeParameter, productHierarchyCodeParameter, accountIdParameter);
        }
    
        public virtual int msp_Mobile_BaoCaoDoanhSoBanXe2(string saleOrg, string saleEmployee, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string profitCenterCode, string productHierarchyCode, Nullable<System.Guid> accountId)
        {
            var saleOrgParameter = saleOrg != null ?
                new ObjectParameter("SaleOrg", saleOrg) :
                new ObjectParameter("SaleOrg", typeof(string));
    
            var saleEmployeeParameter = saleEmployee != null ?
                new ObjectParameter("SaleEmployee", saleEmployee) :
                new ObjectParameter("SaleEmployee", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var profitCenterCodeParameter = profitCenterCode != null ?
                new ObjectParameter("ProfitCenterCode", profitCenterCode) :
                new ObjectParameter("ProfitCenterCode", typeof(string));
    
            var productHierarchyCodeParameter = productHierarchyCode != null ?
                new ObjectParameter("ProductHierarchyCode", productHierarchyCode) :
                new ObjectParameter("ProductHierarchyCode", typeof(string));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_Mobile_BaoCaoDoanhSoBanXe2", saleOrgParameter, saleEmployeeParameter, fromDateParameter, toDateParameter, profitCenterCodeParameter, productHierarchyCodeParameter, accountIdParameter);
        }
    
        public virtual int msp_Mobile_BaoCaoDoanhSoPhuKien(string saleOrg, string saleEmployee, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string accessoryCategoryCode)
        {
            var saleOrgParameter = saleOrg != null ?
                new ObjectParameter("SaleOrg", saleOrg) :
                new ObjectParameter("SaleOrg", typeof(string));
    
            var saleEmployeeParameter = saleEmployee != null ?
                new ObjectParameter("SaleEmployee", saleEmployee) :
                new ObjectParameter("SaleEmployee", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var accessoryCategoryCodeParameter = accessoryCategoryCode != null ?
                new ObjectParameter("AccessoryCategoryCode", accessoryCategoryCode) :
                new ObjectParameter("AccessoryCategoryCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_Mobile_BaoCaoDoanhSoPhuKien", saleOrgParameter, saleEmployeeParameter, fromDateParameter, toDateParameter, accessoryCategoryCodeParameter);
        }
    
        public virtual int msp_Mobile_BaoCaoDoanhSoPhuKien2(string saleOrg, string saleEmployee, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string accessoryCategoryCode, Nullable<System.Guid> accountId)
        {
            var saleOrgParameter = saleOrg != null ?
                new ObjectParameter("SaleOrg", saleOrg) :
                new ObjectParameter("SaleOrg", typeof(string));
    
            var saleEmployeeParameter = saleEmployee != null ?
                new ObjectParameter("SaleEmployee", saleEmployee) :
                new ObjectParameter("SaleEmployee", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var accessoryCategoryCodeParameter = accessoryCategoryCode != null ?
                new ObjectParameter("AccessoryCategoryCode", accessoryCategoryCode) :
                new ObjectParameter("AccessoryCategoryCode", typeof(string));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_Mobile_BaoCaoDoanhSoPhuKien2", saleOrgParameter, saleEmployeeParameter, fromDateParameter, toDateParameter, accessoryCategoryCodeParameter, accountIdParameter);
        }
    
        public virtual ObjectResult<msp_Mobile_BaoCaoDoanhThuSuaChuaPhuTung_Result> msp_Mobile_BaoCaoDoanhThuSuaChuaPhuTung(string saleOrg, Nullable<System.Guid> serviceEmployee, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var saleOrgParameter = saleOrg != null ?
                new ObjectParameter("SaleOrg", saleOrg) :
                new ObjectParameter("SaleOrg", typeof(string));
    
            var serviceEmployeeParameter = serviceEmployee.HasValue ?
                new ObjectParameter("ServiceEmployee", serviceEmployee) :
                new ObjectParameter("ServiceEmployee", typeof(System.Guid));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<msp_Mobile_BaoCaoDoanhThuSuaChuaPhuTung_Result>("msp_Mobile_BaoCaoDoanhThuSuaChuaPhuTung", saleOrgParameter, serviceEmployeeParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int msp_Mobile_BaoCaoDoanhThuSuaChuaPhuTung2(string saleOrg, Nullable<System.Guid> serviceEmployee, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.Guid> accountId)
        {
            var saleOrgParameter = saleOrg != null ?
                new ObjectParameter("SaleOrg", saleOrg) :
                new ObjectParameter("SaleOrg", typeof(string));
    
            var serviceEmployeeParameter = serviceEmployee.HasValue ?
                new ObjectParameter("ServiceEmployee", serviceEmployee) :
                new ObjectParameter("ServiceEmployee", typeof(System.Guid));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_Mobile_BaoCaoDoanhThuSuaChuaPhuTung2", saleOrgParameter, serviceEmployeeParameter, fromDateParameter, toDateParameter, accountIdParameter);
        }
    
        public virtual int msp_Mobile_BaoCaoThoiGianSuaChuaRapXe(string saleOrg, Nullable<System.Guid> serviceEmployee, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.Guid> accountId)
        {
            var saleOrgParameter = saleOrg != null ?
                new ObjectParameter("SaleOrg", saleOrg) :
                new ObjectParameter("SaleOrg", typeof(string));
    
            var serviceEmployeeParameter = serviceEmployee.HasValue ?
                new ObjectParameter("ServiceEmployee", serviceEmployee) :
                new ObjectParameter("ServiceEmployee", typeof(System.Guid));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_Mobile_BaoCaoThoiGianSuaChuaRapXe", saleOrgParameter, serviceEmployeeParameter, fromDateParameter, toDateParameter, accountIdParameter);
        }
    
        public virtual int msp_Mobile_BaoCaoXeBanTrongNgay(string saleOrg, string saleEmployee, Nullable<System.DateTime> date, Nullable<System.Guid> accountId)
        {
            var saleOrgParameter = saleOrg != null ?
                new ObjectParameter("SaleOrg", saleOrg) :
                new ObjectParameter("SaleOrg", typeof(string));
    
            var saleEmployeeParameter = saleEmployee != null ?
                new ObjectParameter("SaleEmployee", saleEmployee) :
                new ObjectParameter("SaleEmployee", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_Mobile_BaoCaoXeBanTrongNgay", saleOrgParameter, saleEmployeeParameter, dateParameter, accountIdParameter);
        }
    
        public virtual int msp_Mobile_BaoCaoXeBanTrongNgay2(string saleOrg, string saleEmployee, Nullable<System.DateTime> date, Nullable<System.Guid> accountId)
        {
            var saleOrgParameter = saleOrg != null ?
                new ObjectParameter("SaleOrg", saleOrg) :
                new ObjectParameter("SaleOrg", typeof(string));
    
            var saleEmployeeParameter = saleEmployee != null ?
                new ObjectParameter("SaleEmployee", saleEmployee) :
                new ObjectParameter("SaleEmployee", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_Mobile_BaoCaoXeBanTrongNgay2", saleOrgParameter, saleEmployeeParameter, dateParameter, accountIdParameter);
        }
    
        public virtual int msp_Payment(Nullable<System.Guid> receiptVoucherId)
        {
            var receiptVoucherIdParameter = receiptVoucherId.HasValue ?
                new ObjectParameter("ReceiptVoucherId", receiptVoucherId) :
                new ObjectParameter("ReceiptVoucherId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_Payment", receiptVoucherIdParameter);
        }
    
        public virtual int msp_PaymentNationalBuget(Nullable<System.Guid> saleOrderMasterId)
        {
            var saleOrderMasterIdParameter = saleOrderMasterId.HasValue ?
                new ObjectParameter("SaleOrderMasterId", saleOrderMasterId) :
                new ObjectParameter("SaleOrderMasterId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_PaymentNationalBuget", saleOrderMasterIdParameter);
        }
    
        public virtual int msp_PaymentOrder()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_PaymentOrder");
        }
    
        public virtual int msp_Receipt(Nullable<System.Guid> receiptVoucherId)
        {
            var receiptVoucherIdParameter = receiptVoucherId.HasValue ?
                new ObjectParameter("ReceiptVoucherId", receiptVoucherId) :
                new ObjectParameter("ReceiptVoucherId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_Receipt", receiptVoucherIdParameter);
        }
    
        public virtual int msp_RegistrationFeeDeclaration(Nullable<System.Guid> saleOrderMasterId)
        {
            var saleOrderMasterIdParameter = saleOrderMasterId.HasValue ?
                new ObjectParameter("SaleOrderMasterId", saleOrderMasterId) :
                new ObjectParameter("SaleOrderMasterId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_RegistrationFeeDeclaration", saleOrderMasterIdParameter);
        }
    
        public virtual int msp_ServiceOrderReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_ServiceOrderReport");
        }
    
        public virtual int msp_TaxPayment(Nullable<System.Guid> saleOrderMasterId)
        {
            var saleOrderMasterIdParameter = saleOrderMasterId.HasValue ?
                new ObjectParameter("SaleOrderMasterId", saleOrderMasterId) :
                new ObjectParameter("SaleOrderMasterId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_TaxPayment", saleOrderMasterIdParameter);
        }
    
        public virtual int msp_VATInvoice(Nullable<System.Guid> saleOrderMasterId)
        {
            var saleOrderMasterIdParameter = saleOrderMasterId.HasValue ?
                new ObjectParameter("SaleOrderMasterId", saleOrderMasterId) :
                new ObjectParameter("SaleOrderMasterId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_VATInvoice", saleOrderMasterIdParameter);
        }
    
        public virtual int msp_VehicleRegistrationCertificate(Nullable<System.Guid> saleOrderMasterId)
        {
            var saleOrderMasterIdParameter = saleOrderMasterId.HasValue ?
                new ObjectParameter("SaleOrderMasterId", saleOrderMasterId) :
                new ObjectParameter("SaleOrderMasterId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_VehicleRegistrationCertificate", saleOrderMasterIdParameter);
        }
    
        public virtual int ReportOfExpectedMaterial()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReportOfExpectedMaterial");
        }
    
        public virtual int SummaryProgressOfOrder()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SummaryProgressOfOrder");
        }
    
        public virtual int SummaryProgressOfProduct()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SummaryProgressOfProduct");
        }
    
        public virtual int WorkshopProductionProgress()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WorkshopProductionProgress");
        }
    
        public virtual int msp_GetBalanceDueThucTe(Nullable<System.Guid> saleOrderMasterId, Nullable<int> orderType)
        {
            var saleOrderMasterIdParameter = saleOrderMasterId.HasValue ?
                new ObjectParameter("SaleOrderMasterId", saleOrderMasterId) :
                new ObjectParameter("SaleOrderMasterId", typeof(System.Guid));
    
            var orderTypeParameter = orderType.HasValue ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_GetBalanceDueThucTe", saleOrderMasterIdParameter, orderTypeParameter);
        }
    
        public virtual int msp_GetBalanceDueThucTe_Huy(Nullable<System.Guid> saleOrderMasterId, Nullable<int> orderType)
        {
            var saleOrderMasterIdParameter = saleOrderMasterId.HasValue ?
                new ObjectParameter("SaleOrderMasterId", saleOrderMasterId) :
                new ObjectParameter("SaleOrderMasterId", typeof(System.Guid));
    
            var orderTypeParameter = orderType.HasValue ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_GetBalanceDueThucTe_Huy", saleOrderMasterIdParameter, orderTypeParameter);
        }
    
        public virtual int msp_GetSaleOrderBy(string employeeCode)
        {
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_GetSaleOrderBy", employeeCodeParameter);
        }
    
        public virtual ObjectResult<msp_GetSaleOrderBy2_Result> msp_GetSaleOrderBy2(string employeeCode)
        {
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<msp_GetSaleOrderBy2_Result>("msp_GetSaleOrderBy2", employeeCodeParameter);
        }
    
        public virtual int msp_GetSaleOrderList(string saleOrderMasterCode, string customerCode, string customerName, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string saleOrg, Nullable<int> saleOrderType)
        {
            var saleOrderMasterCodeParameter = saleOrderMasterCode != null ?
                new ObjectParameter("SaleOrderMasterCode", saleOrderMasterCode) :
                new ObjectParameter("SaleOrderMasterCode", typeof(string));
    
            var customerCodeParameter = customerCode != null ?
                new ObjectParameter("CustomerCode", customerCode) :
                new ObjectParameter("CustomerCode", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var saleOrgParameter = saleOrg != null ?
                new ObjectParameter("SaleOrg", saleOrg) :
                new ObjectParameter("SaleOrg", typeof(string));
    
            var saleOrderTypeParameter = saleOrderType.HasValue ?
                new ObjectParameter("SaleOrderType", saleOrderType) :
                new ObjectParameter("SaleOrderType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_GetSaleOrderList", saleOrderMasterCodeParameter, customerCodeParameter, customerNameParameter, fromDateParameter, toDateParameter, saleOrgParameter, saleOrderTypeParameter);
        }
    
        public virtual int msp_ExportExcel_DanhSachDonHangSuaChua(string serviceOrderCode, string saleOrgCode, string customerCode, string customerName, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> step)
        {
            var serviceOrderCodeParameter = serviceOrderCode != null ?
                new ObjectParameter("ServiceOrderCode", serviceOrderCode) :
                new ObjectParameter("ServiceOrderCode", typeof(string));
    
            var saleOrgCodeParameter = saleOrgCode != null ?
                new ObjectParameter("SaleOrgCode", saleOrgCode) :
                new ObjectParameter("SaleOrgCode", typeof(string));
    
            var customerCodeParameter = customerCode != null ?
                new ObjectParameter("CustomerCode", customerCode) :
                new ObjectParameter("CustomerCode", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var stepParameter = step.HasValue ?
                new ObjectParameter("Step", step) :
                new ObjectParameter("Step", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_ExportExcel_DanhSachDonHangSuaChua", serviceOrderCodeParameter, saleOrgCodeParameter, customerCodeParameter, customerNameParameter, fromDateParameter, toDateParameter, stepParameter);
        }
    
        public virtual int msp_ExportExcel_DanhSachDonHangSuaChuaKhan(string serviceOrderCode, string saleOrgCode, string customerCode, string customerName, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> step)
        {
            var serviceOrderCodeParameter = serviceOrderCode != null ?
                new ObjectParameter("ServiceOrderCode", serviceOrderCode) :
                new ObjectParameter("ServiceOrderCode", typeof(string));
    
            var saleOrgCodeParameter = saleOrgCode != null ?
                new ObjectParameter("SaleOrgCode", saleOrgCode) :
                new ObjectParameter("SaleOrgCode", typeof(string));
    
            var customerCodeParameter = customerCode != null ?
                new ObjectParameter("CustomerCode", customerCode) :
                new ObjectParameter("CustomerCode", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var stepParameter = step.HasValue ?
                new ObjectParameter("Step", step) :
                new ObjectParameter("Step", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_ExportExcel_DanhSachDonHangSuaChuaKhan", serviceOrderCodeParameter, saleOrgCodeParameter, customerCodeParameter, customerNameParameter, fromDateParameter, toDateParameter, stepParameter);
        }
    
        public virtual int msp_GetClaimAccessory(string serviceOrderCode, string saleOrg, string accessoryCode, string accessoryName, Nullable<System.Guid> accountId1TiepNhan, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> status, Nullable<System.Guid> claimAccessoryId)
        {
            var serviceOrderCodeParameter = serviceOrderCode != null ?
                new ObjectParameter("ServiceOrderCode", serviceOrderCode) :
                new ObjectParameter("ServiceOrderCode", typeof(string));
    
            var saleOrgParameter = saleOrg != null ?
                new ObjectParameter("SaleOrg", saleOrg) :
                new ObjectParameter("SaleOrg", typeof(string));
    
            var accessoryCodeParameter = accessoryCode != null ?
                new ObjectParameter("AccessoryCode", accessoryCode) :
                new ObjectParameter("AccessoryCode", typeof(string));
    
            var accessoryNameParameter = accessoryName != null ?
                new ObjectParameter("AccessoryName", accessoryName) :
                new ObjectParameter("AccessoryName", typeof(string));
    
            var accountId1TiepNhanParameter = accountId1TiepNhan.HasValue ?
                new ObjectParameter("AccountId1TiepNhan", accountId1TiepNhan) :
                new ObjectParameter("AccountId1TiepNhan", typeof(System.Guid));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var claimAccessoryIdParameter = claimAccessoryId.HasValue ?
                new ObjectParameter("ClaimAccessoryId", claimAccessoryId) :
                new ObjectParameter("ClaimAccessoryId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_GetClaimAccessory", serviceOrderCodeParameter, saleOrgParameter, accessoryCodeParameter, accessoryNameParameter, accountId1TiepNhanParameter, fromDateParameter, toDateParameter, statusParameter, claimAccessoryIdParameter);
        }
    
        public virtual int msp_PhieuYeuCauDichVu(Nullable<System.Guid> serviceOrderId)
        {
            var serviceOrderIdParameter = serviceOrderId.HasValue ?
                new ObjectParameter("ServiceOrderId", serviceOrderId) :
                new ObjectParameter("ServiceOrderId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_PhieuYeuCauDichVu", serviceOrderIdParameter);
        }
    
        public virtual int CreateSendMailCalendar(Nullable<System.Guid> campaignId)
        {
            var campaignIdParameter = campaignId.HasValue ?
                new ObjectParameter("CampaignId", campaignId) :
                new ObjectParameter("CampaignId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateSendMailCalendar", campaignIdParameter);
        }
    
        public virtual int InsertMember(Nullable<System.Guid> targetGroupId)
        {
            var targetGroupIdParameter = targetGroupId.HasValue ?
                new ObjectParameter("targetGroupId", targetGroupId) :
                new ObjectParameter("targetGroupId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMember", targetGroupIdParameter);
        }
    
        public virtual int SearchProfile_Email(string type, string profileCode, string profileForeignCode, string customerTypeCode, string createAtCompany, string age, string profileName, string phone, Nullable<System.Guid> provinceId, Nullable<System.Guid> districtId, Nullable<System.Guid> wardId, string address, Nullable<bool> actived, Nullable<System.Guid> profileId, string customerGroupCode, string customerCareerCode, string salesEmployeeCode, string rolesCode, Nullable<System.DateTime> createFromDate, Nullable<System.DateTime> createToDate, string createByCode, string customerSourceCode, string currentCompanyCode, string taxNo, Nullable<System.Guid> accountId)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var profileCodeParameter = profileCode != null ?
                new ObjectParameter("ProfileCode", profileCode) :
                new ObjectParameter("ProfileCode", typeof(string));
    
            var profileForeignCodeParameter = profileForeignCode != null ?
                new ObjectParameter("ProfileForeignCode", profileForeignCode) :
                new ObjectParameter("ProfileForeignCode", typeof(string));
    
            var customerTypeCodeParameter = customerTypeCode != null ?
                new ObjectParameter("CustomerTypeCode", customerTypeCode) :
                new ObjectParameter("CustomerTypeCode", typeof(string));
    
            var createAtCompanyParameter = createAtCompany != null ?
                new ObjectParameter("CreateAtCompany", createAtCompany) :
                new ObjectParameter("CreateAtCompany", typeof(string));
    
            var ageParameter = age != null ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(string));
    
            var profileNameParameter = profileName != null ?
                new ObjectParameter("ProfileName", profileName) :
                new ObjectParameter("ProfileName", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(System.Guid));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(System.Guid));
    
            var wardIdParameter = wardId.HasValue ?
                new ObjectParameter("WardId", wardId) :
                new ObjectParameter("WardId", typeof(System.Guid));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var activedParameter = actived.HasValue ?
                new ObjectParameter("Actived", actived) :
                new ObjectParameter("Actived", typeof(bool));
    
            var profileIdParameter = profileId.HasValue ?
                new ObjectParameter("ProfileId", profileId) :
                new ObjectParameter("ProfileId", typeof(System.Guid));
    
            var customerGroupCodeParameter = customerGroupCode != null ?
                new ObjectParameter("CustomerGroupCode", customerGroupCode) :
                new ObjectParameter("CustomerGroupCode", typeof(string));
    
            var customerCareerCodeParameter = customerCareerCode != null ?
                new ObjectParameter("CustomerCareerCode", customerCareerCode) :
                new ObjectParameter("CustomerCareerCode", typeof(string));
    
            var salesEmployeeCodeParameter = salesEmployeeCode != null ?
                new ObjectParameter("SalesEmployeeCode", salesEmployeeCode) :
                new ObjectParameter("SalesEmployeeCode", typeof(string));
    
            var rolesCodeParameter = rolesCode != null ?
                new ObjectParameter("RolesCode", rolesCode) :
                new ObjectParameter("RolesCode", typeof(string));
    
            var createFromDateParameter = createFromDate.HasValue ?
                new ObjectParameter("CreateFromDate", createFromDate) :
                new ObjectParameter("CreateFromDate", typeof(System.DateTime));
    
            var createToDateParameter = createToDate.HasValue ?
                new ObjectParameter("CreateToDate", createToDate) :
                new ObjectParameter("CreateToDate", typeof(System.DateTime));
    
            var createByCodeParameter = createByCode != null ?
                new ObjectParameter("CreateByCode", createByCode) :
                new ObjectParameter("CreateByCode", typeof(string));
    
            var customerSourceCodeParameter = customerSourceCode != null ?
                new ObjectParameter("CustomerSourceCode", customerSourceCode) :
                new ObjectParameter("CustomerSourceCode", typeof(string));
    
            var currentCompanyCodeParameter = currentCompanyCode != null ?
                new ObjectParameter("CurrentCompanyCode", currentCompanyCode) :
                new ObjectParameter("CurrentCompanyCode", typeof(string));
    
            var taxNoParameter = taxNo != null ?
                new ObjectParameter("TaxNo", taxNo) :
                new ObjectParameter("TaxNo", typeof(string));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SearchProfile_Email", typeParameter, profileCodeParameter, profileForeignCodeParameter, customerTypeCodeParameter, createAtCompanyParameter, ageParameter, profileNameParameter, phoneParameter, provinceIdParameter, districtIdParameter, wardIdParameter, addressParameter, activedParameter, profileIdParameter, customerGroupCodeParameter, customerCareerCodeParameter, salesEmployeeCodeParameter, rolesCodeParameter, createFromDateParameter, createToDateParameter, createByCodeParameter, customerSourceCodeParameter, currentCompanyCodeParameter, taxNoParameter, accountIdParameter);
        }
    
        public virtual int UpdateSendMailCalendar(Nullable<System.Guid> campaignId)
        {
            var campaignIdParameter = campaignId.HasValue ?
                new ObjectParameter("CampaignId", campaignId) :
                new ObjectParameter("CampaignId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSendMailCalendar", campaignIdParameter);
        }
    
        public virtual int GanttChart(Nullable<System.DateTime> startFromDate, Nullable<System.DateTime> startToDate, Nullable<System.DateTime> endFromDate, Nullable<System.DateTime> endToDate, Nullable<System.DateTime> startDCFromDate, Nullable<System.DateTime> startDCToDate, Nullable<System.DateTime> endDCFromDate, Nullable<System.DateTime> endDCToDate, string summary, string vBELN, string material, string summary_Dot, Nullable<bool> isDeleted, Nullable<System.Guid> companyId)
        {
            var startFromDateParameter = startFromDate.HasValue ?
                new ObjectParameter("StartFromDate", startFromDate) :
                new ObjectParameter("StartFromDate", typeof(System.DateTime));
    
            var startToDateParameter = startToDate.HasValue ?
                new ObjectParameter("StartToDate", startToDate) :
                new ObjectParameter("StartToDate", typeof(System.DateTime));
    
            var endFromDateParameter = endFromDate.HasValue ?
                new ObjectParameter("EndFromDate", endFromDate) :
                new ObjectParameter("EndFromDate", typeof(System.DateTime));
    
            var endToDateParameter = endToDate.HasValue ?
                new ObjectParameter("EndToDate", endToDate) :
                new ObjectParameter("EndToDate", typeof(System.DateTime));
    
            var startDCFromDateParameter = startDCFromDate.HasValue ?
                new ObjectParameter("StartDCFromDate", startDCFromDate) :
                new ObjectParameter("StartDCFromDate", typeof(System.DateTime));
    
            var startDCToDateParameter = startDCToDate.HasValue ?
                new ObjectParameter("StartDCToDate", startDCToDate) :
                new ObjectParameter("StartDCToDate", typeof(System.DateTime));
    
            var endDCFromDateParameter = endDCFromDate.HasValue ?
                new ObjectParameter("EndDCFromDate", endDCFromDate) :
                new ObjectParameter("EndDCFromDate", typeof(System.DateTime));
    
            var endDCToDateParameter = endDCToDate.HasValue ?
                new ObjectParameter("EndDCToDate", endDCToDate) :
                new ObjectParameter("EndDCToDate", typeof(System.DateTime));
    
            var summaryParameter = summary != null ?
                new ObjectParameter("Summary", summary) :
                new ObjectParameter("Summary", typeof(string));
    
            var vBELNParameter = vBELN != null ?
                new ObjectParameter("VBELN", vBELN) :
                new ObjectParameter("VBELN", typeof(string));
    
            var materialParameter = material != null ?
                new ObjectParameter("Material", material) :
                new ObjectParameter("Material", typeof(string));
    
            var summary_DotParameter = summary_Dot != null ?
                new ObjectParameter("Summary_Dot", summary_Dot) :
                new ObjectParameter("Summary_Dot", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("isDeleted", isDeleted) :
                new ObjectParameter("isDeleted", typeof(bool));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GanttChart", startFromDateParameter, startToDateParameter, endFromDateParameter, endToDateParameter, startDCFromDateParameter, startDCToDateParameter, endDCFromDateParameter, endDCToDateParameter, summaryParameter, vBELNParameter, materialParameter, summary_DotParameter, isDeletedParameter, companyIdParameter);
        }
    
        public virtual int GanttChart_GetByDSX(Nullable<System.Guid> taskId)
        {
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("TaskId", taskId) :
                new ObjectParameter("TaskId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GanttChart_GetByDSX", taskIdParameter);
        }
    
        public virtual ObjectResult<GetProductionOrderDetail_Result> GetProductionOrderDetail(string barCode)
        {
            var barCodeParameter = barCode != null ?
                new ObjectParameter("BarCode", barCode) :
                new ObjectParameter("BarCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductionOrderDetail_Result>("GetProductionOrderDetail", barCodeParameter);
        }
    
        public virtual ObjectResult<TESTDATA_Result> TESTDATA()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TESTDATA_Result>("TESTDATA");
        }
    
        public virtual int FindAccount()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FindAccount");
        }
    
        public virtual int MenuInsertUpdate(Nullable<System.Guid> id, string name, Nullable<int> index, string icon, string statementType)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var indexParameter = index.HasValue ?
                new ObjectParameter("index", index) :
                new ObjectParameter("index", typeof(int));
    
            var iconParameter = icon != null ?
                new ObjectParameter("icon", icon) :
                new ObjectParameter("icon", typeof(string));
    
            var statementTypeParameter = statementType != null ?
                new ObjectParameter("StatementType", statementType) :
                new ObjectParameter("StatementType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MenuInsertUpdate", idParameter, nameParameter, indexParameter, iconParameter, statementTypeParameter);
        }
    
        public virtual int QTHT_PagePermission_GetPagePermissionByAccountId(Nullable<System.Guid> accountId)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QTHT_PagePermission_GetPagePermissionByAccountId", accountIdParameter);
        }
    
        public virtual int usp_ActivitiesBySalesEmployeeReport(string currentCompanyCode, Nullable<System.DateTime> startFromDate, Nullable<System.DateTime> startToDate, Nullable<System.DateTime> createFromDate, Nullable<System.DateTime> createToDate)
        {
            var currentCompanyCodeParameter = currentCompanyCode != null ?
                new ObjectParameter("CurrentCompanyCode", currentCompanyCode) :
                new ObjectParameter("CurrentCompanyCode", typeof(string));
    
            var startFromDateParameter = startFromDate.HasValue ?
                new ObjectParameter("StartFromDate", startFromDate) :
                new ObjectParameter("StartFromDate", typeof(System.DateTime));
    
            var startToDateParameter = startToDate.HasValue ?
                new ObjectParameter("StartToDate", startToDate) :
                new ObjectParameter("StartToDate", typeof(System.DateTime));
    
            var createFromDateParameter = createFromDate.HasValue ?
                new ObjectParameter("CreateFromDate", createFromDate) :
                new ObjectParameter("CreateFromDate", typeof(System.DateTime));
    
            var createToDateParameter = createToDate.HasValue ?
                new ObjectParameter("CreateToDate", createToDate) :
                new ObjectParameter("CreateToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ActivitiesBySalesEmployeeReport", currentCompanyCodeParameter, startFromDateParameter, startToDateParameter, createFromDateParameter, createToDateParameter);
        }
    
        public virtual int usp_AppointmentWithPersonInChargeReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string currentCompanyCode)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var currentCompanyCodeParameter = currentCompanyCode != null ?
                new ObjectParameter("CurrentCompanyCode", currentCompanyCode) :
                new ObjectParameter("CurrentCompanyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AppointmentWithPersonInChargeReport", fromDateParameter, toDateParameter, currentCompanyCodeParameter);
        }
    
        public virtual ObjectResult<usp_BaoCaoDanhGiaCuaKhachHang_Result> usp_BaoCaoDanhGiaCuaKhachHang(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BaoCaoDanhGiaCuaKhachHang_Result>("usp_BaoCaoDanhGiaCuaKhachHang", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<usp_CustomerAmountByCRMReport_Result> usp_CustomerAmountByCRMReport(string customerTypeCode, string customerGroupCode, string currentCompanyCode, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var customerTypeCodeParameter = customerTypeCode != null ?
                new ObjectParameter("CustomerTypeCode", customerTypeCode) :
                new ObjectParameter("CustomerTypeCode", typeof(string));
    
            var customerGroupCodeParameter = customerGroupCode != null ?
                new ObjectParameter("CustomerGroupCode", customerGroupCode) :
                new ObjectParameter("CustomerGroupCode", typeof(string));
    
            var currentCompanyCodeParameter = currentCompanyCode != null ?
                new ObjectParameter("CurrentCompanyCode", currentCompanyCode) :
                new ObjectParameter("CurrentCompanyCode", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomerAmountByCRMReport_Result>("usp_CustomerAmountByCRMReport", customerTypeCodeParameter, customerGroupCodeParameter, currentCompanyCodeParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int usp_CustomerCareCountReport(Nullable<System.Guid> companyId, string visitTypeCode, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var visitTypeCodeParameter = visitTypeCode != null ?
                new ObjectParameter("VisitTypeCode", visitTypeCode) :
                new ObjectParameter("VisitTypeCode", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CustomerCareCountReport", companyIdParameter, visitTypeCodeParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<usp_CustomerDataReport_Result> usp_CustomerDataReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isForeignCustomer, string customerTypeCode, string createAtSaleOrg, string saleOfficeCode, string addressTypeCode, Nullable<System.Guid> provinceId, Nullable<System.Guid> districtId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var isForeignCustomerParameter = isForeignCustomer.HasValue ?
                new ObjectParameter("IsForeignCustomer", isForeignCustomer) :
                new ObjectParameter("IsForeignCustomer", typeof(bool));
    
            var customerTypeCodeParameter = customerTypeCode != null ?
                new ObjectParameter("CustomerTypeCode", customerTypeCode) :
                new ObjectParameter("CustomerTypeCode", typeof(string));
    
            var createAtSaleOrgParameter = createAtSaleOrg != null ?
                new ObjectParameter("CreateAtSaleOrg", createAtSaleOrg) :
                new ObjectParameter("CreateAtSaleOrg", typeof(string));
    
            var saleOfficeCodeParameter = saleOfficeCode != null ?
                new ObjectParameter("SaleOfficeCode", saleOfficeCode) :
                new ObjectParameter("SaleOfficeCode", typeof(string));
    
            var addressTypeCodeParameter = addressTypeCode != null ?
                new ObjectParameter("AddressTypeCode", addressTypeCode) :
                new ObjectParameter("AddressTypeCode", typeof(string));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(System.Guid));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomerDataReport_Result>("usp_CustomerDataReport", fromDateParameter, toDateParameter, isForeignCustomerParameter, customerTypeCodeParameter, createAtSaleOrgParameter, saleOfficeCodeParameter, addressTypeCodeParameter, provinceIdParameter, districtIdParameter);
        }
    
        public virtual int usp_MaterialExportGVL(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_MaterialExportGVL", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<usp_ProductAccessoryReport_Result> usp_ProductAccessoryReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string eRPProductCode, string productCategoryCode, string errorTypeCode, string errorCode, string eRPAccessoryCode, string accessoryTypeCode)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var eRPProductCodeParameter = eRPProductCode != null ?
                new ObjectParameter("ERPProductCode", eRPProductCode) :
                new ObjectParameter("ERPProductCode", typeof(string));
    
            var productCategoryCodeParameter = productCategoryCode != null ?
                new ObjectParameter("ProductCategoryCode", productCategoryCode) :
                new ObjectParameter("ProductCategoryCode", typeof(string));
    
            var errorTypeCodeParameter = errorTypeCode != null ?
                new ObjectParameter("ErrorTypeCode", errorTypeCode) :
                new ObjectParameter("ErrorTypeCode", typeof(string));
    
            var errorCodeParameter = errorCode != null ?
                new ObjectParameter("ErrorCode", errorCode) :
                new ObjectParameter("ErrorCode", typeof(string));
    
            var eRPAccessoryCodeParameter = eRPAccessoryCode != null ?
                new ObjectParameter("ERPAccessoryCode", eRPAccessoryCode) :
                new ObjectParameter("ERPAccessoryCode", typeof(string));
    
            var accessoryTypeCodeParameter = accessoryTypeCode != null ?
                new ObjectParameter("AccessoryTypeCode", accessoryTypeCode) :
                new ObjectParameter("AccessoryTypeCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProductAccessoryReport_Result>("usp_ProductAccessoryReport", fromDateParameter, toDateParameter, eRPProductCodeParameter, productCategoryCodeParameter, errorTypeCodeParameter, errorCodeParameter, eRPAccessoryCodeParameter, accessoryTypeCodeParameter);
        }
    
        public virtual int usp_ProfileGroupReport(string currentCompanyCode)
        {
            var currentCompanyCodeParameter = currentCompanyCode != null ?
                new ObjectParameter("CurrentCompanyCode", currentCompanyCode) :
                new ObjectParameter("CurrentCompanyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProfileGroupReport", currentCompanyCodeParameter);
        }
    
        public virtual int usp_ProfileQuantityAppointmentWithShowRoomReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string currentCompanyCode)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var currentCompanyCodeParameter = currentCompanyCode != null ?
                new ObjectParameter("CurrentCompanyCode", currentCompanyCode) :
                new ObjectParameter("CurrentCompanyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProfileQuantityAppointmentWithShowRoomReport", fromDateParameter, toDateParameter, currentCompanyCodeParameter);
        }
    
        public virtual int usp_ProfileWithPersonInChargeReport(string currentCompanyCode)
        {
            var currentCompanyCodeParameter = currentCompanyCode != null ?
                new ObjectParameter("CurrentCompanyCode", currentCompanyCode) :
                new ObjectParameter("CurrentCompanyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProfileWithPersonInChargeReport", currentCompanyCodeParameter);
        }
    
        public virtual int usp_ShowroomReport(string area, Nullable<System.Guid> companyId, Nullable<System.DateTime> startFromDate, Nullable<System.DateTime> startToDate)
        {
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var startFromDateParameter = startFromDate.HasValue ?
                new ObjectParameter("StartFromDate", startFromDate) :
                new ObjectParameter("StartFromDate", typeof(System.DateTime));
    
            var startToDateParameter = startToDate.HasValue ?
                new ObjectParameter("StartToDate", startToDate) :
                new ObjectParameter("StartToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ShowroomReport", areaParameter, companyIdParameter, startFromDateParameter, startToDateParameter);
        }
    
        public virtual int usp_StatisticLikeViewProduct(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_StatisticLikeViewProduct", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<usp_StockAllocationReport_Result> usp_StockAllocationReport(Nullable<System.Guid> companyId, Nullable<System.Guid> storeId, Nullable<System.DateTime> toDate, Nullable<System.DateTime> fromDate)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(System.Guid));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_StockAllocationReport_Result>("usp_StockAllocationReport", companyIdParameter, storeIdParameter, toDateParameter, fromDateParameter);
        }
    
        public virtual int usp_StockDeliveryReport(Nullable<System.Guid> companyId, Nullable<System.Guid> storeId, Nullable<System.Guid> stockId, string salesEmployeeCode, string deliveryCode, Nullable<System.Guid> profileId, string profileGroupCode, Nullable<System.Guid> departmentId, Nullable<System.Guid> categoryId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string currentCompanyCode, ObjectParameter filteredResultsCount)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(System.Guid));
    
            var stockIdParameter = stockId.HasValue ?
                new ObjectParameter("StockId", stockId) :
                new ObjectParameter("StockId", typeof(System.Guid));
    
            var salesEmployeeCodeParameter = salesEmployeeCode != null ?
                new ObjectParameter("SalesEmployeeCode", salesEmployeeCode) :
                new ObjectParameter("SalesEmployeeCode", typeof(string));
    
            var deliveryCodeParameter = deliveryCode != null ?
                new ObjectParameter("DeliveryCode", deliveryCode) :
                new ObjectParameter("DeliveryCode", typeof(string));
    
            var profileIdParameter = profileId.HasValue ?
                new ObjectParameter("ProfileId", profileId) :
                new ObjectParameter("ProfileId", typeof(System.Guid));
    
            var profileGroupCodeParameter = profileGroupCode != null ?
                new ObjectParameter("ProfileGroupCode", profileGroupCode) :
                new ObjectParameter("ProfileGroupCode", typeof(string));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(System.Guid));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(System.Guid));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var currentCompanyCodeParameter = currentCompanyCode != null ?
                new ObjectParameter("CurrentCompanyCode", currentCompanyCode) :
                new ObjectParameter("CurrentCompanyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_StockDeliveryReport", companyIdParameter, storeIdParameter, stockIdParameter, salesEmployeeCodeParameter, deliveryCodeParameter, profileIdParameter, profileGroupCodeParameter, departmentIdParameter, categoryIdParameter, fromDateParameter, toDateParameter, currentCompanyCodeParameter, filteredResultsCount);
        }
    
        public virtual ObjectResult<usp_StockOnHandReport_Result> usp_StockOnHandReport(Nullable<System.Guid> companyId, Nullable<System.Guid> storeId, Nullable<System.Guid> stockId, Nullable<System.Guid> productId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(System.Guid));
    
            var stockIdParameter = stockId.HasValue ?
                new ObjectParameter("StockId", stockId) :
                new ObjectParameter("StockId", typeof(System.Guid));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_StockOnHandReport_Result>("usp_StockOnHandReport", companyIdParameter, storeIdParameter, stockIdParameter, productIdParameter);
        }
    
        public virtual ObjectResult<usp_StockReceivingReport_Result> usp_StockReceivingReport(Nullable<System.Guid> companyId, Nullable<System.Guid> storeId, Nullable<System.Guid> stockId, string salesEmployeeCode, string stockReceivingCode, Nullable<System.Guid> productId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isDeleted, string currentCompanyCode, Nullable<System.Guid> departmentId, ObjectParameter filteredResultsCount)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(System.Guid));
    
            var stockIdParameter = stockId.HasValue ?
                new ObjectParameter("StockId", stockId) :
                new ObjectParameter("StockId", typeof(System.Guid));
    
            var salesEmployeeCodeParameter = salesEmployeeCode != null ?
                new ObjectParameter("SalesEmployeeCode", salesEmployeeCode) :
                new ObjectParameter("SalesEmployeeCode", typeof(string));
    
            var stockReceivingCodeParameter = stockReceivingCode != null ?
                new ObjectParameter("StockReceivingCode", stockReceivingCode) :
                new ObjectParameter("StockReceivingCode", typeof(string));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(System.Guid));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("isDeleted", isDeleted) :
                new ObjectParameter("isDeleted", typeof(bool));
    
            var currentCompanyCodeParameter = currentCompanyCode != null ?
                new ObjectParameter("CurrentCompanyCode", currentCompanyCode) :
                new ObjectParameter("CurrentCompanyCode", typeof(string));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_StockReceivingReport_Result>("usp_StockReceivingReport", companyIdParameter, storeIdParameter, stockIdParameter, salesEmployeeCodeParameter, stockReceivingCodeParameter, productIdParameter, fromDateParameter, toDateParameter, isDeletedParameter, currentCompanyCodeParameter, departmentIdParameter, filteredResultsCount);
        }
    
        public virtual ObjectResult<usp_StockTransferReport_Result> usp_StockTransferReport(Nullable<System.Guid> companyId, Nullable<System.Guid> storeId, Nullable<System.Guid> fromStockId, Nullable<System.Guid> toStockId, string salesEmployeeCode, string transferCode, Nullable<System.Guid> productId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isDeleted, string currentCompanyCode, Nullable<System.Guid> departmentId, ObjectParameter filteredResultsCount)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(System.Guid));
    
            var fromStockIdParameter = fromStockId.HasValue ?
                new ObjectParameter("FromStockId", fromStockId) :
                new ObjectParameter("FromStockId", typeof(System.Guid));
    
            var toStockIdParameter = toStockId.HasValue ?
                new ObjectParameter("ToStockId", toStockId) :
                new ObjectParameter("ToStockId", typeof(System.Guid));
    
            var salesEmployeeCodeParameter = salesEmployeeCode != null ?
                new ObjectParameter("SalesEmployeeCode", salesEmployeeCode) :
                new ObjectParameter("SalesEmployeeCode", typeof(string));
    
            var transferCodeParameter = transferCode != null ?
                new ObjectParameter("TransferCode", transferCode) :
                new ObjectParameter("TransferCode", typeof(string));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(System.Guid));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("isDeleted", isDeleted) :
                new ObjectParameter("isDeleted", typeof(bool));
    
            var currentCompanyCodeParameter = currentCompanyCode != null ?
                new ObjectParameter("CurrentCompanyCode", currentCompanyCode) :
                new ObjectParameter("CurrentCompanyCode", typeof(string));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_StockTransferReport_Result>("usp_StockTransferReport", companyIdParameter, storeIdParameter, fromStockIdParameter, toStockIdParameter, salesEmployeeCodeParameter, transferCodeParameter, productIdParameter, fromDateParameter, toDateParameter, isDeletedParameter, currentCompanyCodeParameter, departmentIdParameter, filteredResultsCount);
        }
    
        public virtual ObjectResult<usp_TaskAccessoryWarrantyReport_Result> usp_TaskAccessoryWarrantyReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string errorTypeCode, string eRPAccessoryCode, string accessoryTypeCode, Nullable<System.Guid> companyId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var errorTypeCodeParameter = errorTypeCode != null ?
                new ObjectParameter("ErrorTypeCode", errorTypeCode) :
                new ObjectParameter("ErrorTypeCode", typeof(string));
    
            var eRPAccessoryCodeParameter = eRPAccessoryCode != null ?
                new ObjectParameter("ERPAccessoryCode", eRPAccessoryCode) :
                new ObjectParameter("ERPAccessoryCode", typeof(string));
    
            var accessoryTypeCodeParameter = accessoryTypeCode != null ?
                new ObjectParameter("AccessoryTypeCode", accessoryTypeCode) :
                new ObjectParameter("AccessoryTypeCode", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TaskAccessoryWarrantyReport_Result>("usp_TaskAccessoryWarrantyReport", fromDateParameter, toDateParameter, errorTypeCodeParameter, eRPAccessoryCodeParameter, accessoryTypeCodeParameter, companyIdParameter);
        }
    
        public virtual int usp_TaskAnalysisDVKTReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string serviceTechnicalTeamCode, Nullable<System.Guid> departmentId, Nullable<System.Guid> workFlowId, string taskStatusCode)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var serviceTechnicalTeamCodeParameter = serviceTechnicalTeamCode != null ?
                new ObjectParameter("ServiceTechnicalTeamCode", serviceTechnicalTeamCode) :
                new ObjectParameter("ServiceTechnicalTeamCode", typeof(string));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(System.Guid));
    
            var workFlowIdParameter = workFlowId.HasValue ?
                new ObjectParameter("WorkFlowId", workFlowId) :
                new ObjectParameter("WorkFlowId", typeof(System.Guid));
    
            var taskStatusCodeParameter = taskStatusCode != null ?
                new ObjectParameter("TaskStatusCode", taskStatusCode) :
                new ObjectParameter("TaskStatusCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TaskAnalysisDVKTReport", fromDateParameter, toDateParameter, serviceTechnicalTeamCodeParameter, departmentIdParameter, workFlowIdParameter, taskStatusCodeParameter);
        }
    
        public virtual int usp_TaskCustomerReviewReport(Nullable<System.DateTime> endFromDate, Nullable<System.DateTime> endToDate, Nullable<System.Guid> profileId, Nullable<System.Guid> workFlowId, string serviceTechnicalTeamCode, string assignee, string departmentCode, string property5)
        {
            var endFromDateParameter = endFromDate.HasValue ?
                new ObjectParameter("EndFromDate", endFromDate) :
                new ObjectParameter("EndFromDate", typeof(System.DateTime));
    
            var endToDateParameter = endToDate.HasValue ?
                new ObjectParameter("EndToDate", endToDate) :
                new ObjectParameter("EndToDate", typeof(System.DateTime));
    
            var profileIdParameter = profileId.HasValue ?
                new ObjectParameter("ProfileId", profileId) :
                new ObjectParameter("ProfileId", typeof(System.Guid));
    
            var workFlowIdParameter = workFlowId.HasValue ?
                new ObjectParameter("WorkFlowId", workFlowId) :
                new ObjectParameter("WorkFlowId", typeof(System.Guid));
    
            var serviceTechnicalTeamCodeParameter = serviceTechnicalTeamCode != null ?
                new ObjectParameter("ServiceTechnicalTeamCode", serviceTechnicalTeamCode) :
                new ObjectParameter("ServiceTechnicalTeamCode", typeof(string));
    
            var assigneeParameter = assignee != null ?
                new ObjectParameter("Assignee", assignee) :
                new ObjectParameter("Assignee", typeof(string));
    
            var departmentCodeParameter = departmentCode != null ?
                new ObjectParameter("DepartmentCode", departmentCode) :
                new ObjectParameter("DepartmentCode", typeof(string));
    
            var property5Parameter = property5 != null ?
                new ObjectParameter("Property5", property5) :
                new ObjectParameter("Property5", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TaskCustomerReviewReport", endFromDateParameter, endToDateParameter, profileIdParameter, workFlowIdParameter, serviceTechnicalTeamCodeParameter, assigneeParameter, departmentCodeParameter, property5Parameter);
        }
    
        public virtual ObjectResult<usp_TaskProductWarrantyReport_Result> usp_TaskProductWarrantyReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.Guid> workFlowId, string eRPProductCode, string productCategoryCode, string errorCode)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var workFlowIdParameter = workFlowId.HasValue ?
                new ObjectParameter("WorkFlowId", workFlowId) :
                new ObjectParameter("WorkFlowId", typeof(System.Guid));
    
            var eRPProductCodeParameter = eRPProductCode != null ?
                new ObjectParameter("ERPProductCode", eRPProductCode) :
                new ObjectParameter("ERPProductCode", typeof(string));
    
            var productCategoryCodeParameter = productCategoryCode != null ?
                new ObjectParameter("ProductCategoryCode", productCategoryCode) :
                new ObjectParameter("ProductCategoryCode", typeof(string));
    
            var errorCodeParameter = errorCode != null ?
                new ObjectParameter("ErrorCode", errorCode) :
                new ObjectParameter("ErrorCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TaskProductWarrantyReport_Result>("usp_TaskProductWarrantyReport", fromDateParameter, toDateParameter, workFlowIdParameter, eRPProductCodeParameter, productCategoryCodeParameter, errorCodeParameter);
        }
    
        public virtual int usp_TaskTicketMLCReport(Nullable<System.DateTime> receiveFromDate, Nullable<System.DateTime> receiveToDate, Nullable<System.DateTime> startFromDate, Nullable<System.DateTime> startToDate, Nullable<System.DateTime> endFromDate, Nullable<System.DateTime> endToDate, Nullable<System.Guid> createBy, Nullable<System.Guid> profileId, Nullable<System.Guid> workFlowId, Nullable<bool> taskProcessCode_Todo, Nullable<bool> taskProcessCode_Processing, Nullable<bool> taskProcessCode_Incomplete, Nullable<bool> taskProcessCode_CompletedOnTime, Nullable<bool> taskProcessCode_CompletedExpire, Nullable<bool> taskProcessCode_Expired, string taskStatusCode, string serviceTechnicalTeamCode, string assignee, string departmentCode, string property5)
        {
            var receiveFromDateParameter = receiveFromDate.HasValue ?
                new ObjectParameter("ReceiveFromDate", receiveFromDate) :
                new ObjectParameter("ReceiveFromDate", typeof(System.DateTime));
    
            var receiveToDateParameter = receiveToDate.HasValue ?
                new ObjectParameter("ReceiveToDate", receiveToDate) :
                new ObjectParameter("ReceiveToDate", typeof(System.DateTime));
    
            var startFromDateParameter = startFromDate.HasValue ?
                new ObjectParameter("StartFromDate", startFromDate) :
                new ObjectParameter("StartFromDate", typeof(System.DateTime));
    
            var startToDateParameter = startToDate.HasValue ?
                new ObjectParameter("StartToDate", startToDate) :
                new ObjectParameter("StartToDate", typeof(System.DateTime));
    
            var endFromDateParameter = endFromDate.HasValue ?
                new ObjectParameter("EndFromDate", endFromDate) :
                new ObjectParameter("EndFromDate", typeof(System.DateTime));
    
            var endToDateParameter = endToDate.HasValue ?
                new ObjectParameter("EndToDate", endToDate) :
                new ObjectParameter("EndToDate", typeof(System.DateTime));
    
            var createByParameter = createBy.HasValue ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(System.Guid));
    
            var profileIdParameter = profileId.HasValue ?
                new ObjectParameter("ProfileId", profileId) :
                new ObjectParameter("ProfileId", typeof(System.Guid));
    
            var workFlowIdParameter = workFlowId.HasValue ?
                new ObjectParameter("WorkFlowId", workFlowId) :
                new ObjectParameter("WorkFlowId", typeof(System.Guid));
    
            var taskProcessCode_TodoParameter = taskProcessCode_Todo.HasValue ?
                new ObjectParameter("TaskProcessCode_Todo", taskProcessCode_Todo) :
                new ObjectParameter("TaskProcessCode_Todo", typeof(bool));
    
            var taskProcessCode_ProcessingParameter = taskProcessCode_Processing.HasValue ?
                new ObjectParameter("TaskProcessCode_Processing", taskProcessCode_Processing) :
                new ObjectParameter("TaskProcessCode_Processing", typeof(bool));
    
            var taskProcessCode_IncompleteParameter = taskProcessCode_Incomplete.HasValue ?
                new ObjectParameter("TaskProcessCode_Incomplete", taskProcessCode_Incomplete) :
                new ObjectParameter("TaskProcessCode_Incomplete", typeof(bool));
    
            var taskProcessCode_CompletedOnTimeParameter = taskProcessCode_CompletedOnTime.HasValue ?
                new ObjectParameter("TaskProcessCode_CompletedOnTime", taskProcessCode_CompletedOnTime) :
                new ObjectParameter("TaskProcessCode_CompletedOnTime", typeof(bool));
    
            var taskProcessCode_CompletedExpireParameter = taskProcessCode_CompletedExpire.HasValue ?
                new ObjectParameter("TaskProcessCode_CompletedExpire", taskProcessCode_CompletedExpire) :
                new ObjectParameter("TaskProcessCode_CompletedExpire", typeof(bool));
    
            var taskProcessCode_ExpiredParameter = taskProcessCode_Expired.HasValue ?
                new ObjectParameter("TaskProcessCode_Expired", taskProcessCode_Expired) :
                new ObjectParameter("TaskProcessCode_Expired", typeof(bool));
    
            var taskStatusCodeParameter = taskStatusCode != null ?
                new ObjectParameter("TaskStatusCode", taskStatusCode) :
                new ObjectParameter("TaskStatusCode", typeof(string));
    
            var serviceTechnicalTeamCodeParameter = serviceTechnicalTeamCode != null ?
                new ObjectParameter("ServiceTechnicalTeamCode", serviceTechnicalTeamCode) :
                new ObjectParameter("ServiceTechnicalTeamCode", typeof(string));
    
            var assigneeParameter = assignee != null ?
                new ObjectParameter("Assignee", assignee) :
                new ObjectParameter("Assignee", typeof(string));
    
            var departmentCodeParameter = departmentCode != null ?
                new ObjectParameter("DepartmentCode", departmentCode) :
                new ObjectParameter("DepartmentCode", typeof(string));
    
            var property5Parameter = property5 != null ?
                new ObjectParameter("Property5", property5) :
                new ObjectParameter("Property5", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TaskTicketMLCReport", receiveFromDateParameter, receiveToDateParameter, startFromDateParameter, startToDateParameter, endFromDateParameter, endToDateParameter, createByParameter, profileIdParameter, workFlowIdParameter, taskProcessCode_TodoParameter, taskProcessCode_ProcessingParameter, taskProcessCode_IncompleteParameter, taskProcessCode_CompletedOnTimeParameter, taskProcessCode_CompletedExpireParameter, taskProcessCode_ExpiredParameter, taskStatusCodeParameter, serviceTechnicalTeamCodeParameter, assigneeParameter, departmentCodeParameter, property5Parameter);
        }
    
        public virtual int usp_TaskWarrantyNVKTReport(Nullable<System.DateTime> startFromDate, Nullable<System.DateTime> startToDate, Nullable<System.DateTime> endFromDate, Nullable<System.DateTime> endToDate, Nullable<bool> taskProcessCode_Todo, Nullable<bool> taskProcessCode_Processing, Nullable<bool> taskProcessCode_Incomplete, Nullable<bool> taskProcessCode_CompletedOnTime, Nullable<bool> taskProcessCode_CompletedExpire, Nullable<bool> taskProcessCode_Expired, string taskStatusCode, string serviceTechnicalTeamCode, string assignee, Nullable<System.Guid> departmentId, Nullable<System.Guid> workFlowId, Nullable<System.Guid> profileId, string property5)
        {
            var startFromDateParameter = startFromDate.HasValue ?
                new ObjectParameter("StartFromDate", startFromDate) :
                new ObjectParameter("StartFromDate", typeof(System.DateTime));
    
            var startToDateParameter = startToDate.HasValue ?
                new ObjectParameter("StartToDate", startToDate) :
                new ObjectParameter("StartToDate", typeof(System.DateTime));
    
            var endFromDateParameter = endFromDate.HasValue ?
                new ObjectParameter("EndFromDate", endFromDate) :
                new ObjectParameter("EndFromDate", typeof(System.DateTime));
    
            var endToDateParameter = endToDate.HasValue ?
                new ObjectParameter("EndToDate", endToDate) :
                new ObjectParameter("EndToDate", typeof(System.DateTime));
    
            var taskProcessCode_TodoParameter = taskProcessCode_Todo.HasValue ?
                new ObjectParameter("TaskProcessCode_Todo", taskProcessCode_Todo) :
                new ObjectParameter("TaskProcessCode_Todo", typeof(bool));
    
            var taskProcessCode_ProcessingParameter = taskProcessCode_Processing.HasValue ?
                new ObjectParameter("TaskProcessCode_Processing", taskProcessCode_Processing) :
                new ObjectParameter("TaskProcessCode_Processing", typeof(bool));
    
            var taskProcessCode_IncompleteParameter = taskProcessCode_Incomplete.HasValue ?
                new ObjectParameter("TaskProcessCode_Incomplete", taskProcessCode_Incomplete) :
                new ObjectParameter("TaskProcessCode_Incomplete", typeof(bool));
    
            var taskProcessCode_CompletedOnTimeParameter = taskProcessCode_CompletedOnTime.HasValue ?
                new ObjectParameter("TaskProcessCode_CompletedOnTime", taskProcessCode_CompletedOnTime) :
                new ObjectParameter("TaskProcessCode_CompletedOnTime", typeof(bool));
    
            var taskProcessCode_CompletedExpireParameter = taskProcessCode_CompletedExpire.HasValue ?
                new ObjectParameter("TaskProcessCode_CompletedExpire", taskProcessCode_CompletedExpire) :
                new ObjectParameter("TaskProcessCode_CompletedExpire", typeof(bool));
    
            var taskProcessCode_ExpiredParameter = taskProcessCode_Expired.HasValue ?
                new ObjectParameter("TaskProcessCode_Expired", taskProcessCode_Expired) :
                new ObjectParameter("TaskProcessCode_Expired", typeof(bool));
    
            var taskStatusCodeParameter = taskStatusCode != null ?
                new ObjectParameter("TaskStatusCode", taskStatusCode) :
                new ObjectParameter("TaskStatusCode", typeof(string));
    
            var serviceTechnicalTeamCodeParameter = serviceTechnicalTeamCode != null ?
                new ObjectParameter("ServiceTechnicalTeamCode", serviceTechnicalTeamCode) :
                new ObjectParameter("ServiceTechnicalTeamCode", typeof(string));
    
            var assigneeParameter = assignee != null ?
                new ObjectParameter("Assignee", assignee) :
                new ObjectParameter("Assignee", typeof(string));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(System.Guid));
    
            var workFlowIdParameter = workFlowId.HasValue ?
                new ObjectParameter("WorkFlowId", workFlowId) :
                new ObjectParameter("WorkFlowId", typeof(System.Guid));
    
            var profileIdParameter = profileId.HasValue ?
                new ObjectParameter("ProfileId", profileId) :
                new ObjectParameter("ProfileId", typeof(System.Guid));
    
            var property5Parameter = property5 != null ?
                new ObjectParameter("Property5", property5) :
                new ObjectParameter("Property5", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TaskWarrantyNVKTReport", startFromDateParameter, startToDateParameter, endFromDateParameter, endToDateParameter, taskProcessCode_TodoParameter, taskProcessCode_ProcessingParameter, taskProcessCode_IncompleteParameter, taskProcessCode_CompletedOnTimeParameter, taskProcessCode_CompletedExpireParameter, taskProcessCode_ExpiredParameter, taskStatusCodeParameter, serviceTechnicalTeamCodeParameter, assigneeParameter, departmentIdParameter, workFlowIdParameter, profileIdParameter, property5Parameter);
        }
    
        public virtual int usp_TicketUsualErrorReport(string currentCompanyCode, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var currentCompanyCodeParameter = currentCompanyCode != null ?
                new ObjectParameter("CurrentCompanyCode", currentCompanyCode) :
                new ObjectParameter("CurrentCompanyCode", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TicketUsualErrorReport", currentCompanyCodeParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int usp_TongHopThongTinDuAn(Nullable<System.Guid> investor, Nullable<System.Guid> designer, string saleOfficeCode)
        {
            var investorParameter = investor.HasValue ?
                new ObjectParameter("Investor", investor) :
                new ObjectParameter("Investor", typeof(System.Guid));
    
            var designerParameter = designer.HasValue ?
                new ObjectParameter("Designer", designer) :
                new ObjectParameter("Designer", typeof(System.Guid));
    
            var saleOfficeCodeParameter = saleOfficeCode != null ?
                new ObjectParameter("SaleOfficeCode", saleOfficeCode) :
                new ObjectParameter("SaleOfficeCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TongHopThongTinDuAn", investorParameter, designerParameter, saleOfficeCodeParameter);
        }
    
        public virtual int msp_TaskProcessing(Nullable<System.Guid> taskId)
        {
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("TaskId", taskId) :
                new ObjectParameter("TaskId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_TaskProcessing", taskIdParameter);
        }
    
        public virtual int msp_TaskProcessing_Old(Nullable<System.Guid> taskId)
        {
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("TaskId", taskId) :
                new ObjectParameter("TaskId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msp_TaskProcessing_Old", taskIdParameter);
        }
    
        public virtual int usp_CountTask(string taskProcessCode, string assignee, Nullable<bool> taskProcessCode_Todo, Nullable<bool> taskProcessCode_Processing, Nullable<bool> taskProcessCode_Incomplete, Nullable<bool> taskProcessCode_CompletedOnTime, Nullable<bool> taskProcessCode_CompletedExpire, Nullable<bool> taskProcessCode_Expired, Nullable<bool> isUnassign)
        {
            var taskProcessCodeParameter = taskProcessCode != null ?
                new ObjectParameter("TaskProcessCode", taskProcessCode) :
                new ObjectParameter("TaskProcessCode", typeof(string));
    
            var assigneeParameter = assignee != null ?
                new ObjectParameter("Assignee", assignee) :
                new ObjectParameter("Assignee", typeof(string));
    
            var taskProcessCode_TodoParameter = taskProcessCode_Todo.HasValue ?
                new ObjectParameter("TaskProcessCode_Todo", taskProcessCode_Todo) :
                new ObjectParameter("TaskProcessCode_Todo", typeof(bool));
    
            var taskProcessCode_ProcessingParameter = taskProcessCode_Processing.HasValue ?
                new ObjectParameter("TaskProcessCode_Processing", taskProcessCode_Processing) :
                new ObjectParameter("TaskProcessCode_Processing", typeof(bool));
    
            var taskProcessCode_IncompleteParameter = taskProcessCode_Incomplete.HasValue ?
                new ObjectParameter("TaskProcessCode_Incomplete", taskProcessCode_Incomplete) :
                new ObjectParameter("TaskProcessCode_Incomplete", typeof(bool));
    
            var taskProcessCode_CompletedOnTimeParameter = taskProcessCode_CompletedOnTime.HasValue ?
                new ObjectParameter("TaskProcessCode_CompletedOnTime", taskProcessCode_CompletedOnTime) :
                new ObjectParameter("TaskProcessCode_CompletedOnTime", typeof(bool));
    
            var taskProcessCode_CompletedExpireParameter = taskProcessCode_CompletedExpire.HasValue ?
                new ObjectParameter("TaskProcessCode_CompletedExpire", taskProcessCode_CompletedExpire) :
                new ObjectParameter("TaskProcessCode_CompletedExpire", typeof(bool));
    
            var taskProcessCode_ExpiredParameter = taskProcessCode_Expired.HasValue ?
                new ObjectParameter("TaskProcessCode_Expired", taskProcessCode_Expired) :
                new ObjectParameter("TaskProcessCode_Expired", typeof(bool));
    
            var isUnassignParameter = isUnassign.HasValue ?
                new ObjectParameter("isUnassign", isUnassign) :
                new ObjectParameter("isUnassign", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CountTask", taskProcessCodeParameter, assigneeParameter, taskProcessCode_TodoParameter, taskProcessCode_ProcessingParameter, taskProcessCode_IncompleteParameter, taskProcessCode_CompletedOnTimeParameter, taskProcessCode_CompletedExpireParameter, taskProcessCode_ExpiredParameter, isUnassignParameter);
        }
    
        public virtual int usp_CountTask_bak(string serviceTechnicalTeamCode, Nullable<int> taskCode, string summary, Nullable<System.Guid> workFlowId, string taskStatusCode, string taskProcessCode, string reporter, string assignee, Nullable<System.Guid> profileId, Nullable<System.Guid> companyId, string createBy, string priorityCode, Nullable<System.DateTime> receiveFromDate, Nullable<System.DateTime> receiveToDate, Nullable<System.DateTime> startFromDate, Nullable<System.DateTime> startToDate, Nullable<System.DateTime> estimateEndFromDate, Nullable<System.DateTime> estimateEndToDate, Nullable<System.DateTime> endFromDate, Nullable<System.DateTime> endToDate, Nullable<System.Guid> kanbanId, string type, string commonMistakeCode, string errorCode, string errorTypeCode, Nullable<System.Guid> constructionUnit, Nullable<System.Guid> accountId, Nullable<bool> taskProcessCode_Todo, Nullable<bool> taskProcessCode_Processing, Nullable<bool> taskProcessCode_Incomplete, Nullable<bool> taskProcessCode_CompletedOnTime, Nullable<bool> taskProcessCode_CompletedExpire, Nullable<bool> taskProcessCode_Expired, string domainImageWorkFlow, Nullable<bool> isUnassign)
        {
            var serviceTechnicalTeamCodeParameter = serviceTechnicalTeamCode != null ?
                new ObjectParameter("ServiceTechnicalTeamCode", serviceTechnicalTeamCode) :
                new ObjectParameter("ServiceTechnicalTeamCode", typeof(string));
    
            var taskCodeParameter = taskCode.HasValue ?
                new ObjectParameter("TaskCode", taskCode) :
                new ObjectParameter("TaskCode", typeof(int));
    
            var summaryParameter = summary != null ?
                new ObjectParameter("Summary", summary) :
                new ObjectParameter("Summary", typeof(string));
    
            var workFlowIdParameter = workFlowId.HasValue ?
                new ObjectParameter("WorkFlowId", workFlowId) :
                new ObjectParameter("WorkFlowId", typeof(System.Guid));
    
            var taskStatusCodeParameter = taskStatusCode != null ?
                new ObjectParameter("TaskStatusCode", taskStatusCode) :
                new ObjectParameter("TaskStatusCode", typeof(string));
    
            var taskProcessCodeParameter = taskProcessCode != null ?
                new ObjectParameter("TaskProcessCode", taskProcessCode) :
                new ObjectParameter("TaskProcessCode", typeof(string));
    
            var reporterParameter = reporter != null ?
                new ObjectParameter("Reporter", reporter) :
                new ObjectParameter("Reporter", typeof(string));
    
            var assigneeParameter = assignee != null ?
                new ObjectParameter("Assignee", assignee) :
                new ObjectParameter("Assignee", typeof(string));
    
            var profileIdParameter = profileId.HasValue ?
                new ObjectParameter("ProfileId", profileId) :
                new ObjectParameter("ProfileId", typeof(System.Guid));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var priorityCodeParameter = priorityCode != null ?
                new ObjectParameter("PriorityCode", priorityCode) :
                new ObjectParameter("PriorityCode", typeof(string));
    
            var receiveFromDateParameter = receiveFromDate.HasValue ?
                new ObjectParameter("ReceiveFromDate", receiveFromDate) :
                new ObjectParameter("ReceiveFromDate", typeof(System.DateTime));
    
            var receiveToDateParameter = receiveToDate.HasValue ?
                new ObjectParameter("ReceiveToDate", receiveToDate) :
                new ObjectParameter("ReceiveToDate", typeof(System.DateTime));
    
            var startFromDateParameter = startFromDate.HasValue ?
                new ObjectParameter("StartFromDate", startFromDate) :
                new ObjectParameter("StartFromDate", typeof(System.DateTime));
    
            var startToDateParameter = startToDate.HasValue ?
                new ObjectParameter("StartToDate", startToDate) :
                new ObjectParameter("StartToDate", typeof(System.DateTime));
    
            var estimateEndFromDateParameter = estimateEndFromDate.HasValue ?
                new ObjectParameter("EstimateEndFromDate", estimateEndFromDate) :
                new ObjectParameter("EstimateEndFromDate", typeof(System.DateTime));
    
            var estimateEndToDateParameter = estimateEndToDate.HasValue ?
                new ObjectParameter("EstimateEndToDate", estimateEndToDate) :
                new ObjectParameter("EstimateEndToDate", typeof(System.DateTime));
    
            var endFromDateParameter = endFromDate.HasValue ?
                new ObjectParameter("EndFromDate", endFromDate) :
                new ObjectParameter("EndFromDate", typeof(System.DateTime));
    
            var endToDateParameter = endToDate.HasValue ?
                new ObjectParameter("EndToDate", endToDate) :
                new ObjectParameter("EndToDate", typeof(System.DateTime));
    
            var kanbanIdParameter = kanbanId.HasValue ?
                new ObjectParameter("KanbanId", kanbanId) :
                new ObjectParameter("KanbanId", typeof(System.Guid));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var commonMistakeCodeParameter = commonMistakeCode != null ?
                new ObjectParameter("CommonMistakeCode", commonMistakeCode) :
                new ObjectParameter("CommonMistakeCode", typeof(string));
    
            var errorCodeParameter = errorCode != null ?
                new ObjectParameter("ErrorCode", errorCode) :
                new ObjectParameter("ErrorCode", typeof(string));
    
            var errorTypeCodeParameter = errorTypeCode != null ?
                new ObjectParameter("ErrorTypeCode", errorTypeCode) :
                new ObjectParameter("ErrorTypeCode", typeof(string));
    
            var constructionUnitParameter = constructionUnit.HasValue ?
                new ObjectParameter("ConstructionUnit", constructionUnit) :
                new ObjectParameter("ConstructionUnit", typeof(System.Guid));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(System.Guid));
    
            var taskProcessCode_TodoParameter = taskProcessCode_Todo.HasValue ?
                new ObjectParameter("TaskProcessCode_Todo", taskProcessCode_Todo) :
                new ObjectParameter("TaskProcessCode_Todo", typeof(bool));
    
            var taskProcessCode_ProcessingParameter = taskProcessCode_Processing.HasValue ?
                new ObjectParameter("TaskProcessCode_Processing", taskProcessCode_Processing) :
                new ObjectParameter("TaskProcessCode_Processing", typeof(bool));
    
            var taskProcessCode_IncompleteParameter = taskProcessCode_Incomplete.HasValue ?
                new ObjectParameter("TaskProcessCode_Incomplete", taskProcessCode_Incomplete) :
                new ObjectParameter("TaskProcessCode_Incomplete", typeof(bool));
    
            var taskProcessCode_CompletedOnTimeParameter = taskProcessCode_CompletedOnTime.HasValue ?
                new ObjectParameter("TaskProcessCode_CompletedOnTime", taskProcessCode_CompletedOnTime) :
                new ObjectParameter("TaskProcessCode_CompletedOnTime", typeof(bool));
    
            var taskProcessCode_CompletedExpireParameter = taskProcessCode_CompletedExpire.HasValue ?
                new ObjectParameter("TaskProcessCode_CompletedExpire", taskProcessCode_CompletedExpire) :
                new ObjectParameter("TaskProcessCode_CompletedExpire", typeof(bool));
    
            var taskProcessCode_ExpiredParameter = taskProcessCode_Expired.HasValue ?
                new ObjectParameter("TaskProcessCode_Expired", taskProcessCode_Expired) :
                new ObjectParameter("TaskProcessCode_Expired", typeof(bool));
    
            var domainImageWorkFlowParameter = domainImageWorkFlow != null ?
                new ObjectParameter("DomainImageWorkFlow", domainImageWorkFlow) :
                new ObjectParameter("DomainImageWorkFlow", typeof(string));
    
            var isUnassignParameter = isUnassign.HasValue ?
                new ObjectParameter("isUnassign", isUnassign) :
                new ObjectParameter("isUnassign", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CountTask_bak", serviceTechnicalTeamCodeParameter, taskCodeParameter, summaryParameter, workFlowIdParameter, taskStatusCodeParameter, taskProcessCodeParameter, reporterParameter, assigneeParameter, profileIdParameter, companyIdParameter, createByParameter, priorityCodeParameter, receiveFromDateParameter, receiveToDateParameter, startFromDateParameter, startToDateParameter, estimateEndFromDateParameter, estimateEndToDateParameter, endFromDateParameter, endToDateParameter, kanbanIdParameter, typeParameter, commonMistakeCodeParameter, errorCodeParameter, errorTypeCodeParameter, constructionUnitParameter, accountIdParameter, taskProcessCode_TodoParameter, taskProcessCode_ProcessingParameter, taskProcessCode_IncompleteParameter, taskProcessCode_CompletedOnTimeParameter, taskProcessCode_CompletedExpireParameter, taskProcessCode_ExpiredParameter, domainImageWorkFlowParameter, isUnassignParameter);
        }
    
        public virtual ObjectResult<usp_GetWorkFlowListBy_Result> usp_GetWorkFlowListBy(string type, string currentCompanyCode)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var currentCompanyCodeParameter = currentCompanyCode != null ?
                new ObjectParameter("CurrentCompanyCode", currentCompanyCode) :
                new ObjectParameter("CurrentCompanyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetWorkFlowListBy_Result>("usp_GetWorkFlowListBy", typeParameter, currentCompanyCodeParameter);
        }
    
        public virtual int usp_SearchReportTask(string serviceTechnicalTeamCode, Nullable<int> taskCode, string summary, string taskProcessCode, string reporter, Nullable<System.Guid> profileId, Nullable<System.Guid> companyId, string createBy, string priorityCode, Nullable<System.DateTime> createdFromDate, Nullable<System.DateTime> createdToDate, Nullable<System.DateTime> receiveFromDate, Nullable<System.DateTime> receiveToDate, Nullable<System.DateTime> startFromDate, Nullable<System.DateTime> startToDate, Nullable<System.DateTime> estimateEndFromDate, Nullable<System.DateTime> estimateEndToDate, Nullable<System.DateTime> endFromDate, Nullable<System.DateTime> endToDate, Nullable<System.Guid> kanbanId, string type, string commonMistakeCode, string errorCode, string errorTypeCode, Nullable<System.Guid> constructionUnit, Nullable<System.Guid> accountId, Nullable<bool> taskProcessCode_Todo, Nullable<bool> taskProcessCode_Processing, Nullable<bool> taskProcessCode_Incomplete, Nullable<bool> taskProcessCode_CompletedOnTime, Nullable<bool> taskProcessCode_CompletedExpire, Nullable<bool> taskProcessCode_Expired, string domainImageWorkFlow, string salesSupervisorCode, string visitTypeCode, string currentCompanyCode, string property5, string eRPProductCode, string eRPAccessoryCode, string accessoryTypeCode, Nullable<bool> isReport, Nullable<int> pageSize, Nullable<int> pageNumber, ObjectParameter filteredResultsCount)
        {
            var serviceTechnicalTeamCodeParameter = serviceTechnicalTeamCode != null ?
                new ObjectParameter("ServiceTechnicalTeamCode", serviceTechnicalTeamCode) :
                new ObjectParameter("ServiceTechnicalTeamCode", typeof(string));
    
            var taskCodeParameter = taskCode.HasValue ?
                new ObjectParameter("TaskCode", taskCode) :
                new ObjectParameter("TaskCode", typeof(int));
    
            var summaryParameter = summary != null ?
                new ObjectParameter("Summary", summary) :
                new ObjectParameter("Summary", typeof(string));
    
            var taskProcessCodeParameter = taskProcessCode != null ?
                new ObjectParameter("TaskProcessCode", taskProcessCode) :
                new ObjectParameter("TaskProcessCode", typeof(string));
    
            var reporterParameter = reporter != null ?
                new ObjectParameter("Reporter", reporter) :
                new ObjectParameter("Reporter", typeof(string));
    
            var profileIdParameter = profileId.HasValue ?
                new ObjectParameter("ProfileId", profileId) :
                new ObjectParameter("ProfileId", typeof(System.Guid));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var priorityCodeParameter = priorityCode != null ?
                new ObjectParameter("PriorityCode", priorityCode) :
                new ObjectParameter("PriorityCode", typeof(string));
    
            var createdFromDateParameter = createdFromDate.HasValue ?
                new ObjectParameter("CreatedFromDate", createdFromDate) :
                new ObjectParameter("CreatedFromDate", typeof(System.DateTime));
    
            var createdToDateParameter = createdToDate.HasValue ?
                new ObjectParameter("CreatedToDate", createdToDate) :
                new ObjectParameter("CreatedToDate", typeof(System.DateTime));
    
            var receiveFromDateParameter = receiveFromDate.HasValue ?
                new ObjectParameter("ReceiveFromDate", receiveFromDate) :
                new ObjectParameter("ReceiveFromDate", typeof(System.DateTime));
    
            var receiveToDateParameter = receiveToDate.HasValue ?
                new ObjectParameter("ReceiveToDate", receiveToDate) :
                new ObjectParameter("ReceiveToDate", typeof(System.DateTime));
    
            var startFromDateParameter = startFromDate.HasValue ?
                new ObjectParameter("StartFromDate", startFromDate) :
                new ObjectParameter("StartFromDate", typeof(System.DateTime));
    
            var startToDateParameter = startToDate.HasValue ?
                new ObjectParameter("StartToDate", startToDate) :
                new ObjectParameter("StartToDate", typeof(System.DateTime));
    
            var estimateEndFromDateParameter = estimateEndFromDate.HasValue ?
                new ObjectParameter("EstimateEndFromDate", estimateEndFromDate) :
                new ObjectParameter("EstimateEndFromDate", typeof(System.DateTime));
    
            var estimateEndToDateParameter = estimateEndToDate.HasValue ?
                new ObjectParameter("EstimateEndToDate", estimateEndToDate) :
                new ObjectParameter("EstimateEndToDate", typeof(System.DateTime));
    
            var endFromDateParameter = endFromDate.HasValue ?
                new ObjectParameter("EndFromDate", endFromDate) :
                new ObjectParameter("EndFromDate", typeof(System.DateTime));
    
            var endToDateParameter = endToDate.HasValue ?
                new ObjectParameter("EndToDate", endToDate) :
                new ObjectParameter("EndToDate", typeof(System.DateTime));
    
            var kanbanIdParameter = kanbanId.HasValue ?
                new ObjectParameter("KanbanId", kanbanId) :
                new ObjectParameter("KanbanId", typeof(System.Guid));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var commonMistakeCodeParameter = commonMistakeCode != null ?
                new ObjectParameter("CommonMistakeCode", commonMistakeCode) :
                new ObjectParameter("CommonMistakeCode", typeof(string));
    
            var errorCodeParameter = errorCode != null ?
                new ObjectParameter("ErrorCode", errorCode) :
                new ObjectParameter("ErrorCode", typeof(string));
    
            var errorTypeCodeParameter = errorTypeCode != null ?
                new ObjectParameter("ErrorTypeCode", errorTypeCode) :
                new ObjectParameter("ErrorTypeCode", typeof(string));
    
            var constructionUnitParameter = constructionUnit.HasValue ?
                new ObjectParameter("ConstructionUnit", constructionUnit) :
                new ObjectParameter("ConstructionUnit", typeof(System.Guid));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(System.Guid));
    
            var taskProcessCode_TodoParameter = taskProcessCode_Todo.HasValue ?
                new ObjectParameter("TaskProcessCode_Todo", taskProcessCode_Todo) :
                new ObjectParameter("TaskProcessCode_Todo", typeof(bool));
    
            var taskProcessCode_ProcessingParameter = taskProcessCode_Processing.HasValue ?
                new ObjectParameter("TaskProcessCode_Processing", taskProcessCode_Processing) :
                new ObjectParameter("TaskProcessCode_Processing", typeof(bool));
    
            var taskProcessCode_IncompleteParameter = taskProcessCode_Incomplete.HasValue ?
                new ObjectParameter("TaskProcessCode_Incomplete", taskProcessCode_Incomplete) :
                new ObjectParameter("TaskProcessCode_Incomplete", typeof(bool));
    
            var taskProcessCode_CompletedOnTimeParameter = taskProcessCode_CompletedOnTime.HasValue ?
                new ObjectParameter("TaskProcessCode_CompletedOnTime", taskProcessCode_CompletedOnTime) :
                new ObjectParameter("TaskProcessCode_CompletedOnTime", typeof(bool));
    
            var taskProcessCode_CompletedExpireParameter = taskProcessCode_CompletedExpire.HasValue ?
                new ObjectParameter("TaskProcessCode_CompletedExpire", taskProcessCode_CompletedExpire) :
                new ObjectParameter("TaskProcessCode_CompletedExpire", typeof(bool));
    
            var taskProcessCode_ExpiredParameter = taskProcessCode_Expired.HasValue ?
                new ObjectParameter("TaskProcessCode_Expired", taskProcessCode_Expired) :
                new ObjectParameter("TaskProcessCode_Expired", typeof(bool));
    
            var domainImageWorkFlowParameter = domainImageWorkFlow != null ?
                new ObjectParameter("DomainImageWorkFlow", domainImageWorkFlow) :
                new ObjectParameter("DomainImageWorkFlow", typeof(string));
    
            var salesSupervisorCodeParameter = salesSupervisorCode != null ?
                new ObjectParameter("SalesSupervisorCode", salesSupervisorCode) :
                new ObjectParameter("SalesSupervisorCode", typeof(string));
    
            var visitTypeCodeParameter = visitTypeCode != null ?
                new ObjectParameter("VisitTypeCode", visitTypeCode) :
                new ObjectParameter("VisitTypeCode", typeof(string));
    
            var currentCompanyCodeParameter = currentCompanyCode != null ?
                new ObjectParameter("CurrentCompanyCode", currentCompanyCode) :
                new ObjectParameter("CurrentCompanyCode", typeof(string));
    
            var property5Parameter = property5 != null ?
                new ObjectParameter("Property5", property5) :
                new ObjectParameter("Property5", typeof(string));
    
            var eRPProductCodeParameter = eRPProductCode != null ?
                new ObjectParameter("ERPProductCode", eRPProductCode) :
                new ObjectParameter("ERPProductCode", typeof(string));
    
            var eRPAccessoryCodeParameter = eRPAccessoryCode != null ?
                new ObjectParameter("ERPAccessoryCode", eRPAccessoryCode) :
                new ObjectParameter("ERPAccessoryCode", typeof(string));
    
            var accessoryTypeCodeParameter = accessoryTypeCode != null ?
                new ObjectParameter("AccessoryTypeCode", accessoryTypeCode) :
                new ObjectParameter("AccessoryTypeCode", typeof(string));
    
            var isReportParameter = isReport.HasValue ?
                new ObjectParameter("IsReport", isReport) :
                new ObjectParameter("IsReport", typeof(bool));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SearchReportTask", serviceTechnicalTeamCodeParameter, taskCodeParameter, summaryParameter, taskProcessCodeParameter, reporterParameter, profileIdParameter, companyIdParameter, createByParameter, priorityCodeParameter, createdFromDateParameter, createdToDateParameter, receiveFromDateParameter, receiveToDateParameter, startFromDateParameter, startToDateParameter, estimateEndFromDateParameter, estimateEndToDateParameter, endFromDateParameter, endToDateParameter, kanbanIdParameter, typeParameter, commonMistakeCodeParameter, errorCodeParameter, errorTypeCodeParameter, constructionUnitParameter, accountIdParameter, taskProcessCode_TodoParameter, taskProcessCode_ProcessingParameter, taskProcessCode_IncompleteParameter, taskProcessCode_CompletedOnTimeParameter, taskProcessCode_CompletedExpireParameter, taskProcessCode_ExpiredParameter, domainImageWorkFlowParameter, salesSupervisorCodeParameter, visitTypeCodeParameter, currentCompanyCodeParameter, property5Parameter, eRPProductCodeParameter, eRPAccessoryCodeParameter, accessoryTypeCodeParameter, isReportParameter, pageSizeParameter, pageNumberParameter, filteredResultsCount);
        }
    
        public virtual int usp_SearchReportTaskTest(string serviceTechnicalTeamCode, Nullable<int> taskCode, string summary, string taskProcessCode, string reporter, Nullable<System.Guid> profileId, Nullable<System.Guid> companyId, string createBy, string priorityCode, Nullable<System.DateTime> createdFromDate, Nullable<System.DateTime> createdToDate, Nullable<System.DateTime> receiveFromDate, Nullable<System.DateTime> receiveToDate, Nullable<System.DateTime> startFromDate, Nullable<System.DateTime> startToDate, Nullable<System.DateTime> estimateEndFromDate, Nullable<System.DateTime> estimateEndToDate, Nullable<System.DateTime> endFromDate, Nullable<System.DateTime> endToDate, Nullable<System.Guid> kanbanId, string type, string commonMistakeCode, string errorCode, string errorTypeCode, Nullable<System.Guid> constructionUnit, Nullable<System.Guid> accountId, Nullable<bool> taskProcessCode_Todo, Nullable<bool> taskProcessCode_Processing, Nullable<bool> taskProcessCode_Incomplete, Nullable<bool> taskProcessCode_CompletedOnTime, Nullable<bool> taskProcessCode_CompletedExpire, Nullable<bool> taskProcessCode_Expired, string domainImageWorkFlow, string salesSupervisorCode, string visitTypeCode, string currentCompanyCode, string property5, string eRPProductCode, string eRPAccessoryCode, string accessoryTypeCode, Nullable<bool> isReport, Nullable<int> pageSize, Nullable<int> pageNumber, ObjectParameter filteredResultsCount)
        {
            var serviceTechnicalTeamCodeParameter = serviceTechnicalTeamCode != null ?
                new ObjectParameter("ServiceTechnicalTeamCode", serviceTechnicalTeamCode) :
                new ObjectParameter("ServiceTechnicalTeamCode", typeof(string));
    
            var taskCodeParameter = taskCode.HasValue ?
                new ObjectParameter("TaskCode", taskCode) :
                new ObjectParameter("TaskCode", typeof(int));
    
            var summaryParameter = summary != null ?
                new ObjectParameter("Summary", summary) :
                new ObjectParameter("Summary", typeof(string));
    
            var taskProcessCodeParameter = taskProcessCode != null ?
                new ObjectParameter("TaskProcessCode", taskProcessCode) :
                new ObjectParameter("TaskProcessCode", typeof(string));
    
            var reporterParameter = reporter != null ?
                new ObjectParameter("Reporter", reporter) :
                new ObjectParameter("Reporter", typeof(string));
    
            var profileIdParameter = profileId.HasValue ?
                new ObjectParameter("ProfileId", profileId) :
                new ObjectParameter("ProfileId", typeof(System.Guid));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var priorityCodeParameter = priorityCode != null ?
                new ObjectParameter("PriorityCode", priorityCode) :
                new ObjectParameter("PriorityCode", typeof(string));
    
            var createdFromDateParameter = createdFromDate.HasValue ?
                new ObjectParameter("CreatedFromDate", createdFromDate) :
                new ObjectParameter("CreatedFromDate", typeof(System.DateTime));
    
            var createdToDateParameter = createdToDate.HasValue ?
                new ObjectParameter("CreatedToDate", createdToDate) :
                new ObjectParameter("CreatedToDate", typeof(System.DateTime));
    
            var receiveFromDateParameter = receiveFromDate.HasValue ?
                new ObjectParameter("ReceiveFromDate", receiveFromDate) :
                new ObjectParameter("ReceiveFromDate", typeof(System.DateTime));
    
            var receiveToDateParameter = receiveToDate.HasValue ?
                new ObjectParameter("ReceiveToDate", receiveToDate) :
                new ObjectParameter("ReceiveToDate", typeof(System.DateTime));
    
            var startFromDateParameter = startFromDate.HasValue ?
                new ObjectParameter("StartFromDate", startFromDate) :
                new ObjectParameter("StartFromDate", typeof(System.DateTime));
    
            var startToDateParameter = startToDate.HasValue ?
                new ObjectParameter("StartToDate", startToDate) :
                new ObjectParameter("StartToDate", typeof(System.DateTime));
    
            var estimateEndFromDateParameter = estimateEndFromDate.HasValue ?
                new ObjectParameter("EstimateEndFromDate", estimateEndFromDate) :
                new ObjectParameter("EstimateEndFromDate", typeof(System.DateTime));
    
            var estimateEndToDateParameter = estimateEndToDate.HasValue ?
                new ObjectParameter("EstimateEndToDate", estimateEndToDate) :
                new ObjectParameter("EstimateEndToDate", typeof(System.DateTime));
    
            var endFromDateParameter = endFromDate.HasValue ?
                new ObjectParameter("EndFromDate", endFromDate) :
                new ObjectParameter("EndFromDate", typeof(System.DateTime));
    
            var endToDateParameter = endToDate.HasValue ?
                new ObjectParameter("EndToDate", endToDate) :
                new ObjectParameter("EndToDate", typeof(System.DateTime));
    
            var kanbanIdParameter = kanbanId.HasValue ?
                new ObjectParameter("KanbanId", kanbanId) :
                new ObjectParameter("KanbanId", typeof(System.Guid));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var commonMistakeCodeParameter = commonMistakeCode != null ?
                new ObjectParameter("CommonMistakeCode", commonMistakeCode) :
                new ObjectParameter("CommonMistakeCode", typeof(string));
    
            var errorCodeParameter = errorCode != null ?
                new ObjectParameter("ErrorCode", errorCode) :
                new ObjectParameter("ErrorCode", typeof(string));
    
            var errorTypeCodeParameter = errorTypeCode != null ?
                new ObjectParameter("ErrorTypeCode", errorTypeCode) :
                new ObjectParameter("ErrorTypeCode", typeof(string));
    
            var constructionUnitParameter = constructionUnit.HasValue ?
                new ObjectParameter("ConstructionUnit", constructionUnit) :
                new ObjectParameter("ConstructionUnit", typeof(System.Guid));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(System.Guid));
    
            var taskProcessCode_TodoParameter = taskProcessCode_Todo.HasValue ?
                new ObjectParameter("TaskProcessCode_Todo", taskProcessCode_Todo) :
                new ObjectParameter("TaskProcessCode_Todo", typeof(bool));
    
            var taskProcessCode_ProcessingParameter = taskProcessCode_Processing.HasValue ?
                new ObjectParameter("TaskProcessCode_Processing", taskProcessCode_Processing) :
                new ObjectParameter("TaskProcessCode_Processing", typeof(bool));
    
            var taskProcessCode_IncompleteParameter = taskProcessCode_Incomplete.HasValue ?
                new ObjectParameter("TaskProcessCode_Incomplete", taskProcessCode_Incomplete) :
                new ObjectParameter("TaskProcessCode_Incomplete", typeof(bool));
    
            var taskProcessCode_CompletedOnTimeParameter = taskProcessCode_CompletedOnTime.HasValue ?
                new ObjectParameter("TaskProcessCode_CompletedOnTime", taskProcessCode_CompletedOnTime) :
                new ObjectParameter("TaskProcessCode_CompletedOnTime", typeof(bool));
    
            var taskProcessCode_CompletedExpireParameter = taskProcessCode_CompletedExpire.HasValue ?
                new ObjectParameter("TaskProcessCode_CompletedExpire", taskProcessCode_CompletedExpire) :
                new ObjectParameter("TaskProcessCode_CompletedExpire", typeof(bool));
    
            var taskProcessCode_ExpiredParameter = taskProcessCode_Expired.HasValue ?
                new ObjectParameter("TaskProcessCode_Expired", taskProcessCode_Expired) :
                new ObjectParameter("TaskProcessCode_Expired", typeof(bool));
    
            var domainImageWorkFlowParameter = domainImageWorkFlow != null ?
                new ObjectParameter("DomainImageWorkFlow", domainImageWorkFlow) :
                new ObjectParameter("DomainImageWorkFlow", typeof(string));
    
            var salesSupervisorCodeParameter = salesSupervisorCode != null ?
                new ObjectParameter("SalesSupervisorCode", salesSupervisorCode) :
                new ObjectParameter("SalesSupervisorCode", typeof(string));
    
            var visitTypeCodeParameter = visitTypeCode != null ?
                new ObjectParameter("VisitTypeCode", visitTypeCode) :
                new ObjectParameter("VisitTypeCode", typeof(string));
    
            var currentCompanyCodeParameter = currentCompanyCode != null ?
                new ObjectParameter("CurrentCompanyCode", currentCompanyCode) :
                new ObjectParameter("CurrentCompanyCode", typeof(string));
    
            var property5Parameter = property5 != null ?
                new ObjectParameter("Property5", property5) :
                new ObjectParameter("Property5", typeof(string));
    
            var eRPProductCodeParameter = eRPProductCode != null ?
                new ObjectParameter("ERPProductCode", eRPProductCode) :
                new ObjectParameter("ERPProductCode", typeof(string));
    
            var eRPAccessoryCodeParameter = eRPAccessoryCode != null ?
                new ObjectParameter("ERPAccessoryCode", eRPAccessoryCode) :
                new ObjectParameter("ERPAccessoryCode", typeof(string));
    
            var accessoryTypeCodeParameter = accessoryTypeCode != null ?
                new ObjectParameter("AccessoryTypeCode", accessoryTypeCode) :
                new ObjectParameter("AccessoryTypeCode", typeof(string));
    
            var isReportParameter = isReport.HasValue ?
                new ObjectParameter("IsReport", isReport) :
                new ObjectParameter("IsReport", typeof(bool));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SearchReportTaskTest", serviceTechnicalTeamCodeParameter, taskCodeParameter, summaryParameter, taskProcessCodeParameter, reporterParameter, profileIdParameter, companyIdParameter, createByParameter, priorityCodeParameter, createdFromDateParameter, createdToDateParameter, receiveFromDateParameter, receiveToDateParameter, startFromDateParameter, startToDateParameter, estimateEndFromDateParameter, estimateEndToDateParameter, endFromDateParameter, endToDateParameter, kanbanIdParameter, typeParameter, commonMistakeCodeParameter, errorCodeParameter, errorTypeCodeParameter, constructionUnitParameter, accountIdParameter, taskProcessCode_TodoParameter, taskProcessCode_ProcessingParameter, taskProcessCode_IncompleteParameter, taskProcessCode_CompletedOnTimeParameter, taskProcessCode_CompletedExpireParameter, taskProcessCode_ExpiredParameter, domainImageWorkFlowParameter, salesSupervisorCodeParameter, visitTypeCodeParameter, currentCompanyCodeParameter, property5Parameter, eRPProductCodeParameter, eRPAccessoryCodeParameter, accessoryTypeCodeParameter, isReportParameter, pageSizeParameter, pageNumberParameter, filteredResultsCount);
        }
    
        public virtual int usp_SearchTask(string serviceTechnicalTeamCode, Nullable<int> taskCode, string summary, Nullable<System.Guid> workFlowId, string taskStatusCode, string taskProcessCode, string reporter, string assignee, Nullable<System.Guid> profileId, Nullable<System.Guid> companyId, string createBy, string priorityCode, Nullable<System.DateTime> createdFromDate, Nullable<System.DateTime> createdToDate, Nullable<System.DateTime> receiveFromDate, Nullable<System.DateTime> receiveToDate, Nullable<System.DateTime> startFromDate, Nullable<System.DateTime> startToDate, Nullable<System.DateTime> estimateEndFromDate, Nullable<System.DateTime> estimateEndToDate, Nullable<System.DateTime> endFromDate, Nullable<System.DateTime> endToDate, Nullable<System.Guid> kanbanId, string type, string commonMistakeCode, string errorCode, string errorTypeCode, Nullable<System.Guid> constructionUnit, Nullable<System.Guid> accountId, Nullable<bool> taskProcessCode_Todo, Nullable<bool> taskProcessCode_Processing, Nullable<bool> taskProcessCode_Incomplete, Nullable<bool> taskProcessCode_CompletedOnTime, Nullable<bool> taskProcessCode_CompletedExpire, Nullable<bool> taskProcessCode_Expired, string domainImageWorkFlow, string productCategoryCode, string profileGroupCode, string salesSupervisorCode, string departmentCode, string visitTypeCode, string currentCompanyCode, Nullable<bool> actived, Nullable<bool> isReport, Nullable<int> pageSize, Nullable<int> pageNumber, ObjectParameter filteredResultsCount, string completedEmployee, Nullable<System.Guid> provinceId, Nullable<System.Guid> districtId, Nullable<System.Guid> wardId, string profileCode, string profileName, string lSXDT, string dSX, string lSXSAP, Nullable<bool> isDeleted, string productCode, Nullable<bool> isViewQtyHasValue, Nullable<int> fromQty, Nullable<int> toQty)
        {
            var serviceTechnicalTeamCodeParameter = serviceTechnicalTeamCode != null ?
                new ObjectParameter("ServiceTechnicalTeamCode", serviceTechnicalTeamCode) :
                new ObjectParameter("ServiceTechnicalTeamCode", typeof(string));
    
            var taskCodeParameter = taskCode.HasValue ?
                new ObjectParameter("TaskCode", taskCode) :
                new ObjectParameter("TaskCode", typeof(int));
    
            var summaryParameter = summary != null ?
                new ObjectParameter("Summary", summary) :
                new ObjectParameter("Summary", typeof(string));
    
            var workFlowIdParameter = workFlowId.HasValue ?
                new ObjectParameter("WorkFlowId", workFlowId) :
                new ObjectParameter("WorkFlowId", typeof(System.Guid));
    
            var taskStatusCodeParameter = taskStatusCode != null ?
                new ObjectParameter("TaskStatusCode", taskStatusCode) :
                new ObjectParameter("TaskStatusCode", typeof(string));
    
            var taskProcessCodeParameter = taskProcessCode != null ?
                new ObjectParameter("TaskProcessCode", taskProcessCode) :
                new ObjectParameter("TaskProcessCode", typeof(string));
    
            var reporterParameter = reporter != null ?
                new ObjectParameter("Reporter", reporter) :
                new ObjectParameter("Reporter", typeof(string));
    
            var assigneeParameter = assignee != null ?
                new ObjectParameter("Assignee", assignee) :
                new ObjectParameter("Assignee", typeof(string));
    
            var profileIdParameter = profileId.HasValue ?
                new ObjectParameter("ProfileId", profileId) :
                new ObjectParameter("ProfileId", typeof(System.Guid));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var priorityCodeParameter = priorityCode != null ?
                new ObjectParameter("PriorityCode", priorityCode) :
                new ObjectParameter("PriorityCode", typeof(string));
    
            var createdFromDateParameter = createdFromDate.HasValue ?
                new ObjectParameter("CreatedFromDate", createdFromDate) :
                new ObjectParameter("CreatedFromDate", typeof(System.DateTime));
    
            var createdToDateParameter = createdToDate.HasValue ?
                new ObjectParameter("CreatedToDate", createdToDate) :
                new ObjectParameter("CreatedToDate", typeof(System.DateTime));
    
            var receiveFromDateParameter = receiveFromDate.HasValue ?
                new ObjectParameter("ReceiveFromDate", receiveFromDate) :
                new ObjectParameter("ReceiveFromDate", typeof(System.DateTime));
    
            var receiveToDateParameter = receiveToDate.HasValue ?
                new ObjectParameter("ReceiveToDate", receiveToDate) :
                new ObjectParameter("ReceiveToDate", typeof(System.DateTime));
    
            var startFromDateParameter = startFromDate.HasValue ?
                new ObjectParameter("StartFromDate", startFromDate) :
                new ObjectParameter("StartFromDate", typeof(System.DateTime));
    
            var startToDateParameter = startToDate.HasValue ?
                new ObjectParameter("StartToDate", startToDate) :
                new ObjectParameter("StartToDate", typeof(System.DateTime));
    
            var estimateEndFromDateParameter = estimateEndFromDate.HasValue ?
                new ObjectParameter("EstimateEndFromDate", estimateEndFromDate) :
                new ObjectParameter("EstimateEndFromDate", typeof(System.DateTime));
    
            var estimateEndToDateParameter = estimateEndToDate.HasValue ?
                new ObjectParameter("EstimateEndToDate", estimateEndToDate) :
                new ObjectParameter("EstimateEndToDate", typeof(System.DateTime));
    
            var endFromDateParameter = endFromDate.HasValue ?
                new ObjectParameter("EndFromDate", endFromDate) :
                new ObjectParameter("EndFromDate", typeof(System.DateTime));
    
            var endToDateParameter = endToDate.HasValue ?
                new ObjectParameter("EndToDate", endToDate) :
                new ObjectParameter("EndToDate", typeof(System.DateTime));
    
            var kanbanIdParameter = kanbanId.HasValue ?
                new ObjectParameter("KanbanId", kanbanId) :
                new ObjectParameter("KanbanId", typeof(System.Guid));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var commonMistakeCodeParameter = commonMistakeCode != null ?
                new ObjectParameter("CommonMistakeCode", commonMistakeCode) :
                new ObjectParameter("CommonMistakeCode", typeof(string));
    
            var errorCodeParameter = errorCode != null ?
                new ObjectParameter("ErrorCode", errorCode) :
                new ObjectParameter("ErrorCode", typeof(string));
    
            var errorTypeCodeParameter = errorTypeCode != null ?
                new ObjectParameter("ErrorTypeCode", errorTypeCode) :
                new ObjectParameter("ErrorTypeCode", typeof(string));
    
            var constructionUnitParameter = constructionUnit.HasValue ?
                new ObjectParameter("ConstructionUnit", constructionUnit) :
                new ObjectParameter("ConstructionUnit", typeof(System.Guid));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(System.Guid));
    
            var taskProcessCode_TodoParameter = taskProcessCode_Todo.HasValue ?
                new ObjectParameter("TaskProcessCode_Todo", taskProcessCode_Todo) :
                new ObjectParameter("TaskProcessCode_Todo", typeof(bool));
    
            var taskProcessCode_ProcessingParameter = taskProcessCode_Processing.HasValue ?
                new ObjectParameter("TaskProcessCode_Processing", taskProcessCode_Processing) :
                new ObjectParameter("TaskProcessCode_Processing", typeof(bool));
    
            var taskProcessCode_IncompleteParameter = taskProcessCode_Incomplete.HasValue ?
                new ObjectParameter("TaskProcessCode_Incomplete", taskProcessCode_Incomplete) :
                new ObjectParameter("TaskProcessCode_Incomplete", typeof(bool));
    
            var taskProcessCode_CompletedOnTimeParameter = taskProcessCode_CompletedOnTime.HasValue ?
                new ObjectParameter("TaskProcessCode_CompletedOnTime", taskProcessCode_CompletedOnTime) :
                new ObjectParameter("TaskProcessCode_CompletedOnTime", typeof(bool));
    
            var taskProcessCode_CompletedExpireParameter = taskProcessCode_CompletedExpire.HasValue ?
                new ObjectParameter("TaskProcessCode_CompletedExpire", taskProcessCode_CompletedExpire) :
                new ObjectParameter("TaskProcessCode_CompletedExpire", typeof(bool));
    
            var taskProcessCode_ExpiredParameter = taskProcessCode_Expired.HasValue ?
                new ObjectParameter("TaskProcessCode_Expired", taskProcessCode_Expired) :
                new ObjectParameter("TaskProcessCode_Expired", typeof(bool));
    
            var domainImageWorkFlowParameter = domainImageWorkFlow != null ?
                new ObjectParameter("DomainImageWorkFlow", domainImageWorkFlow) :
                new ObjectParameter("DomainImageWorkFlow", typeof(string));
    
            var productCategoryCodeParameter = productCategoryCode != null ?
                new ObjectParameter("ProductCategoryCode", productCategoryCode) :
                new ObjectParameter("ProductCategoryCode", typeof(string));
    
            var profileGroupCodeParameter = profileGroupCode != null ?
                new ObjectParameter("ProfileGroupCode", profileGroupCode) :
                new ObjectParameter("ProfileGroupCode", typeof(string));
    
            var salesSupervisorCodeParameter = salesSupervisorCode != null ?
                new ObjectParameter("SalesSupervisorCode", salesSupervisorCode) :
                new ObjectParameter("SalesSupervisorCode", typeof(string));
    
            var departmentCodeParameter = departmentCode != null ?
                new ObjectParameter("DepartmentCode", departmentCode) :
                new ObjectParameter("DepartmentCode", typeof(string));
    
            var visitTypeCodeParameter = visitTypeCode != null ?
                new ObjectParameter("VisitTypeCode", visitTypeCode) :
                new ObjectParameter("VisitTypeCode", typeof(string));
    
            var currentCompanyCodeParameter = currentCompanyCode != null ?
                new ObjectParameter("CurrentCompanyCode", currentCompanyCode) :
                new ObjectParameter("CurrentCompanyCode", typeof(string));
    
            var activedParameter = actived.HasValue ?
                new ObjectParameter("Actived", actived) :
                new ObjectParameter("Actived", typeof(bool));
    
            var isReportParameter = isReport.HasValue ?
                new ObjectParameter("IsReport", isReport) :
                new ObjectParameter("IsReport", typeof(bool));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var completedEmployeeParameter = completedEmployee != null ?
                new ObjectParameter("CompletedEmployee", completedEmployee) :
                new ObjectParameter("CompletedEmployee", typeof(string));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(System.Guid));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(System.Guid));
    
            var wardIdParameter = wardId.HasValue ?
                new ObjectParameter("WardId", wardId) :
                new ObjectParameter("WardId", typeof(System.Guid));
    
            var profileCodeParameter = profileCode != null ?
                new ObjectParameter("ProfileCode", profileCode) :
                new ObjectParameter("ProfileCode", typeof(string));
    
            var profileNameParameter = profileName != null ?
                new ObjectParameter("ProfileName", profileName) :
                new ObjectParameter("ProfileName", typeof(string));
    
            var lSXDTParameter = lSXDT != null ?
                new ObjectParameter("LSXDT", lSXDT) :
                new ObjectParameter("LSXDT", typeof(string));
    
            var dSXParameter = dSX != null ?
                new ObjectParameter("DSX", dSX) :
                new ObjectParameter("DSX", typeof(string));
    
            var lSXSAPParameter = lSXSAP != null ?
                new ObjectParameter("LSXSAP", lSXSAP) :
                new ObjectParameter("LSXSAP", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("isDeleted", isDeleted) :
                new ObjectParameter("isDeleted", typeof(bool));
    
            var productCodeParameter = productCode != null ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(string));
    
            var isViewQtyHasValueParameter = isViewQtyHasValue.HasValue ?
                new ObjectParameter("isViewQtyHasValue", isViewQtyHasValue) :
                new ObjectParameter("isViewQtyHasValue", typeof(bool));
    
            var fromQtyParameter = fromQty.HasValue ?
                new ObjectParameter("FromQty", fromQty) :
                new ObjectParameter("FromQty", typeof(int));
    
            var toQtyParameter = toQty.HasValue ?
                new ObjectParameter("ToQty", toQty) :
                new ObjectParameter("ToQty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SearchTask", serviceTechnicalTeamCodeParameter, taskCodeParameter, summaryParameter, workFlowIdParameter, taskStatusCodeParameter, taskProcessCodeParameter, reporterParameter, assigneeParameter, profileIdParameter, companyIdParameter, createByParameter, priorityCodeParameter, createdFromDateParameter, createdToDateParameter, receiveFromDateParameter, receiveToDateParameter, startFromDateParameter, startToDateParameter, estimateEndFromDateParameter, estimateEndToDateParameter, endFromDateParameter, endToDateParameter, kanbanIdParameter, typeParameter, commonMistakeCodeParameter, errorCodeParameter, errorTypeCodeParameter, constructionUnitParameter, accountIdParameter, taskProcessCode_TodoParameter, taskProcessCode_ProcessingParameter, taskProcessCode_IncompleteParameter, taskProcessCode_CompletedOnTimeParameter, taskProcessCode_CompletedExpireParameter, taskProcessCode_ExpiredParameter, domainImageWorkFlowParameter, productCategoryCodeParameter, profileGroupCodeParameter, salesSupervisorCodeParameter, departmentCodeParameter, visitTypeCodeParameter, currentCompanyCodeParameter, activedParameter, isReportParameter, pageSizeParameter, pageNumberParameter, filteredResultsCount, completedEmployeeParameter, provinceIdParameter, districtIdParameter, wardIdParameter, profileCodeParameter, profileNameParameter, lSXDTParameter, dSXParameter, lSXSAPParameter, isDeletedParameter, productCodeParameter, isViewQtyHasValueParameter, fromQtyParameter, toQtyParameter);
        }
    
        public virtual int usp_SearchTaskEstimatedCalendar(Nullable<System.DateTime> startFromDate, Nullable<System.DateTime> startToDate)
        {
            var startFromDateParameter = startFromDate.HasValue ?
                new ObjectParameter("StartFromDate", startFromDate) :
                new ObjectParameter("StartFromDate", typeof(System.DateTime));
    
            var startToDateParameter = startToDate.HasValue ?
                new ObjectParameter("StartToDate", startToDate) :
                new ObjectParameter("StartToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SearchTaskEstimatedCalendar", startFromDateParameter, startToDateParameter);
        }
    
        public virtual int usp_TaskGTBQuantityReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TaskGTBQuantityReport", fromDateParameter, toDateParameter);
        }
    
        public virtual int usp_UpdateGroupAssignTask(Nullable<System.Guid> taskId)
        {
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("TaskId", taskId) :
                new ObjectParameter("TaskId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateGroupAssignTask", taskIdParameter);
        }
    
        public virtual int usp_UpdateRemindTask(Nullable<System.Guid> taskId, Nullable<int> remindTime, string remindCycle, Nullable<System.DateTime> remindStartDate, Nullable<System.Guid> accountId, Nullable<bool> isRemind)
        {
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("TaskId", taskId) :
                new ObjectParameter("TaskId", typeof(System.Guid));
    
            var remindTimeParameter = remindTime.HasValue ?
                new ObjectParameter("RemindTime", remindTime) :
                new ObjectParameter("RemindTime", typeof(int));
    
            var remindCycleParameter = remindCycle != null ?
                new ObjectParameter("RemindCycle", remindCycle) :
                new ObjectParameter("RemindCycle", typeof(string));
    
            var remindStartDateParameter = remindStartDate.HasValue ?
                new ObjectParameter("RemindStartDate", remindStartDate) :
                new ObjectParameter("RemindStartDate", typeof(System.DateTime));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(System.Guid));
    
            var isRemindParameter = isRemind.HasValue ?
                new ObjectParameter("isRemind", isRemind) :
                new ObjectParameter("isRemind", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateRemindTask", taskIdParameter, remindTimeParameter, remindCycleParameter, remindStartDateParameter, accountIdParameter, isRemindParameter);
        }
    
        public virtual int Export_Catalogue(Nullable<int> deliveryCode)
        {
            var deliveryCodeParameter = deliveryCode.HasValue ?
                new ObjectParameter("DeliveryCode", deliveryCode) :
                new ObjectParameter("DeliveryCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Export_Catalogue", deliveryCodeParameter);
        }
    
        public virtual int Transfer_Catalogue(Nullable<int> transferCode)
        {
            var transferCodeParameter = transferCode.HasValue ?
                new ObjectParameter("TransferCode", transferCode) :
                new ObjectParameter("TransferCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Transfer_Catalogue", transferCodeParameter);
        }
    
        public virtual ObjectResult<usp_SearchDelivery_Dynamic_Result> usp_SearchDelivery_Dynamic(Nullable<System.Guid> searchCompanyId, Nullable<System.Guid> searchStoreId, Nullable<System.Guid> searchProfileId, Nullable<System.DateTime> searchFromDate, Nullable<System.DateTime> searchToDate, string searchDeliveryCode, string searchSalesEmployeeCode, Nullable<bool> isDeleted, Nullable<System.Guid> searchCategoryId, Nullable<int> pageSize, Nullable<int> pageNumber, ObjectParameter filteredResultsCount)
        {
            var searchCompanyIdParameter = searchCompanyId.HasValue ?
                new ObjectParameter("SearchCompanyId", searchCompanyId) :
                new ObjectParameter("SearchCompanyId", typeof(System.Guid));
    
            var searchStoreIdParameter = searchStoreId.HasValue ?
                new ObjectParameter("SearchStoreId", searchStoreId) :
                new ObjectParameter("SearchStoreId", typeof(System.Guid));
    
            var searchProfileIdParameter = searchProfileId.HasValue ?
                new ObjectParameter("SearchProfileId", searchProfileId) :
                new ObjectParameter("SearchProfileId", typeof(System.Guid));
    
            var searchFromDateParameter = searchFromDate.HasValue ?
                new ObjectParameter("SearchFromDate", searchFromDate) :
                new ObjectParameter("SearchFromDate", typeof(System.DateTime));
    
            var searchToDateParameter = searchToDate.HasValue ?
                new ObjectParameter("SearchToDate", searchToDate) :
                new ObjectParameter("SearchToDate", typeof(System.DateTime));
    
            var searchDeliveryCodeParameter = searchDeliveryCode != null ?
                new ObjectParameter("SearchDeliveryCode", searchDeliveryCode) :
                new ObjectParameter("SearchDeliveryCode", typeof(string));
    
            var searchSalesEmployeeCodeParameter = searchSalesEmployeeCode != null ?
                new ObjectParameter("SearchSalesEmployeeCode", searchSalesEmployeeCode) :
                new ObjectParameter("SearchSalesEmployeeCode", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("isDeleted", isDeleted) :
                new ObjectParameter("isDeleted", typeof(bool));
    
            var searchCategoryIdParameter = searchCategoryId.HasValue ?
                new ObjectParameter("SearchCategoryId", searchCategoryId) :
                new ObjectParameter("SearchCategoryId", typeof(System.Guid));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchDelivery_Dynamic_Result>("usp_SearchDelivery_Dynamic", searchCompanyIdParameter, searchStoreIdParameter, searchProfileIdParameter, searchFromDateParameter, searchToDateParameter, searchDeliveryCodeParameter, searchSalesEmployeeCodeParameter, isDeletedParameter, searchCategoryIdParameter, pageSizeParameter, pageNumberParameter, filteredResultsCount);
        }
    
        public virtual int GanttChart_GetByLSXC(Nullable<System.Guid> taskId)
        {
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("TaskId", taskId) :
                new ObjectParameter("TaskId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GanttChart_GetByLSXC", taskIdParameter);
        }
    
        public virtual ObjectResult<GetBomDetailWithLSXD_Result> GetBomDetailWithLSXD(Nullable<System.Guid> taskId)
        {
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("TaskId", taskId) :
                new ObjectParameter("TaskId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBomDetailWithLSXD_Result>("GetBomDetailWithLSXD", taskIdParameter);
        }
    
        public virtual ObjectResult<GetBomDetailWithSaleOrder100_Result> GetBomDetailWithSaleOrder100(string vBELN, string pOSNR, string sTLAN)
        {
            var vBELNParameter = vBELN != null ?
                new ObjectParameter("VBELN", vBELN) :
                new ObjectParameter("VBELN", typeof(string));
    
            var pOSNRParameter = pOSNR != null ?
                new ObjectParameter("POSNR", pOSNR) :
                new ObjectParameter("POSNR", typeof(string));
    
            var sTLANParameter = sTLAN != null ?
                new ObjectParameter("STLAN", sTLAN) :
                new ObjectParameter("STLAN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBomDetailWithSaleOrder100_Result>("GetBomDetailWithSaleOrder100", vBELNParameter, pOSNRParameter, sTLANParameter);
        }
    
        public virtual ObjectResult<GetBomDetailWithSaleOrder80_Result> GetBomDetailWithSaleOrder80(string vBELN, string pOSNR, string sTLAN)
        {
            var vBELNParameter = vBELN != null ?
                new ObjectParameter("VBELN", vBELN) :
                new ObjectParameter("VBELN", typeof(string));
    
            var pOSNRParameter = pOSNR != null ?
                new ObjectParameter("POSNR", pOSNR) :
                new ObjectParameter("POSNR", typeof(string));
    
            var sTLANParameter = sTLAN != null ?
                new ObjectParameter("STLAN", sTLAN) :
                new ObjectParameter("STLAN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBomDetailWithSaleOrder80_Result>("GetBomDetailWithSaleOrder80", vBELNParameter, pOSNRParameter, sTLANParameter);
        }
    
        public virtual int GetHangTag(Nullable<System.Guid> customerReference, Nullable<int> batchPrinting, Nullable<bool> isCum)
        {
            var customerReferenceParameter = customerReference.HasValue ?
                new ObjectParameter("CustomerReference", customerReference) :
                new ObjectParameter("CustomerReference", typeof(System.Guid));
    
            var batchPrintingParameter = batchPrinting.HasValue ?
                new ObjectParameter("BatchPrinting", batchPrinting) :
                new ObjectParameter("BatchPrinting", typeof(int));
    
            var isCumParameter = isCum.HasValue ?
                new ObjectParameter("IsCum", isCum) :
                new ObjectParameter("IsCum", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetHangTag", customerReferenceParameter, batchPrintingParameter, isCumParameter);
        }
    
        public virtual ObjectResult<GetProductionOrder_Result> GetProductionOrder(string zZLSX, string saleOrg, Nullable<System.DateTime> kTDK, Nullable<System.DateTime> kTDC)
        {
            var zZLSXParameter = zZLSX != null ?
                new ObjectParameter("ZZLSX", zZLSX) :
                new ObjectParameter("ZZLSX", typeof(string));
    
            var saleOrgParameter = saleOrg != null ?
                new ObjectParameter("SaleOrg", saleOrg) :
                new ObjectParameter("SaleOrg", typeof(string));
    
            var kTDKParameter = kTDK.HasValue ?
                new ObjectParameter("KTDK", kTDK) :
                new ObjectParameter("KTDK", typeof(System.DateTime));
    
            var kTDCParameter = kTDC.HasValue ?
                new ObjectParameter("KTDC", kTDC) :
                new ObjectParameter("KTDC", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductionOrder_Result>("GetProductionOrder", zZLSXParameter, saleOrgParameter, kTDKParameter, kTDCParameter);
        }
    
        public virtual ObjectResult<RecordProductionOrder_Result> RecordProductionOrder(Nullable<System.Guid> taskId, string barcode)
        {
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("TaskId", taskId) :
                new ObjectParameter("TaskId", typeof(System.Guid));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RecordProductionOrder_Result>("RecordProductionOrder", taskIdParameter, barcodeParameter);
        }
    
        public virtual int usp_SearchTask_bak(string serviceTechnicalTeamCode, Nullable<int> taskCode, string summary, Nullable<System.Guid> workFlowId, string taskStatusCode, string taskProcessCode, string reporter, string assignee, Nullable<System.Guid> profileId, Nullable<System.Guid> companyId, string createBy, string priorityCode, Nullable<System.DateTime> createdFromDate, Nullable<System.DateTime> createdToDate, Nullable<System.DateTime> receiveFromDate, Nullable<System.DateTime> receiveToDate, Nullable<System.DateTime> startFromDate, Nullable<System.DateTime> startToDate, Nullable<System.DateTime> estimateEndFromDate, Nullable<System.DateTime> estimateEndToDate, Nullable<System.DateTime> endFromDate, Nullable<System.DateTime> endToDate, Nullable<System.Guid> kanbanId, string type, string commonMistakeCode, string errorCode, string errorTypeCode, Nullable<System.Guid> constructionUnit, Nullable<System.Guid> accountId, Nullable<bool> taskProcessCode_Todo, Nullable<bool> taskProcessCode_Processing, Nullable<bool> taskProcessCode_Incomplete, Nullable<bool> taskProcessCode_CompletedOnTime, Nullable<bool> taskProcessCode_CompletedExpire, Nullable<bool> taskProcessCode_Expired, string domainImageWorkFlow, string productCategoryCode, string profileGroupCode, string salesSupervisorCode, string departmentCode, string visitTypeCode, string currentCompanyCode, Nullable<bool> actived, Nullable<bool> isReport, Nullable<int> pageSize, Nullable<int> pageNumber, ObjectParameter filteredResultsCount, string completedEmployee, Nullable<System.Guid> provinceId, Nullable<System.Guid> districtId, Nullable<System.Guid> wardId, string profileCode, string profileName)
        {
            var serviceTechnicalTeamCodeParameter = serviceTechnicalTeamCode != null ?
                new ObjectParameter("ServiceTechnicalTeamCode", serviceTechnicalTeamCode) :
                new ObjectParameter("ServiceTechnicalTeamCode", typeof(string));
    
            var taskCodeParameter = taskCode.HasValue ?
                new ObjectParameter("TaskCode", taskCode) :
                new ObjectParameter("TaskCode", typeof(int));
    
            var summaryParameter = summary != null ?
                new ObjectParameter("Summary", summary) :
                new ObjectParameter("Summary", typeof(string));
    
            var workFlowIdParameter = workFlowId.HasValue ?
                new ObjectParameter("WorkFlowId", workFlowId) :
                new ObjectParameter("WorkFlowId", typeof(System.Guid));
    
            var taskStatusCodeParameter = taskStatusCode != null ?
                new ObjectParameter("TaskStatusCode", taskStatusCode) :
                new ObjectParameter("TaskStatusCode", typeof(string));
    
            var taskProcessCodeParameter = taskProcessCode != null ?
                new ObjectParameter("TaskProcessCode", taskProcessCode) :
                new ObjectParameter("TaskProcessCode", typeof(string));
    
            var reporterParameter = reporter != null ?
                new ObjectParameter("Reporter", reporter) :
                new ObjectParameter("Reporter", typeof(string));
    
            var assigneeParameter = assignee != null ?
                new ObjectParameter("Assignee", assignee) :
                new ObjectParameter("Assignee", typeof(string));
    
            var profileIdParameter = profileId.HasValue ?
                new ObjectParameter("ProfileId", profileId) :
                new ObjectParameter("ProfileId", typeof(System.Guid));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var createByParameter = createBy != null ?
                new ObjectParameter("CreateBy", createBy) :
                new ObjectParameter("CreateBy", typeof(string));
    
            var priorityCodeParameter = priorityCode != null ?
                new ObjectParameter("PriorityCode", priorityCode) :
                new ObjectParameter("PriorityCode", typeof(string));
    
            var createdFromDateParameter = createdFromDate.HasValue ?
                new ObjectParameter("CreatedFromDate", createdFromDate) :
                new ObjectParameter("CreatedFromDate", typeof(System.DateTime));
    
            var createdToDateParameter = createdToDate.HasValue ?
                new ObjectParameter("CreatedToDate", createdToDate) :
                new ObjectParameter("CreatedToDate", typeof(System.DateTime));
    
            var receiveFromDateParameter = receiveFromDate.HasValue ?
                new ObjectParameter("ReceiveFromDate", receiveFromDate) :
                new ObjectParameter("ReceiveFromDate", typeof(System.DateTime));
    
            var receiveToDateParameter = receiveToDate.HasValue ?
                new ObjectParameter("ReceiveToDate", receiveToDate) :
                new ObjectParameter("ReceiveToDate", typeof(System.DateTime));
    
            var startFromDateParameter = startFromDate.HasValue ?
                new ObjectParameter("StartFromDate", startFromDate) :
                new ObjectParameter("StartFromDate", typeof(System.DateTime));
    
            var startToDateParameter = startToDate.HasValue ?
                new ObjectParameter("StartToDate", startToDate) :
                new ObjectParameter("StartToDate", typeof(System.DateTime));
    
            var estimateEndFromDateParameter = estimateEndFromDate.HasValue ?
                new ObjectParameter("EstimateEndFromDate", estimateEndFromDate) :
                new ObjectParameter("EstimateEndFromDate", typeof(System.DateTime));
    
            var estimateEndToDateParameter = estimateEndToDate.HasValue ?
                new ObjectParameter("EstimateEndToDate", estimateEndToDate) :
                new ObjectParameter("EstimateEndToDate", typeof(System.DateTime));
    
            var endFromDateParameter = endFromDate.HasValue ?
                new ObjectParameter("EndFromDate", endFromDate) :
                new ObjectParameter("EndFromDate", typeof(System.DateTime));
    
            var endToDateParameter = endToDate.HasValue ?
                new ObjectParameter("EndToDate", endToDate) :
                new ObjectParameter("EndToDate", typeof(System.DateTime));
    
            var kanbanIdParameter = kanbanId.HasValue ?
                new ObjectParameter("KanbanId", kanbanId) :
                new ObjectParameter("KanbanId", typeof(System.Guid));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var commonMistakeCodeParameter = commonMistakeCode != null ?
                new ObjectParameter("CommonMistakeCode", commonMistakeCode) :
                new ObjectParameter("CommonMistakeCode", typeof(string));
    
            var errorCodeParameter = errorCode != null ?
                new ObjectParameter("ErrorCode", errorCode) :
                new ObjectParameter("ErrorCode", typeof(string));
    
            var errorTypeCodeParameter = errorTypeCode != null ?
                new ObjectParameter("ErrorTypeCode", errorTypeCode) :
                new ObjectParameter("ErrorTypeCode", typeof(string));
    
            var constructionUnitParameter = constructionUnit.HasValue ?
                new ObjectParameter("ConstructionUnit", constructionUnit) :
                new ObjectParameter("ConstructionUnit", typeof(System.Guid));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(System.Guid));
    
            var taskProcessCode_TodoParameter = taskProcessCode_Todo.HasValue ?
                new ObjectParameter("TaskProcessCode_Todo", taskProcessCode_Todo) :
                new ObjectParameter("TaskProcessCode_Todo", typeof(bool));
    
            var taskProcessCode_ProcessingParameter = taskProcessCode_Processing.HasValue ?
                new ObjectParameter("TaskProcessCode_Processing", taskProcessCode_Processing) :
                new ObjectParameter("TaskProcessCode_Processing", typeof(bool));
    
            var taskProcessCode_IncompleteParameter = taskProcessCode_Incomplete.HasValue ?
                new ObjectParameter("TaskProcessCode_Incomplete", taskProcessCode_Incomplete) :
                new ObjectParameter("TaskProcessCode_Incomplete", typeof(bool));
    
            var taskProcessCode_CompletedOnTimeParameter = taskProcessCode_CompletedOnTime.HasValue ?
                new ObjectParameter("TaskProcessCode_CompletedOnTime", taskProcessCode_CompletedOnTime) :
                new ObjectParameter("TaskProcessCode_CompletedOnTime", typeof(bool));
    
            var taskProcessCode_CompletedExpireParameter = taskProcessCode_CompletedExpire.HasValue ?
                new ObjectParameter("TaskProcessCode_CompletedExpire", taskProcessCode_CompletedExpire) :
                new ObjectParameter("TaskProcessCode_CompletedExpire", typeof(bool));
    
            var taskProcessCode_ExpiredParameter = taskProcessCode_Expired.HasValue ?
                new ObjectParameter("TaskProcessCode_Expired", taskProcessCode_Expired) :
                new ObjectParameter("TaskProcessCode_Expired", typeof(bool));
    
            var domainImageWorkFlowParameter = domainImageWorkFlow != null ?
                new ObjectParameter("DomainImageWorkFlow", domainImageWorkFlow) :
                new ObjectParameter("DomainImageWorkFlow", typeof(string));
    
            var productCategoryCodeParameter = productCategoryCode != null ?
                new ObjectParameter("ProductCategoryCode", productCategoryCode) :
                new ObjectParameter("ProductCategoryCode", typeof(string));
    
            var profileGroupCodeParameter = profileGroupCode != null ?
                new ObjectParameter("ProfileGroupCode", profileGroupCode) :
                new ObjectParameter("ProfileGroupCode", typeof(string));
    
            var salesSupervisorCodeParameter = salesSupervisorCode != null ?
                new ObjectParameter("SalesSupervisorCode", salesSupervisorCode) :
                new ObjectParameter("SalesSupervisorCode", typeof(string));
    
            var departmentCodeParameter = departmentCode != null ?
                new ObjectParameter("DepartmentCode", departmentCode) :
                new ObjectParameter("DepartmentCode", typeof(string));
    
            var visitTypeCodeParameter = visitTypeCode != null ?
                new ObjectParameter("VisitTypeCode", visitTypeCode) :
                new ObjectParameter("VisitTypeCode", typeof(string));
    
            var currentCompanyCodeParameter = currentCompanyCode != null ?
                new ObjectParameter("CurrentCompanyCode", currentCompanyCode) :
                new ObjectParameter("CurrentCompanyCode", typeof(string));
    
            var activedParameter = actived.HasValue ?
                new ObjectParameter("Actived", actived) :
                new ObjectParameter("Actived", typeof(bool));
    
            var isReportParameter = isReport.HasValue ?
                new ObjectParameter("IsReport", isReport) :
                new ObjectParameter("IsReport", typeof(bool));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var completedEmployeeParameter = completedEmployee != null ?
                new ObjectParameter("CompletedEmployee", completedEmployee) :
                new ObjectParameter("CompletedEmployee", typeof(string));
    
            var provinceIdParameter = provinceId.HasValue ?
                new ObjectParameter("ProvinceId", provinceId) :
                new ObjectParameter("ProvinceId", typeof(System.Guid));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(System.Guid));
    
            var wardIdParameter = wardId.HasValue ?
                new ObjectParameter("WardId", wardId) :
                new ObjectParameter("WardId", typeof(System.Guid));
    
            var profileCodeParameter = profileCode != null ?
                new ObjectParameter("ProfileCode", profileCode) :
                new ObjectParameter("ProfileCode", typeof(string));
    
            var profileNameParameter = profileName != null ?
                new ObjectParameter("ProfileName", profileName) :
                new ObjectParameter("ProfileName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SearchTask_bak", serviceTechnicalTeamCodeParameter, taskCodeParameter, summaryParameter, workFlowIdParameter, taskStatusCodeParameter, taskProcessCodeParameter, reporterParameter, assigneeParameter, profileIdParameter, companyIdParameter, createByParameter, priorityCodeParameter, createdFromDateParameter, createdToDateParameter, receiveFromDateParameter, receiveToDateParameter, startFromDateParameter, startToDateParameter, estimateEndFromDateParameter, estimateEndToDateParameter, endFromDateParameter, endToDateParameter, kanbanIdParameter, typeParameter, commonMistakeCodeParameter, errorCodeParameter, errorTypeCodeParameter, constructionUnitParameter, accountIdParameter, taskProcessCode_TodoParameter, taskProcessCode_ProcessingParameter, taskProcessCode_IncompleteParameter, taskProcessCode_CompletedOnTimeParameter, taskProcessCode_CompletedExpireParameter, taskProcessCode_ExpiredParameter, domainImageWorkFlowParameter, productCategoryCodeParameter, profileGroupCodeParameter, salesSupervisorCodeParameter, departmentCodeParameter, visitTypeCodeParameter, currentCompanyCodeParameter, activedParameter, isReportParameter, pageSizeParameter, pageNumberParameter, filteredResultsCount, completedEmployeeParameter, provinceIdParameter, districtIdParameter, wardIdParameter, profileCodeParameter, profileNameParameter);
        }
    
        public virtual int usp_SearchTTLSX(string lSXDT, string lSXSAP, string productCode, string productName, Nullable<int> pageSize, Nullable<int> pageNumber, ObjectParameter filteredResultsCount)
        {
            var lSXDTParameter = lSXDT != null ?
                new ObjectParameter("LSXDT", lSXDT) :
                new ObjectParameter("LSXDT", typeof(string));
    
            var lSXSAPParameter = lSXSAP != null ?
                new ObjectParameter("LSXSAP", lSXSAP) :
                new ObjectParameter("LSXSAP", typeof(string));
    
            var productCodeParameter = productCode != null ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(string));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SearchTTLSX", lSXDTParameter, lSXSAPParameter, productCodeParameter, productNameParameter, pageSizeParameter, pageNumberParameter, filteredResultsCount);
        }
    }
}
