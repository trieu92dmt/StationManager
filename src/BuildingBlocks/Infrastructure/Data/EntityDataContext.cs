// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Infrastructure.Models;
using Microsoft.EntityFrameworkCore;

namespace Infrastructure.Data
{
    public partial class EntityDataContext : DbContext
    {
        public EntityDataContext()
        {
        }

        public EntityDataContext(DbContextOptions<EntityDataContext> options)
            : base(options)
        {
        }

        public virtual DbSet<APIModel> APIModel { get; set; }
        public virtual DbSet<AccessoryCategoryModel> AccessoryCategoryModel { get; set; }
        public virtual DbSet<AccessoryDetailModel> AccessoryDetailModel { get; set; }
        public virtual DbSet<AccessoryModel> AccessoryModel { get; set; }
        public virtual DbSet<AccessoryPriceModel> AccessoryPriceModel { get; set; }
        public virtual DbSet<AccessorySaleOrderDetailModel> AccessorySaleOrderDetailModel { get; set; }
        public virtual DbSet<AccessorySaleOrderModel> AccessorySaleOrderModel { get; set; }
        public virtual DbSet<AccessorySellTypeModel> AccessorySellTypeModel { get; set; }
        public virtual DbSet<AccountModel> AccountModel { get; set; }
        public virtual DbSet<Account_Device_Mapping> Account_Device_Mapping { get; set; }
        public virtual DbSet<AggregatedCounter> AggregatedCounter { get; set; }
        public virtual DbSet<AllDepartmentModel> AllDepartmentModel { get; set; }
        public virtual DbSet<ApplicationConfig> ApplicationConfig { get; set; }
        public virtual DbSet<ApplicationLog> ApplicationLog { get; set; }
        public virtual DbSet<AppointmentModel> AppointmentModel { get; set; }
        public virtual DbSet<AssignmentModel> AssignmentModel { get; set; }
        public virtual DbSet<Assignment_ProductionOrderModel> Assignment_ProductionOrderModel { get; set; }
        public virtual DbSet<Assignment_StepModel> Assignment_StepModel { get; set; }
        public virtual DbSet<AutoConditionModel> AutoConditionModel { get; set; }
        public virtual DbSet<BC01Model> BC01Model { get; set; }
        public virtual DbSet<BC03Model> BC03Model { get; set; }
        public virtual DbSet<BC07Model> BC07Model { get; set; }
        public virtual DbSet<BC15Model> BC15Model { get; set; }
        public virtual DbSet<BC16Model> BC16Model { get; set; }
        public virtual DbSet<BC18Model> BC18Model { get; set; }
        public virtual DbSet<BC19Model> BC19Model { get; set; }
        public virtual DbSet<BOMDetailModel> BOMDetailModel { get; set; }
        public virtual DbSet<BOMHeaderModel> BOMHeaderModel { get; set; }
        public virtual DbSet<BOM_Header_InventorModel> BOM_Header_InventorModel { get; set; }
        public virtual DbSet<BOM_Item_InventorModel> BOM_Item_InventorModel { get; set; }
        public virtual DbSet<BangTinModel> BangTinModel { get; set; }
        public virtual DbSet<BannerModel> BannerModel { get; set; }
        public virtual DbSet<BookingModel> BookingModel { get; set; }
        public virtual DbSet<CampaignModel> CampaignModel { get; set; }
        public virtual DbSet<CapacityRegisterModel> CapacityRegisterModel { get; set; }
        public virtual DbSet<CareerModel> CareerModel { get; set; }
        public virtual DbSet<CatalogModel> CatalogModel { get; set; }
        public virtual DbSet<CatalogTypeModel> CatalogTypeModel { get; set; }
        public virtual DbSet<CategoryModel> CategoryModel { get; set; }
        public virtual DbSet<CategoryTypeModel> CategoryTypeModel { get; set; }
        public virtual DbSet<ChangeDataLogModel> ChangeDataLogModel { get; set; }
        public virtual DbSet<CheckInOutModel> CheckInOutModel { get; set; }
        public virtual DbSet<CheckingTimesNotificationModel> CheckingTimesNotificationModel { get; set; }
        public virtual DbSet<ClaimAccessoryLogModel> ClaimAccessoryLogModel { get; set; }
        public virtual DbSet<ClaimAccessoryModel> ClaimAccessoryModel { get; set; }
        public virtual DbSet<ClaimAccessoryStatusModel> ClaimAccessoryStatusModel { get; set; }
        public virtual DbSet<CollectingAuthorityModel> CollectingAuthorityModel { get; set; }
        public virtual DbSet<ColorModel> ColorModel { get; set; }
        public virtual DbSet<CommandQCModel> CommandQCModel { get; set; }
        public virtual DbSet<Comment_File_Mapping> Comment_File_Mapping { get; set; }
        public virtual DbSet<CompanyModel> CompanyModel { get; set; }
        public virtual DbSet<ConfigurationModel> ConfigurationModel { get; set; }
        public virtual DbSet<ConfirmStageModel> ConfirmStageModel { get; set; }
        public virtual DbSet<ConsumableMaterialsDeliveryModel> ConsumableMaterialsDeliveryModel { get; set; }
        public virtual DbSet<ContConfigModel> ContConfigModel { get; set; }
        public virtual DbSet<ContRegisterModel> ContRegisterModel { get; set; }
        public virtual DbSet<ContRegisterSO60Model> ContRegisterSO60Model { get; set; }
        public virtual DbSet<ContactDetailModel> ContactDetailModel { get; set; }
        public virtual DbSet<ContactModel> ContactModel { get; set; }
        public virtual DbSet<ContainerRequirementModel> ContainerRequirementModel { get; set; }
        public virtual DbSet<ContentModel> ContentModel { get; set; }
        public virtual DbSet<Counter> Counter { get; set; }
        public virtual DbSet<CustmdSaleModel> CustmdSaleModel { get; set; }
        public virtual DbSet<CustomerGiftDetailModel> CustomerGiftDetailModel { get; set; }
        public virtual DbSet<CustomerGiftModel> CustomerGiftModel { get; set; }
        public virtual DbSet<CustomerLevelModel> CustomerLevelModel { get; set; }
        public virtual DbSet<CustomerModel> CustomerModel { get; set; }
        public virtual DbSet<CustomerModel1> CustomerModel1 { get; set; }
        public virtual DbSet<CustomerPromotionModel> CustomerPromotionModel { get; set; }
        public virtual DbSet<CustomerTastesModel> CustomerTastesModel { get; set; }
        public virtual DbSet<CustomerTastes_CollectionModel> CustomerTastes_CollectionModel { get; set; }
        public virtual DbSet<CustomerTastes_ColorToneModel> CustomerTastes_ColorToneModel { get; set; }
        public virtual DbSet<CustomerTastes_ProductGroupModel> CustomerTastes_ProductGroupModel { get; set; }
        public virtual DbSet<CustomerTastes_WoodGrainModel> CustomerTastes_WoodGrainModel { get; set; }
        public virtual DbSet<DatatableConfig> DatatableConfig { get; set; }
        public virtual DbSet<DateClosedHistoryModel> DateClosedHistoryModel { get; set; }
        public virtual DbSet<DateClosedModel> DateClosedModel { get; set; }
        public virtual DbSet<DeliveryDetailModel> DeliveryDetailModel { get; set; }
        public virtual DbSet<DeliveryModel> DeliveryModel { get; set; }
        public virtual DbSet<DepartmentModel> DepartmentModel { get; set; }
        public virtual DbSet<Department_Equipment_Mapping> Department_Equipment_Mapping { get; set; }
        public virtual DbSet<Department_Routing_Mapping> Department_Routing_Mapping { get; set; }
        public virtual DbSet<DetailOutboundDeliveryModel> DetailOutboundDeliveryModel { get; set; }
        public virtual DbSet<DetailQCModel> DetailQCModel { get; set; }
        public virtual DbSet<DetailReservationModel> DetailReservationModel { get; set; }
        public virtual DbSet<DetailSaleOrderModel> DetailSaleOrderModel { get; set; }
        public virtual DbSet<DetailSalesDocumentModel> DetailSalesDocumentModel { get; set; }
        public virtual DbSet<DetailStageTranferModel> DetailStageTranferModel { get; set; }
        public virtual DbSet<DetailWorkOrderModel> DetailWorkOrderModel { get; set; }
        public virtual DbSet<DimDateModel> DimDateModel { get; set; }
        public virtual DbSet<DistributionChannelModel> DistributionChannelModel { get; set; }
        public virtual DbSet<DistrictModel> DistrictModel { get; set; }
        public virtual DbSet<DivisionModel> DivisionModel { get; set; }
        public virtual DbSet<EmailAccountModel> EmailAccountModel { get; set; }
        public virtual DbSet<EmailConfig> EmailConfig { get; set; }
        public virtual DbSet<EmployeeRecordModel> EmployeeRecordModel { get; set; }
        public virtual DbSet<EquimenRecordModel> EquimenRecordModel { get; set; }
        public virtual DbSet<EquipmentCardModel> EquipmentCardModel { get; set; }
        public virtual DbSet<EquipmentGroupModel> EquipmentGroupModel { get; set; }
        public virtual DbSet<EquipmentModel> EquipmentModel { get; set; }
        public virtual DbSet<EquipmentStatus_Temp> EquipmentStatus_Temp { get; set; }
        public virtual DbSet<ErrorListModel> ErrorListModel { get; set; }
        public virtual DbSet<ExcelLogModel> ExcelLogModel { get; set; }
        public virtual DbSet<FaceCheckInOutModel> FaceCheckInOutModel { get; set; }
        public virtual DbSet<FavoriteReportModel> FavoriteReportModel { get; set; }
        public virtual DbSet<FileAttachmentModel> FileAttachmentModel { get; set; }
        public virtual DbSet<FixingTypeModel> FixingTypeModel { get; set; }
        public virtual DbSet<FunctionModel> FunctionModel { get; set; }
        public virtual DbSet<GH_NotificationModel> GH_NotificationModel { get; set; }
        public virtual DbSet<GoodsReceiptModel> GoodsReceiptModel { get; set; }
        public virtual DbSet<GoodsReturnModel> GoodsReturnModel { get; set; }
        public virtual DbSet<HangTagModel> HangTagModel { get; set; }
        public virtual DbSet<Hash> Hash { get; set; }
        public virtual DbSet<HeaderSaleOrderModel> HeaderSaleOrderModel { get; set; }
        public virtual DbSet<HistoryModel> HistoryModel { get; set; }
        public virtual DbSet<InhouseTransferModel> InhouseTransferModel { get; set; }
        public virtual DbSet<IssueForProductionModel> IssueForProductionModel { get; set; }
        public virtual DbSet<Job> Job { get; set; }
        public virtual DbSet<JobParameter> JobParameter { get; set; }
        public virtual DbSet<JobQueue> JobQueue { get; set; }
        public virtual DbSet<KanbanDetailModel> KanbanDetailModel { get; set; }
        public virtual DbSet<KanbanModel> KanbanModel { get; set; }
        public virtual DbSet<Kanban_TaskStatus_Mapping> Kanban_TaskStatus_Mapping { get; set; }
        public virtual DbSet<LaborModel> LaborModel { get; set; }
        public virtual DbSet<LastRunCheckInOutModel> LastRunCheckInOutModel { get; set; }
        public virtual DbSet<List> List { get; set; }
        public virtual DbSet<LogApiModel> LogApiModel { get; set; }
        public virtual DbSet<Log_BC01Model> Log_BC01Model { get; set; }
        public virtual DbSet<Log_BC18Model> Log_BC18Model { get; set; }
        public virtual DbSet<MachineChainModel> MachineChainModel { get; set; }
        public virtual DbSet<MailServerProviderModel> MailServerProviderModel { get; set; }
        public virtual DbSet<MarmModel> MarmModel { get; set; }
        public virtual DbSet<MatchCardCommandModel> MatchCardCommandModel { get; set; }
        public virtual DbSet<MaterialDocumentModel> MaterialDocumentModel { get; set; }
        public virtual DbSet<MaterialGroupModel> MaterialGroupModel { get; set; }
        public virtual DbSet<MaterialModel> MaterialModel { get; set; }
        public virtual DbSet<MaterialTypeModel> MaterialTypeModel { get; set; }
        public virtual DbSet<MaterialTypeModel1> MaterialTypeModel1 { get; set; }
        public virtual DbSet<MemberOfExternalProfileTargetGroupModel> MemberOfExternalProfileTargetGroupModel { get; set; }
        public virtual DbSet<MemberOfTargetGroupModel> MemberOfTargetGroupModel { get; set; }
        public virtual DbSet<MenuModel> MenuModel { get; set; }
        public virtual DbSet<MesSyncLogModel> MesSyncLogModel { get; set; }
        public virtual DbSet<MigoModel> MigoModel { get; set; }
        public virtual DbSet<MobileScreenModel> MobileScreenModel { get; set; }
        public virtual DbSet<MobileScreenPermissionModel> MobileScreenPermissionModel { get; set; }
        public virtual DbSet<ModuleModel> ModuleModel { get; set; }
        public virtual DbSet<MoldRecordModel> MoldRecordModel { get; set; }
        public virtual DbSet<NFCCheckInOutModel> NFCCheckInOutModel { get; set; }
        public virtual DbSet<NewsCategoryModel> NewsCategoryModel { get; set; }
        public virtual DbSet<NewsModel> NewsModel { get; set; }
        public virtual DbSet<News_Company_Mapping> News_Company_Mapping { get; set; }
        public virtual DbSet<NotificationAccountMappingModel> NotificationAccountMappingModel { get; set; }
        public virtual DbSet<NotificationModel> NotificationModel { get; set; }
        public virtual DbSet<OrderTypeModel> OrderTypeModel { get; set; }
        public virtual DbSet<OutboundDeliveryModel> OutboundDeliveryModel { get; set; }
        public virtual DbSet<OutputRecordModel> OutputRecordModel { get; set; }
        public virtual DbSet<POTEXT_PR_SO_Model> POTEXT_PR_SO_Model { get; set; }
        public virtual DbSet<PageModel> PageModel { get; set; }
        public virtual DbSet<PagePermissionModel> PagePermissionModel { get; set; }
        public virtual DbSet<Page_Module_Mapping> Page_Module_Mapping { get; set; }
        public virtual DbSet<PartnerModel> PartnerModel { get; set; }
        public virtual DbSet<PaymentMethodModel> PaymentMethodModel { get; set; }
        public virtual DbSet<PaymentNationalBudgetModel> PaymentNationalBudgetModel { get; set; }
        public virtual DbSet<PeriodicallyCheckingModel> PeriodicallyCheckingModel { get; set; }
        public virtual DbSet<PersonInChargeDeletedModel> PersonInChargeDeletedModel { get; set; }
        public virtual DbSet<PersonInChargeModel> PersonInChargeModel { get; set; }
        public virtual DbSet<PhysicsWorkShopModel> PhysicsWorkShopModel { get; set; }
        public virtual DbSet<PlantModel> PlantModel { get; set; }
        public virtual DbSet<PlantRoutingConfigModel> PlantRoutingConfigModel { get; set; }
        public virtual DbSet<PlateFeeDetailModel> PlateFeeDetailModel { get; set; }
        public virtual DbSet<PlateFeeModel> PlateFeeModel { get; set; }
        public virtual DbSet<PrintMoldModel> PrintMoldModel { get; set; }
        public virtual DbSet<ProductGroupModel> ProductGroupModel { get; set; }
        public virtual DbSet<ProductHierarchyModel> ProductHierarchyModel { get; set; }
        public virtual DbSet<ProductModel> ProductModel { get; set; }
        public virtual DbSet<ProductModel1> ProductModel1 { get; set; }
        public virtual DbSet<ProductVersionModel> ProductVersionModel { get; set; }
        public virtual DbSet<ProductWarrantyModel> ProductWarrantyModel { get; set; }
        public virtual DbSet<Product_Routing_Mapping> Product_Routing_Mapping { get; set; }
        public virtual DbSet<Product_Routing_Mapping_Deleted> Product_Routing_Mapping_Deleted { get; set; }
        public virtual DbSet<Product_Routing_Mold_Mapping> Product_Routing_Mold_Mapping { get; set; }
        public virtual DbSet<Product_Routing_Mold_Mapping_Deleted> Product_Routing_Mold_Mapping_Deleted { get; set; }
        public virtual DbSet<ProductionComponent80Model> ProductionComponent80Model { get; set; }
        public virtual DbSet<ProductionComponentModel> ProductionComponentModel { get; set; }
        public virtual DbSet<ProductionOperation80Model> ProductionOperation80Model { get; set; }
        public virtual DbSet<ProductionOperationModel> ProductionOperationModel { get; set; }
        public virtual DbSet<ProductionOrder80Model> ProductionOrder80Model { get; set; }
        public virtual DbSet<ProductionOrderModel> ProductionOrderModel { get; set; }
        public virtual DbSet<ProfileBAttributeModel> ProfileBAttributeModel { get; set; }
        public virtual DbSet<ProfileCAttributeModel> ProfileCAttributeModel { get; set; }
        public virtual DbSet<ProfileCareerModel> ProfileCareerModel { get; set; }
        public virtual DbSet<ProfileCategoryModel> ProfileCategoryModel { get; set; }
        public virtual DbSet<ProfileConfigModel> ProfileConfigModel { get; set; }
        public virtual DbSet<ProfileContactAttributeDeletedModel> ProfileContactAttributeDeletedModel { get; set; }
        public virtual DbSet<ProfileContactAttributeModel> ProfileContactAttributeModel { get; set; }
        public virtual DbSet<ProfileDeletedModel> ProfileDeletedModel { get; set; }
        public virtual DbSet<ProfileEmailDeletedModel> ProfileEmailDeletedModel { get; set; }
        public virtual DbSet<ProfileEmailModel> ProfileEmailModel { get; set; }
        public virtual DbSet<ProfileFieldModel> ProfileFieldModel { get; set; }
        public virtual DbSet<ProfileGroupModel> ProfileGroupModel { get; set; }
        public virtual DbSet<ProfileLevelModel> ProfileLevelModel { get; set; }
        public virtual DbSet<ProfileModel> ProfileModel { get; set; }
        public virtual DbSet<ProfilePhoneDeletedModel> ProfilePhoneDeletedModel { get; set; }
        public virtual DbSet<ProfilePhoneModel> ProfilePhoneModel { get; set; }
        public virtual DbSet<ProfileTypeModel> ProfileTypeModel { get; set; }
        public virtual DbSet<Profile_File_Mapping> Profile_File_Mapping { get; set; }
        public virtual DbSet<Profile_Opportunity_CompetitorModel> Profile_Opportunity_CompetitorModel { get; set; }
        public virtual DbSet<Profile_Opportunity_InternalModel> Profile_Opportunity_InternalModel { get; set; }
        public virtual DbSet<Profile_Opportunity_MaterialModel> Profile_Opportunity_MaterialModel { get; set; }
        public virtual DbSet<Profile_Opportunity_PartnerModel> Profile_Opportunity_PartnerModel { get; set; }
        public virtual DbSet<ProfitCenterModel> ProfitCenterModel { get; set; }
        public virtual DbSet<PrognosisModel> PrognosisModel { get; set; }
        public virtual DbSet<PromotionByStoreModel> PromotionByStoreModel { get; set; }
        public virtual DbSet<PromotionGiftAccessoryModel> PromotionGiftAccessoryModel { get; set; }
        public virtual DbSet<PromotionModel> PromotionModel { get; set; }
        public virtual DbSet<ProspectModel> ProspectModel { get; set; }
        public virtual DbSet<ProvinceModel> ProvinceModel { get; set; }
        public virtual DbSet<PurchaseOrderDetailModel> PurchaseOrderDetailModel { get; set; }
        public virtual DbSet<PurchaseOrderMasterModel> PurchaseOrderMasterModel { get; set; }
        public virtual DbSet<PurchaseOrderModel> PurchaseOrderModel { get; set; }
        public virtual DbSet<PurchaseRequisitionModel> PurchaseRequisitionModel { get; set; }
        public virtual DbSet<PurchasingGroupModel> PurchasingGroupModel { get; set; }
        public virtual DbSet<PurchasingOrgModel> PurchasingOrgModel { get; set; }
        public virtual DbSet<QualityControlDetailModel> QualityControlDetailModel { get; set; }
        public virtual DbSet<QualityControlInformationModel> QualityControlInformationModel { get; set; }
        public virtual DbSet<QualityControlModel> QualityControlModel { get; set; }
        public virtual DbSet<QualityControl_Error_File_Mapping> QualityControl_Error_File_Mapping { get; set; }
        public virtual DbSet<QualityControl_Error_Mapping> QualityControl_Error_Mapping { get; set; }
        public virtual DbSet<QualityControl_FileAttachment_Mapping> QualityControl_FileAttachment_Mapping { get; set; }
        public virtual DbSet<QualityControl_QCInformation_File_Mapping> QualityControl_QCInformation_File_Mapping { get; set; }
        public virtual DbSet<QualityControl_QCInformation_Mapping> QualityControl_QCInformation_Mapping { get; set; }
        public virtual DbSet<QuestionBankModel> QuestionBankModel { get; set; }
        public virtual DbSet<RatingModel> RatingModel { get; set; }
        public virtual DbSet<ReceiptFromProductionModel> ReceiptFromProductionModel { get; set; }
        public virtual DbSet<RefreshToken> RefreshToken { get; set; }
        public virtual DbSet<RegisterReceiveNewsModel> RegisterReceiveNewsModel { get; set; }
        public virtual DbSet<RemindTaskModel> RemindTaskModel { get; set; }
        public virtual DbSet<RequestEccEmailConfigModel> RequestEccEmailConfigModel { get; set; }
        public virtual DbSet<ReservationModel> ReservationModel { get; set; }
        public virtual DbSet<ReservationModel1> ReservationModel1 { get; set; }
        public virtual DbSet<ResourceModel> ResourceModel { get; set; }
        public virtual DbSet<RoleInChargeDeletedModel> RoleInChargeDeletedModel { get; set; }
        public virtual DbSet<RoleInChargeModel> RoleInChargeModel { get; set; }
        public virtual DbSet<RolesModel> RolesModel { get; set; }
        public virtual DbSet<RoutingInventorModel> RoutingInventorModel { get; set; }
        public virtual DbSet<RoutingModel> RoutingModel { get; set; }
        public virtual DbSet<RoutingSapModel> RoutingSapModel { get; set; }
        public virtual DbSet<Routing_Equipment_Mapping> Routing_Equipment_Mapping { get; set; }
        public virtual DbSet<SMSModel> SMSModel { get; set; }
        public virtual DbSet<SO100ScheduleLineModel> SO100ScheduleLineModel { get; set; }
        public virtual DbSet<SO100TextModel> SO100TextModel { get; set; }
        public virtual DbSet<SO80ScheduleLineModel> SO80ScheduleLineModel { get; set; }
        public virtual DbSet<SO80TextModel> SO80TextModel { get; set; }
        public virtual DbSet<SOTEXT_PR_Model> SOTEXT_PR_Model { get; set; }
        public virtual DbSet<SOTextHeader100Model> SOTextHeader100Model { get; set; }
        public virtual DbSet<SOTextHeader80Model> SOTextHeader80Model { get; set; }
        public virtual DbSet<SOTextItem100Model> SOTextItem100Model { get; set; }
        public virtual DbSet<SOTextItem80Model> SOTextItem80Model { get; set; }
        public virtual DbSet<SaleOrderDetailModel> SaleOrderDetailModel { get; set; }
        public virtual DbSet<SaleOrderHeader100Model> SaleOrderHeader100Model { get; set; }
        public virtual DbSet<SaleOrderHeader80Model> SaleOrderHeader80Model { get; set; }
        public virtual DbSet<SaleOrderItem100Model> SaleOrderItem100Model { get; set; }
        public virtual DbSet<SaleOrderItem80Model> SaleOrderItem80Model { get; set; }
        public virtual DbSet<SaleOrderMasterModel> SaleOrderMasterModel { get; set; }
        public virtual DbSet<SaleOrgModel> SaleOrgModel { get; set; }
        public virtual DbSet<SaleProcessModel> SaleProcessModel { get; set; }
        public virtual DbSet<SaleUnitModel> SaleUnitModel { get; set; }
        public virtual DbSet<SalesDocumentModel> SalesDocumentModel { get; set; }
        public virtual DbSet<SalesEmployeeModel> SalesEmployeeModel { get; set; }
        public virtual DbSet<SalesOfficeModel> SalesOfficeModel { get; set; }
        public virtual DbSet<ScaleModel> ScaleModel { get; set; }
        public virtual DbSet<Schema> Schema { get; set; }
        public virtual DbSet<ScrapFromProductionModel> ScrapFromProductionModel { get; set; }
        public virtual DbSet<SearchResultDetailTemplateModel> SearchResultDetailTemplateModel { get; set; }
        public virtual DbSet<SearchResultTemplateModel> SearchResultTemplateModel { get; set; }
        public virtual DbSet<SearchTemplateModel> SearchTemplateModel { get; set; }
        public virtual DbSet<SendMailCalendarModel> SendMailCalendarModel { get; set; }
        public virtual DbSet<Server> Server { get; set; }
        public virtual DbSet<ServiceAppointmentModel> ServiceAppointmentModel { get; set; }
        public virtual DbSet<ServiceFlagModel> ServiceFlagModel { get; set; }
        public virtual DbSet<ServiceOrderConsultModel> ServiceOrderConsultModel { get; set; }
        public virtual DbSet<ServiceOrderDetailAccessoryModel> ServiceOrderDetailAccessoryModel { get; set; }
        public virtual DbSet<ServiceOrderDetailModel> ServiceOrderDetailModel { get; set; }
        public virtual DbSet<ServiceOrderDetailServiceModel> ServiceOrderDetailServiceModel { get; set; }
        public virtual DbSet<ServiceOrderModel> ServiceOrderModel { get; set; }
        public virtual DbSet<ServiceOrderPoolModel> ServiceOrderPoolModel { get; set; }
        public virtual DbSet<ServiceOrderTypeModel> ServiceOrderTypeModel { get; set; }
        public virtual DbSet<ServiceTypeModel> ServiceTypeModel { get; set; }
        public virtual DbSet<Set> Set { get; set; }
        public virtual DbSet<ShippingPointModel> ShippingPointModel { get; set; }
        public virtual DbSet<ShowroomCategoryModel> ShowroomCategoryModel { get; set; }
        public virtual DbSet<SourceModel> SourceModel { get; set; }
        public virtual DbSet<SpecificationsModel> SpecificationsModel { get; set; }
        public virtual DbSet<StageTransferModel> StageTransferModel { get; set; }
        public virtual DbSet<State> State { get; set; }
        public virtual DbSet<StateTreasuryModel> StateTreasuryModel { get; set; }
        public virtual DbSet<StatusTransitionModel> StatusTransitionModel { get; set; }
        public virtual DbSet<StatusTransition_Task_Mapping> StatusTransition_Task_Mapping { get; set; }
        public virtual DbSet<StockModel> StockModel { get; set; }
        public virtual DbSet<StockReceivingDetailModel> StockReceivingDetailModel { get; set; }
        public virtual DbSet<StockReceivingMasterModel> StockReceivingMasterModel { get; set; }
        public virtual DbSet<StockTransferRequestDetailModel> StockTransferRequestDetailModel { get; set; }
        public virtual DbSet<StockTransferRequestModel> StockTransferRequestModel { get; set; }
        public virtual DbSet<Stock_Store_Mapping> Stock_Store_Mapping { get; set; }
        public virtual DbSet<StorageLocationModel> StorageLocationModel { get; set; }
        public virtual DbSet<StoreModel> StoreModel { get; set; }
        public virtual DbSet<StoreTypeModel> StoreTypeModel { get; set; }
        public virtual DbSet<StyleModel> StyleModel { get; set; }
        public virtual DbSet<TargetGroupModel> TargetGroupModel { get; set; }
        public virtual DbSet<TaskAssignModel> TaskAssignModel { get; set; }
        public virtual DbSet<TaskCommentModel> TaskCommentModel { get; set; }
        public virtual DbSet<TaskContactModel> TaskContactModel { get; set; }
        public virtual DbSet<TaskGroupDetailModel> TaskGroupDetailModel { get; set; }
        public virtual DbSet<TaskGroupModel> TaskGroupModel { get; set; }
        public virtual DbSet<TaskModel> TaskModel { get; set; }
        public virtual DbSet<TaskReferenceModel> TaskReferenceModel { get; set; }
        public virtual DbSet<TaskReporterModel> TaskReporterModel { get; set; }
        public virtual DbSet<TaskRoleInChargeModel> TaskRoleInChargeModel { get; set; }
        public virtual DbSet<TaskStatusModel> TaskStatusModel { get; set; }
        public virtual DbSet<Task_Component_Mapping> Task_Component_Mapping { get; set; }
        public virtual DbSet<Task_File_Mapping> Task_File_Mapping { get; set; }
        public virtual DbSet<Task_Mold_Mapping> Task_Mold_Mapping { get; set; }
        public virtual DbSet<TaxConfigModel> TaxConfigModel { get; set; }
        public virtual DbSet<TemperatureConditionModel> TemperatureConditionModel { get; set; }
        public virtual DbSet<TemplateAndGiftCampaignModel> TemplateAndGiftCampaignModel { get; set; }
        public virtual DbSet<TemplateAndGiftMemberAddressModel> TemplateAndGiftMemberAddressModel { get; set; }
        public virtual DbSet<TemplateAndGiftMemberModel> TemplateAndGiftMemberModel { get; set; }
        public virtual DbSet<TemplateAndGiftTargetGroupModel> TemplateAndGiftTargetGroupModel { get; set; }
        public virtual DbSet<TestTargetModel> TestTargetModel { get; set; }
        public virtual DbSet<ThucThiLenhSanXuatModel> ThucThiLenhSanXuatModel { get; set; }
        public virtual DbSet<TransferDetailModel> TransferDetailModel { get; set; }
        public virtual DbSet<TransferModel> TransferModel { get; set; }
        public virtual DbSet<TruckInfoModel> TruckInfoModel { get; set; }
        public virtual DbSet<Unfollow> Unfollow { get; set; }
        public virtual DbSet<VIEW_TonKhoTheo_SO_CongDoan> VIEW_TonKhoTheo_SO_CongDoan { get; set; }
        public virtual DbSet<VehicleInfoModel> VehicleInfoModel { get; set; }
        public virtual DbSet<VendorModel> VendorModel { get; set; }
        public virtual DbSet<View_BOM_Inventor_Rip> View_BOM_Inventor_Rip { get; set; }
        public virtual DbSet<View_Catalog_Category> View_Catalog_Category { get; set; }
        public virtual DbSet<View_FaceCheckIn> View_FaceCheckIn { get; set; }
        public virtual DbSet<View_FaceCheckOut> View_FaceCheckOut { get; set; }
        public virtual DbSet<View_MES_StockReceiving> View_MES_StockReceiving { get; set; }
        public virtual DbSet<View_PriorityModel> View_PriorityModel { get; set; }
        public virtual DbSet<View_Product_Detail> View_Product_Detail { get; set; }
        public virtual DbSet<View_Product_Material> View_Product_Material { get; set; }
        public virtual DbSet<View_ProfileDeleted_ContactPhone> View_ProfileDeleted_ContactPhone { get; set; }
        public virtual DbSet<View_Profile_Address> View_Profile_Address { get; set; }
        public virtual DbSet<View_Profile_Company_Mapping> View_Profile_Company_Mapping { get; set; }
        public virtual DbSet<View_Profile_ContactPhone> View_Profile_ContactPhone { get; set; }
        public virtual DbSet<View_Profile_ExtendInfo> View_Profile_ExtendInfo { get; set; }
        public virtual DbSet<View_Profile_MainContact> View_Profile_MainContact { get; set; }
        public virtual DbSet<View_Profile_ProfilePhone> View_Profile_ProfilePhone { get; set; }
        public virtual DbSet<View_SO_Active> View_SO_Active { get; set; }
        public virtual DbSet<View_Stock_Delivery> View_Stock_Delivery { get; set; }
        public virtual DbSet<View_Stock_Receive> View_Stock_Receive { get; set; }
        public virtual DbSet<View_Stock_TransferFrom_Delivery> View_Stock_TransferFrom_Delivery { get; set; }
        public virtual DbSet<View_Stock_TransferTo_Receive> View_Stock_TransferTo_Receive { get; set; }
        public virtual DbSet<View_Task_Area> View_Task_Area { get; set; }
        public virtual DbSet<View_Task_GTB> View_Task_GTB { get; set; }
        public virtual DbSet<WardModel> WardModel { get; set; }
        public virtual DbSet<WarehouseModel> WarehouseModel { get; set; }
        public virtual DbSet<WarehouseTransferModel> WarehouseTransferModel { get; set; }
        public virtual DbSet<WarrantyModel> WarrantyModel { get; set; }
        public virtual DbSet<WeighModel> WeighModel { get; set; }
        public virtual DbSet<WeighSessionDetailModel> WeighSessionDetailModel { get; set; }
        public virtual DbSet<WeighSessionModel> WeighSessionModel { get; set; }
        public virtual DbSet<WeighingSessionDetailModel> WeighingSessionDetailModel { get; set; }
        public virtual DbSet<WeighingSessionModel> WeighingSessionModel { get; set; }
        public virtual DbSet<WorkCenterModel> WorkCenterModel { get; set; }
        public virtual DbSet<WorkFlowCategoryModel> WorkFlowCategoryModel { get; set; }
        public virtual DbSet<WorkFlowConfigModel> WorkFlowConfigModel { get; set; }
        public virtual DbSet<WorkFlowFieldModel> WorkFlowFieldModel { get; set; }
        public virtual DbSet<WorkFlowModel> WorkFlowModel { get; set; }
        public virtual DbSet<WorkOrderModel> WorkOrderModel { get; set; }
        public virtual DbSet<WorkShopModel> WorkShopModel { get; set; }
        public virtual DbSet<WorkingDateModel> WorkingDateModel { get; set; }
        public virtual DbSet<WorkingTimeConfigModel> WorkingTimeConfigModel { get; set; }
        public virtual DbSet<WorkingTimeDetailModel> WorkingTimeDetailModel { get; set; }
        public virtual DbSet<WorkingTimeModel> WorkingTimeModel { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=192.168.100.233;Initial Catalog=TLG_MES;Persist Security Info=True;User ID=isd;Password=pm123@abcd");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AccessoryCategoryModel>(entity =>
            {
                entity.Property(e => e.AccessoryCategoryId).ValueGeneratedNever();
            });

            modelBuilder.Entity<AccessoryDetailModel>(entity =>
            {
                entity.Property(e => e.AccessoryDetailId).ValueGeneratedNever();

                entity.HasOne(d => d.Accessory)
                    .WithMany(p => p.AccessoryDetailModel)
                    .HasForeignKey(d => d.AccessoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccessoryDetailModel_AccessoryModel");
            });

            modelBuilder.Entity<AccessoryModel>(entity =>
            {
                entity.Property(e => e.AccessoryId).ValueGeneratedNever();
            });

            modelBuilder.Entity<AccessoryPriceModel>(entity =>
            {
                entity.Property(e => e.AccessoryPriceId).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<AccessorySaleOrderDetailModel>(entity =>
            {
                entity.Property(e => e.AccessorySaleOrderDetailId).ValueGeneratedNever();

                entity.HasOne(d => d.AccessorySaleOrder)
                    .WithMany(p => p.AccessorySaleOrderDetailModel)
                    .HasForeignKey(d => d.AccessorySaleOrderId)
                    .HasConstraintName("FK_AccessorySaleOrderDetailModel_AccessorySaleOrderModel");
            });

            modelBuilder.Entity<AccessorySaleOrderModel>(entity =>
            {
                entity.Property(e => e.AccessorySaleOrderId).ValueGeneratedNever();

                entity.Property(e => e.GeneratedCode).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.AccessorySaleOrderModel)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_AccessorySaleOrderModel_CustomerModel");

                entity.HasOne(d => d.Vehicle)
                    .WithMany(p => p.AccessorySaleOrderModel)
                    .HasForeignKey(d => d.VehicleId)
                    .HasConstraintName("FK_AccessorySaleOrderModel_VehicleInfoModel");
            });

            modelBuilder.Entity<AccessorySellTypeModel>(entity =>
            {
                entity.Property(e => e.AccessorySellTypeId).ValueGeneratedNever();

                entity.Property(e => e.Actived).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<AccountModel>(entity =>
            {
                entity.Property(e => e.AccountId).ValueGeneratedNever();

                entity.HasMany(d => d.Roles)
                    .WithMany(p => p.Account)
                    .UsingEntity<Dictionary<string, object>>(
                        "AccountInRoleModel",
                        l => l.HasOne<RolesModel>().WithMany().HasForeignKey("RolesId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_AccountInRoleModel_RolesModel"),
                        r => r.HasOne<AccountModel>().WithMany().HasForeignKey("AccountId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_AccountInRoleModel_AccountModel"),
                        j =>
                        {
                            j.HasKey("AccountId", "RolesId");

                            j.ToTable("AccountInRoleModel", "pms");
                        });

                entity.HasMany(d => d.Store)
                    .WithMany(p => p.Account)
                    .UsingEntity<Dictionary<string, object>>(
                        "AccountInStoreModel",
                        l => l.HasOne<StoreModel>().WithMany().HasForeignKey("StoreId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_AccountInStoreModel_StoreModel"),
                        r => r.HasOne<AccountModel>().WithMany().HasForeignKey("AccountId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_AccountInStoreModel_AccountModel"),
                        j =>
                        {
                            j.HasKey("AccountId", "StoreId");

                            j.ToTable("AccountInStoreModel", "pms");
                        });
            });

            modelBuilder.Entity<Account_Device_Mapping>(entity =>
            {
                entity.HasKey(e => new { e.AccountId, e.DeviceId });
            });

            modelBuilder.Entity<AggregatedCounter>(entity =>
            {
                entity.HasKey(e => e.Key)
                    .HasName("PK_HangFire_CounterAggregated");

                entity.HasIndex(e => e.ExpireAt, "IX_HangFire_AggregatedCounter_ExpireAt")
                    .HasFilter("([ExpireAt] IS NOT NULL)");
            });

            modelBuilder.Entity<AllDepartmentModel>(entity =>
            {
                entity.HasKey(e => e.AllDepartmentId)
                    .HasName("PK_AllDeparmentModel");

                entity.Property(e => e.AllDepartmentId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ApplicationLog>(entity =>
            {
                entity.Property(e => e.ApplicationLogId).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.PerformedBy_Account)
                    .WithMany(p => p.ApplicationLog)
                    .HasForeignKey(d => d.PerformedBy_AccountId)
                    .HasConstraintName("FK_ApplicationLog_AccountModel");
            });

            modelBuilder.Entity<AppointmentModel>(entity =>
            {
                entity.Property(e => e.AppointmentId).ValueGeneratedNever();
            });

            modelBuilder.Entity<AssignmentModel>(entity =>
            {
                entity.Property(e => e.AssignmentId).ValueGeneratedNever();
            });

            modelBuilder.Entity<Assignment_ProductionOrderModel>(entity =>
            {
                entity.Property(e => e.AssignmentProductionOrderId).ValueGeneratedNever();
            });

            modelBuilder.Entity<Assignment_StepModel>(entity =>
            {
                entity.Property(e => e.AssignmentStepId).ValueGeneratedNever();
            });

            modelBuilder.Entity<AutoConditionModel>(entity =>
            {
                entity.Property(e => e.AutoConditionId).ValueGeneratedNever();
            });

            modelBuilder.Entity<BC01Model>(entity =>
            {
                entity.Property(e => e.BC01Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<BC03Model>(entity =>
            {
                entity.Property(e => e.BC03Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<BC07Model>(entity =>
            {
                entity.Property(e => e.BC07Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<BC15Model>(entity =>
            {
                entity.Property(e => e.BC15Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<BC16Model>(entity =>
            {
                entity.Property(e => e.BC16Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<BC18Model>(entity =>
            {
                entity.Property(e => e.BC18Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<BC19Model>(entity =>
            {
                entity.Property(e => e.BC19Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<BOMDetailModel>(entity =>
            {
                entity.HasKey(e => e.BomDetailId)
                    .HasName("PK_BomDetailModel");

                entity.Property(e => e.BomDetailId).ValueGeneratedNever();
            });

            modelBuilder.Entity<BOMHeaderModel>(entity =>
            {
                entity.HasKey(e => e.BomHeaderId)
                    .HasName("PK_BomHeaderModel");

                entity.Property(e => e.BomHeaderId).ValueGeneratedNever();
            });

            modelBuilder.Entity<BOM_Header_InventorModel>(entity =>
            {
                entity.Property(e => e.BOMHeaderInventorId).ValueGeneratedNever();
            });

            modelBuilder.Entity<BOM_Item_InventorModel>(entity =>
            {
                entity.HasKey(e => e.BOMItemInventorId)
                    .HasName("PK_MES.BOM_Item_InventorModel");

                entity.Property(e => e.BOMItemInventorId).ValueGeneratedNever();
            });

            modelBuilder.Entity<BangTinModel>(entity =>
            {
                entity.Property(e => e.NewsId).ValueGeneratedNever();

                entity.Property(e => e.NewsCode).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<BannerModel>(entity =>
            {
                entity.Property(e => e.BannerId).ValueGeneratedNever();
            });

            modelBuilder.Entity<BookingModel>(entity =>
            {
                entity.Property(e => e.BookingModelId).ValueGeneratedNever();

                entity.Property(e => e.BookingCode).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<CampaignModel>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CampaignCode).ValueGeneratedOnAdd();

                entity.Property(e => e.Type).HasComment("Marketing|Event");

                entity.HasOne(d => d.StatusNavigation)
                    .WithMany(p => p.CampaignModel)
                    .HasForeignKey(d => d.Status)
                    .HasConstraintName("FK_CampaignModel_CatalogModel");
            });

            modelBuilder.Entity<CapacityRegisterModel>(entity =>
            {
                entity.Property(e => e.CapacityRegisterId).ValueGeneratedNever();
            });

            modelBuilder.Entity<CareerModel>(entity =>
            {
                entity.Property(e => e.CareerId).ValueGeneratedNever();
            });

            modelBuilder.Entity<CatalogModel>(entity =>
            {
                entity.Property(e => e.CatalogId).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<CategoryModel>(entity =>
            {
                entity.HasKey(e => e.CategoryId)
                    .HasName("PK_Category2Model");

                entity.Property(e => e.CategoryId).ValueGeneratedNever();

                entity.HasOne(d => d.ParentCategory)
                    .WithMany(p => p.InverseParentCategory)
                    .HasForeignKey(d => d.ParentCategoryId)
                    .HasConstraintName("FK_CategoryModel_CategoryModel");
            });

            modelBuilder.Entity<CategoryTypeModel>(entity =>
            {
                entity.HasKey(e => e.CategoryTypeId)
                    .HasName("PK_CategoryType");

                entity.Property(e => e.CategoryTypeId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ChangeDataLogModel>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("PK_ChangeDataLog");

                entity.Property(e => e.LogId).ValueGeneratedNever();
            });

            modelBuilder.Entity<CheckInOutModel>(entity =>
            {
                entity.Property(e => e.CheckInOutId).ValueGeneratedNever();

                entity.HasOne(d => d.EquipmentCard)
                    .WithMany(p => p.CheckInOutModel)
                    .HasForeignKey(d => d.EquipmentCardId)
                    .HasConstraintName("FK_CheckInOutModel_EquipmentCardModel");
            });

            modelBuilder.Entity<CheckingTimesNotificationModel>(entity =>
            {
                entity.Property(e => e.CheckingTimesId).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<ClaimAccessoryLogModel>(entity =>
            {
                entity.Property(e => e.ClaimAccessoryLogId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ClaimAccessoryModel>(entity =>
            {
                entity.Property(e => e.ClaimAccessoryId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ClaimAccessoryStatusModel>(entity =>
            {
                entity.Property(e => e.StatusId).ValueGeneratedNever();
            });

            modelBuilder.Entity<CollectingAuthorityModel>(entity =>
            {
                entity.Property(e => e.CollectingAuthorityId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ColorModel>(entity =>
            {
                entity.Property(e => e.ColorId).ValueGeneratedNever();
            });

            modelBuilder.Entity<CommandQCModel>(entity =>
            {
                entity.Property(e => e.CommandQCId).ValueGeneratedNever();

                entity.Property(e => e.CommandQCCode).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.CommandQCModel)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("FK_CommandQCModel_ProductModel");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.CommandQCModel)
                    .HasForeignKey(d => d.StepId)
                    .HasConstraintName("FK_CommandQCModel_RoutingModel");
            });

            modelBuilder.Entity<Comment_File_Mapping>(entity =>
            {
                entity.HasKey(e => new { e.TaskCommentId, e.FileAttachmentId });

                entity.HasOne(d => d.FileAttachment)
                    .WithMany(p => p.Comment_File_Mapping)
                    .HasForeignKey(d => d.FileAttachmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Comment_File_Mapping_FileAttachmentModel");

                entity.HasOne(d => d.TaskComment)
                    .WithMany(p => p.Comment_File_Mapping)
                    .HasForeignKey(d => d.TaskCommentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Comment_File_Mapping_TaskCommentModel");
            });

            modelBuilder.Entity<CompanyModel>(entity =>
            {
                entity.Property(e => e.CompanyId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ConfigurationModel>(entity =>
            {
                entity.Property(e => e.ConfigurationId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ConfirmStageModel>(entity =>
            {
                entity.Property(e => e.ConfirmStageId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ConsumableMaterialsDeliveryModel>(entity =>
            {
                entity.Property(e => e.ConsumableMaterialsDeliveryId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ContConfigModel>(entity =>
            {
                entity.Property(e => e.ContConfigId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ContRegisterModel>(entity =>
            {
                entity.Property(e => e.ContRegisterId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ContRegisterSO60Model>(entity =>
            {
                entity.Property(e => e.ContRegister60Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<ContactDetailModel>(entity =>
            {
                entity.Property(e => e.ContactDetailId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ContactModel>(entity =>
            {
                entity.Property(e => e.ContactId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ContainerRequirementModel>(entity =>
            {
                entity.HasKey(e => e.ContainerRequirementCode)
                    .HasName("PK_OptionModel");

                entity.Property(e => e.Actived).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<ContentModel>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.ContentCode).ValueGeneratedOnAdd();

                entity.Property(e => e.Type).HasComment("Marketing|Event");

                entity.HasOne(d => d.CreateByNavigation)
                    .WithMany(p => p.ContentModelCreateByNavigation)
                    .HasForeignKey(d => d.CreateBy)
                    .HasConstraintName("FK_ContentModel_AccountModel");

                entity.HasOne(d => d.LastEditByNavigation)
                    .WithMany(p => p.ContentModelLastEditByNavigation)
                    .HasForeignKey(d => d.LastEditBy)
                    .HasConstraintName("FK_ContentModel_AccountModel1");
            });

            modelBuilder.Entity<Counter>(entity =>
            {
                entity.HasIndex(e => e.Key, "CX_HangFire_Counter")
                    .IsClustered();
            });

            modelBuilder.Entity<CustmdSaleModel>(entity =>
            {
                entity.Property(e => e.CustmdSaleId).ValueGeneratedNever();
            });

            modelBuilder.Entity<CustomerGiftDetailModel>(entity =>
            {
                entity.HasKey(e => new { e.GiftId, e.CustomerId });

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.CustomerGiftDetailModel)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_CustomerGiftDetailModel_CustomerModel");

                entity.HasOne(d => d.Gift)
                    .WithMany(p => p.CustomerGiftDetailModel)
                    .HasForeignKey(d => d.GiftId)
                    .HasConstraintName("FK_CustomerGiftDetailModel_CustomerGiftModel");
            });

            modelBuilder.Entity<CustomerGiftModel>(entity =>
            {
                entity.Property(e => e.GiftId).ValueGeneratedNever();
            });

            modelBuilder.Entity<CustomerLevelModel>(entity =>
            {
                entity.Property(e => e.CustomerLevelId).ValueGeneratedNever();
            });

            modelBuilder.Entity<CustomerModel>(entity =>
            {
                entity.HasKey(e => e.CustomerId)
                    .HasName("PK_CustomerModel_1");

                entity.Property(e => e.CustomerId).ValueGeneratedNever();
            });

            modelBuilder.Entity<CustomerModel1>(entity =>
            {
                entity.Property(e => e.CustomerId).ValueGeneratedNever();

                entity.Property(e => e.GeneratedCode).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<CustomerPromotionModel>(entity =>
            {
                entity.Property(e => e.PromotionId).ValueGeneratedNever();
            });

            modelBuilder.Entity<CustomerTastesModel>(entity =>
            {
                entity.HasKey(e => e.CustomerTasteId)
                    .HasName("PK_Customer_Tastes_Model_1");

                entity.Property(e => e.CustomerTasteId).ValueGeneratedNever();
            });

            modelBuilder.Entity<CustomerTastes_CollectionModel>(entity =>
            {
                entity.HasKey(e => e.CollectionId)
                    .HasName("PK_Customer_Tastes_Collection_Model_1");

                entity.Property(e => e.CollectionId).ValueGeneratedNever();
            });

            modelBuilder.Entity<CustomerTastes_ColorToneModel>(entity =>
            {
                entity.HasKey(e => e.ColorToneId)
                    .HasName("PK_Customer_Tastes_ColorTone_Model_1");

                entity.Property(e => e.ColorToneId).ValueGeneratedNever();
            });

            modelBuilder.Entity<CustomerTastes_ProductGroupModel>(entity =>
            {
                entity.HasKey(e => e.ProductGroupId)
                    .HasName("PK_Customer_Tastes_ProductGroup_Model_1");

                entity.Property(e => e.ProductGroupId).ValueGeneratedNever();
            });

            modelBuilder.Entity<CustomerTastes_WoodGrainModel>(entity =>
            {
                entity.HasKey(e => e.WoodGrainId)
                    .HasName("PK_Customer_Tastes_WoodGrain_Model_1");

                entity.Property(e => e.WoodGrainId).ValueGeneratedNever();
            });

            modelBuilder.Entity<DatatableConfig>(entity =>
            {
                entity.Property(e => e.ConfigId).ValueGeneratedNever();
            });

            modelBuilder.Entity<DateClosedHistoryModel>(entity =>
            {
                entity.Property(e => e.DateClosedId).ValueGeneratedNever();
            });

            modelBuilder.Entity<DateClosedModel>(entity =>
            {
                entity.Property(e => e.DateClosedId).ValueGeneratedNever();
            });

            modelBuilder.Entity<DeliveryDetailModel>(entity =>
            {
                entity.Property(e => e.DeliveryDetailId).ValueGeneratedNever();

                entity.HasOne(d => d.DateKeyNavigation)
                    .WithMany(p => p.DeliveryDetailModel)
                    .HasForeignKey(d => d.DateKey)
                    .HasConstraintName("FK_DeliveryDetailModel_DimDate");

                entity.HasOne(d => d.Delivery)
                    .WithMany(p => p.DeliveryDetailModel)
                    .HasForeignKey(d => d.DeliveryId)
                    .HasConstraintName("FK_DeliveryDetailModel_DeliveryModel");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.DeliveryDetailModel)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("FK_DeliveryDetailModel_ProductModel");

                entity.HasOne(d => d.Stock)
                    .WithMany(p => p.DeliveryDetailModel)
                    .HasForeignKey(d => d.StockId)
                    .HasConstraintName("FK_DeliveryDetailModel_StockModel");
            });

            modelBuilder.Entity<DeliveryModel>(entity =>
            {
                entity.Property(e => e.DeliveryId).ValueGeneratedNever();

                entity.Property(e => e.DeliveryCode).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.DeliveryModel)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_DeliveryModel_CompanyModel");

                entity.HasOne(d => d.Profile)
                    .WithMany(p => p.DeliveryModel)
                    .HasForeignKey(d => d.ProfileId)
                    .HasConstraintName("FK_DeliveryModel_ProfileModel");

                entity.HasOne(d => d.SalesEmployeeCodeNavigation)
                    .WithMany(p => p.DeliveryModel)
                    .HasForeignKey(d => d.SalesEmployeeCode)
                    .HasConstraintName("FK_DeliveryModel_SalesEmployeeModel");

                entity.HasOne(d => d.Store)
                    .WithMany(p => p.DeliveryModel)
                    .HasForeignKey(d => d.StoreId)
                    .HasConstraintName("FK_DeliveryModel_StoreModel");
            });

            modelBuilder.Entity<DepartmentModel>(entity =>
            {
                entity.Property(e => e.DepartmentId).ValueGeneratedNever();

                entity.HasOne(d => d.Store)
                    .WithMany(p => p.DepartmentModel)
                    .HasForeignKey(d => d.StoreId)
                    .HasConstraintName("FK_DepartmentModel_StoreModel");
            });

            modelBuilder.Entity<Department_Equipment_Mapping>(entity =>
            {
                entity.Property(e => e.MappingId).ValueGeneratedNever();
            });

            modelBuilder.Entity<Department_Routing_Mapping>(entity =>
            {
                entity.HasKey(e => new { e.DepartmentId, e.StepId });

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.Department_Routing_Mapping)
                    .HasForeignKey(d => d.DepartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Department_Routing_Mapping_DepartmentModel");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.Department_Routing_Mapping)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Department_Routing_Mapping_RoutingModel");
            });

            modelBuilder.Entity<DetailOutboundDeliveryModel>(entity =>
            {
                entity.Property(e => e.DetailOutboundDeliveryId).ValueGeneratedNever();

                entity.HasOne(d => d.OutboundDelivery)
                    .WithMany(p => p.DetailOutboundDeliveryModel)
                    .HasForeignKey(d => d.OutboundDeliveryId)
                    .HasConstraintName("FK_DetailOutboundDeliveryModel_OutboundDeliveryModel");
            });

            modelBuilder.Entity<DetailQCModel>(entity =>
            {
                entity.Property(e => e.DetailQCId).ValueGeneratedNever();

                entity.Property(e => e.Conclusion).IsFixedLength();

                entity.HasOne(d => d.CommandQC)
                    .WithMany(p => p.DetailQCModel)
                    .HasForeignKey(d => d.CommandQCId)
                    .HasConstraintName("FK_DetailQCModel_CommandQCModel");

                entity.HasOne(d => d.Error)
                    .WithMany(p => p.DetailQCModel)
                    .HasForeignKey(d => d.ErrorId)
                    .HasConstraintName("FK_DetailQCModel_ErrorListModel");

                entity.HasOne(d => d.TestTarget)
                    .WithMany(p => p.DetailQCModel)
                    .HasForeignKey(d => d.TestTargetId)
                    .HasConstraintName("FK_DetailQCModel_TestTargetModel");
            });

            modelBuilder.Entity<DetailReservationModel>(entity =>
            {
                entity.Property(e => e.DetailReservationId).ValueGeneratedNever();

                entity.HasOne(d => d.Reservation)
                    .WithMany(p => p.DetailReservationModel)
                    .HasForeignKey(d => d.ReservationId)
                    .HasConstraintName("FK_DetailReservationModel_ReservationModel");
            });

            modelBuilder.Entity<DetailSaleOrderModel>(entity =>
            {
                entity.Property(e => e.DetailSaleOrderId).ValueGeneratedNever();

                entity.HasOne(d => d.SaleOrderHeader)
                    .WithMany(p => p.DetailSaleOrderModel)
                    .HasForeignKey(d => d.SaleOrderHeaderId)
                    .HasConstraintName("FK_DetailSaleOrderModel_DetailSaleOrderModel");
            });

            modelBuilder.Entity<DetailSalesDocumentModel>(entity =>
            {
                entity.Property(e => e.DetailSalesDocumentId).ValueGeneratedNever();

                entity.HasOne(d => d.SalesDocument)
                    .WithMany(p => p.DetailSalesDocumentModel)
                    .HasForeignKey(d => d.SalesDocumentId)
                    .HasConstraintName("FK_DetailSalesDocumentModel_DetailSalesDocumentModel");
            });

            modelBuilder.Entity<DetailStageTranferModel>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.StageTranfer)
                    .WithMany(p => p.DetailStageTranferModel)
                    .HasForeignKey(d => d.StageTranferId)
                    .HasConstraintName("FK_DetailStageTranferModel_StageTransferModel");

                entity.HasOne(d => d.Stock)
                    .WithMany(p => p.DetailStageTranferModel)
                    .HasForeignKey(d => d.StockId)
                    .HasConstraintName("FK_DetailStageTranferModel_StockModel");
            });

            modelBuilder.Entity<DetailWorkOrderModel>(entity =>
            {
                entity.Property(e => e.DetailWorkOrderId).ValueGeneratedNever();

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.DetailWorkOrderModel)
                    .HasForeignKey(d => d.WorkOrderId)
                    .HasConstraintName("FK_DetailWorkOrderModel_WorkOrderModel");
            });

            modelBuilder.Entity<DimDateModel>(entity =>
            {
                entity.HasKey(e => e.DateKey)
                    .HasName("PK__DimDateM__40DF45E33D4BCE98");

                entity.Property(e => e.DateKey).ValueGeneratedNever();

                entity.Property(e => e.DayOfWeekUK).IsFixedLength();

                entity.Property(e => e.DayOfWeekUSA).IsFixedLength();

                entity.Property(e => e.FiscalMMYYYY).IsFixedLength();

                entity.Property(e => e.FiscalMonthYear).IsFixedLength();

                entity.Property(e => e.FiscalQuarter).IsFixedLength();

                entity.Property(e => e.FiscalYear).IsFixedLength();

                entity.Property(e => e.FiscalYearName).IsFixedLength();

                entity.Property(e => e.FullDateUK).IsFixedLength();

                entity.Property(e => e.FullDateUSA).IsFixedLength();

                entity.Property(e => e.MMYYYY).IsFixedLength();

                entity.Property(e => e.MonthYear).IsFixedLength();

                entity.Property(e => e.Quarter).IsFixedLength();

                entity.Property(e => e.Year).IsFixedLength();

                entity.Property(e => e.YearName).IsFixedLength();
            });

            modelBuilder.Entity<DistributionChannelModel>(entity =>
            {
                entity.Property(e => e.DistributionChannelId).ValueGeneratedNever();
            });

            modelBuilder.Entity<DistrictModel>(entity =>
            {
                entity.Property(e => e.DistrictId).ValueGeneratedNever();
            });

            modelBuilder.Entity<DivisionModel>(entity =>
            {
                entity.Property(e => e.DivisionId).ValueGeneratedNever();
            });

            modelBuilder.Entity<EmailAccountModel>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<EmailConfig>(entity =>
            {
                entity.Property(e => e.EmailConfigId).ValueGeneratedNever();
            });

            modelBuilder.Entity<EmployeeRecordModel>(entity =>
            {
                entity.Property(e => e.EmployeeRecordId).ValueGeneratedNever();

                entity.HasOne(d => d.OutputRecord)
                    .WithMany(p => p.EmployeeRecordModel)
                    .HasForeignKey(d => d.OutputRecordId)
                    .HasConstraintName("FK_OutputRecordModel_EmployeeRecordModel");
            });

            modelBuilder.Entity<EquimenRecordModel>(entity =>
            {
                entity.Property(e => e.EquipmentRecordId).ValueGeneratedNever();

                entity.HasOne(d => d.OutputRecord)
                    .WithMany(p => p.EquimenRecordModel)
                    .HasForeignKey(d => d.OutputRecordId)
                    .HasConstraintName("FK_EquimenRecordModel_OutputRecordModel");
            });

            modelBuilder.Entity<EquipmentCardModel>(entity =>
            {
                entity.Property(e => e.EquipmentCardId).ValueGeneratedNever();
            });

            modelBuilder.Entity<EquipmentGroupModel>(entity =>
            {
                entity.Property(e => e.EquipmentGroupId).ValueGeneratedNever();
            });

            modelBuilder.Entity<EquipmentModel>(entity =>
            {
                entity.Property(e => e.EquipmentId).ValueGeneratedNever();

                entity.Property(e => e.EquipmentIntId).ValueGeneratedOnAdd();

                entity.HasOne(d => d.WorkShop)
                    .WithMany(p => p.EquipmentModel)
                    .HasForeignKey(d => d.WorkShopId)
                    .HasConstraintName("FK_EquipmentModel_WorkShopModel");
            });

            modelBuilder.Entity<EquipmentStatus_Temp>(entity =>
            {
                entity.Property(e => e.id).ValueGeneratedNever();
            });

            modelBuilder.Entity<ErrorListModel>(entity =>
            {
                entity.Property(e => e.ErrorListId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ExcelLogModel>(entity =>
            {
                entity.Property(e => e.LogId).ValueGeneratedNever();
            });

            modelBuilder.Entity<FavoriteReportModel>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.FavoriteReportModel)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FavoriteReportModel_AccountModel");

                entity.HasOne(d => d.Page)
                    .WithMany(p => p.FavoriteReportModel)
                    .HasForeignKey(d => d.PageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FavoriteReportModel_PageModel");
            });

            modelBuilder.Entity<FileAttachmentModel>(entity =>
            {
                entity.Property(e => e.FileAttachmentId).ValueGeneratedNever();
            });

            modelBuilder.Entity<FixingTypeModel>(entity =>
            {
                entity.Property(e => e.FixingTypeId).ValueGeneratedNever();

                entity.Property(e => e.Actived).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<GH_NotificationModel>(entity =>
            {
                entity.Property(e => e.NotificationId).ValueGeneratedNever();
            });

            modelBuilder.Entity<GoodsReceiptModel>(entity =>
            {
                entity.Property(e => e.GoodsReceiptId).ValueGeneratedNever();

                entity.HasOne(d => d.PurchaseOrderDetail)
                    .WithMany(p => p.GoodsReceiptModel)
                    .HasForeignKey(d => d.PurchaseOrderDetailId)
                    .HasConstraintName("FK_GoodsReceiptModel_PurchaseOrderDetailModel");
            });

            modelBuilder.Entity<GoodsReturnModel>(entity =>
            {
                entity.Property(e => e.GoodsReturnId).ValueGeneratedNever();

                entity.HasOne(d => d.DetailOD)
                    .WithMany(p => p.GoodsReturnModel)
                    .HasForeignKey(d => d.DetailODId)
                    .HasConstraintName("FK_GoodsReturnModel_DetailOutboundDeliveryModel");
            });

            modelBuilder.Entity<HangTagModel>(entity =>
            {
                entity.Property(e => e.HangTagId).ValueGeneratedNever();
            });

            modelBuilder.Entity<Hash>(entity =>
            {
                entity.HasKey(e => new { e.Key, e.Field })
                    .HasName("PK_HangFire_Hash");

                entity.HasIndex(e => e.ExpireAt, "IX_HangFire_Hash_ExpireAt")
                    .HasFilter("([ExpireAt] IS NOT NULL)");
            });

            modelBuilder.Entity<HeaderSaleOrderModel>(entity =>
            {
                entity.Property(e => e.SaleOrderHeaderId).ValueGeneratedNever();
            });

            modelBuilder.Entity<HistoryModel>(entity =>
            {
                entity.Property(e => e.HistoryModifyId).ValueGeneratedNever();
            });

            modelBuilder.Entity<InhouseTransferModel>(entity =>
            {
                entity.Property(e => e.InhouseTransferId).ValueGeneratedNever();

                entity.HasOne(d => d.DetailOD)
                    .WithMany(p => p.InhouseTransferModel)
                    .HasForeignKey(d => d.DetailODId)
                    .HasConstraintName("FK_InhouseTransferModel_DetailOutboundDeliveryModel");
            });

            modelBuilder.Entity<IssueForProductionModel>(entity =>
            {
                entity.Property(e => e.IssForProductiontId).ValueGeneratedNever();

                entity.HasOne(d => d.DetailWorkOrder)
                    .WithMany(p => p.IssueForProductionModel)
                    .HasForeignKey(d => d.DetailWorkOrderId)
                    .HasConstraintName("FK_IssueForProductionModel_DetailWorkOrderModel");
            });

            modelBuilder.Entity<Job>(entity =>
            {
                entity.HasIndex(e => e.ExpireAt, "IX_HangFire_Job_ExpireAt")
                    .HasFilter("([ExpireAt] IS NOT NULL)");

                entity.HasIndex(e => e.StateName, "IX_HangFire_Job_StateName")
                    .HasFilter("([StateName] IS NOT NULL)");
            });

            modelBuilder.Entity<JobParameter>(entity =>
            {
                entity.HasKey(e => new { e.JobId, e.Name })
                    .HasName("PK_HangFire_JobParameter");

                entity.HasOne(d => d.Job)
                    .WithMany(p => p.JobParameter)
                    .HasForeignKey(d => d.JobId)
                    .HasConstraintName("FK_HangFire_JobParameter_Job");
            });

            modelBuilder.Entity<JobQueue>(entity =>
            {
                entity.HasKey(e => new { e.Queue, e.Id })
                    .HasName("PK_HangFire_JobQueue");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<KanbanDetailModel>(entity =>
            {
                entity.Property(e => e.KanbanDetailId).ValueGeneratedNever();

                entity.HasOne(d => d.Kanban)
                    .WithMany(p => p.KanbanDetailModel)
                    .HasForeignKey(d => d.KanbanId)
                    .HasConstraintName("FK_KanbanDetailModel_KanbanModel");
            });

            modelBuilder.Entity<KanbanModel>(entity =>
            {
                entity.Property(e => e.KanbanId).ValueGeneratedNever();
            });

            modelBuilder.Entity<Kanban_TaskStatus_Mapping>(entity =>
            {
                entity.HasKey(e => new { e.KanbanDetailId, e.TaskStatusId })
                    .HasName("PK_Kanban_Task_Mapping");

                entity.HasOne(d => d.KanbanDetail)
                    .WithMany(p => p.Kanban_TaskStatus_Mapping)
                    .HasForeignKey(d => d.KanbanDetailId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Kanban_TaskStatus_Mapping_KanbanDetailModel");

                entity.HasOne(d => d.TaskStatus)
                    .WithMany(p => p.Kanban_TaskStatus_Mapping)
                    .HasForeignKey(d => d.TaskStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Kanban_TaskStatus_Mapping_TaskStatusModel");
            });

            modelBuilder.Entity<LaborModel>(entity =>
            {
                entity.Property(e => e.Actived).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<LastRunCheckInOutModel>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<List>(entity =>
            {
                entity.HasKey(e => new { e.Key, e.Id })
                    .HasName("PK_HangFire_List");

                entity.HasIndex(e => e.ExpireAt, "IX_HangFire_List_ExpireAt")
                    .HasFilter("([ExpireAt] IS NOT NULL)");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Log_BC01Model>(entity =>
            {
                entity.Property(e => e.Log_BC01ID).ValueGeneratedNever();
            });

            modelBuilder.Entity<Log_BC18Model>(entity =>
            {
                entity.Property(e => e.Log_BC18ID).ValueGeneratedNever();
            });

            modelBuilder.Entity<MachineChainModel>(entity =>
            {
                entity.Property(e => e.MachineChainId).ValueGeneratedNever();

                entity.Property(e => e.MachineChainIntId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<MailServerProviderModel>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<MarmModel>(entity =>
            {
                entity.Property(e => e.MarnId).ValueGeneratedNever();
            });

            modelBuilder.Entity<MatchCardCommandModel>(entity =>
            {
                entity.Property(e => e.MatchCardCommandId).ValueGeneratedNever();
            });

            modelBuilder.Entity<MaterialDocumentModel>(entity =>
            {
                entity.Property(e => e.MaterialDocId).ValueGeneratedNever();
            });

            modelBuilder.Entity<MaterialGroupModel>(entity =>
            {
                entity.HasKey(e => e.MaterialGroupId)
                    .HasName("PK_MaterialGroup");

                entity.Property(e => e.MaterialGroupId).ValueGeneratedNever();
            });

            modelBuilder.Entity<MaterialModel>(entity =>
            {
                entity.Property(e => e.Actived).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.ContainerRequirementCodeNavigation)
                    .WithMany(p => p.MaterialModel)
                    .HasForeignKey(d => d.ContainerRequirementCode)
                    .HasConstraintName("FK_MaterialModel_ContainerRequirementModel");

                entity.HasOne(d => d.LaborCodeNavigation)
                    .WithMany(p => p.MaterialModel)
                    .HasForeignKey(d => d.LaborCode)
                    .HasConstraintName("FK_MaterialModel_LaborModel");

                entity.HasOne(d => d.ProductHierarchyCodeNavigation)
                    .WithMany(p => p.MaterialModel)
                    .HasForeignKey(d => d.ProductHierarchyCode)
                    .HasConstraintName("FK_MaterialModel_ProductHierarchyModel");

                entity.HasOne(d => d.ProfitCenterCodeNavigation)
                    .WithMany(p => p.MaterialModel)
                    .HasForeignKey(d => d.ProfitCenterCode)
                    .HasConstraintName("FK_MaterialModel_ProfitCenterModel");

                entity.HasOne(d => d.TemperatureConditionCodeNavigation)
                    .WithMany(p => p.MaterialModel)
                    .HasForeignKey(d => d.TemperatureConditionCode)
                    .HasConstraintName("FK_MaterialModel_TemperatureConditionModel");
            });

            modelBuilder.Entity<MaterialTypeModel>(entity =>
            {
                entity.Property(e => e.MaterialTypeId).ValueGeneratedNever();
            });

            modelBuilder.Entity<MaterialTypeModel1>(entity =>
            {
                entity.HasKey(e => e.MaterialTypeId)
                    .HasName("PK_MaterialType");

                entity.Property(e => e.MaterialTypeId).ValueGeneratedNever();
            });

            modelBuilder.Entity<MemberOfExternalProfileTargetGroupModel>(entity =>
            {
                entity.Property(e => e.ExternalProfileTargetGroupId).ValueGeneratedNever();

                entity.HasOne(d => d.TargetGroup)
                    .WithMany(p => p.MemberOfExternalProfileTargetGroupModel)
                    .HasForeignKey(d => d.TargetGroupId)
                    .HasConstraintName("FK_MemberOfExternalProfileTargetGroupModel_TargetGroupModel");
            });

            modelBuilder.Entity<MemberOfTargetGroupModel>(entity =>
            {
                entity.HasKey(e => new { e.TargetGroupId, e.ProfileId })
                    .HasName("PK_MemberOfTagetGroupModel");

                entity.HasOne(d => d.TargetGroup)
                    .WithMany(p => p.MemberOfTargetGroupModel)
                    .HasForeignKey(d => d.TargetGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MemberOfTagetGroupModel_TargetGroupModel");
            });

            modelBuilder.Entity<MenuModel>(entity =>
            {
                entity.Property(e => e.MenuId).ValueGeneratedNever();

                entity.HasOne(d => d.Module)
                    .WithMany(p => p.MenuModel)
                    .HasForeignKey(d => d.ModuleId)
                    .HasConstraintName("FK_MenuModel_ModuleModel");
            });

            modelBuilder.Entity<MigoModel>(entity =>
            {
                entity.Property(e => e.MigoId).ValueGeneratedNever();
            });

            modelBuilder.Entity<MobileScreenModel>(entity =>
            {
                entity.Property(e => e.MobileScreenId).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.Menu)
                    .WithMany(p => p.MobileScreenModel)
                    .HasForeignKey(d => d.MenuId)
                    .HasConstraintName("FK_MobileScreenModel_MenuModel");

                entity.HasMany(d => d.Function)
                    .WithMany(p => p.MobileScreen)
                    .UsingEntity<Dictionary<string, object>>(
                        "MobileScreenFunctionModel",
                        l => l.HasOne<FunctionModel>().WithMany().HasForeignKey("FunctionId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_MobileScreenFunctionModel_FunctionModel"),
                        r => r.HasOne<MobileScreenModel>().WithMany().HasForeignKey("MobileScreenId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_MobileScreenFunctionModel_MobileScreenModel"),
                        j =>
                        {
                            j.HasKey("MobileScreenId", "FunctionId");

                            j.ToTable("MobileScreenFunctionModel", "ghMasterData");

                            j.IndexerProperty<string>("FunctionId").HasMaxLength(50);
                        });
            });

            modelBuilder.Entity<MobileScreenPermissionModel>(entity =>
            {
                entity.HasKey(e => new { e.RolesId, e.MobileScreenId, e.FunctionId });

                entity.HasOne(d => d.Function)
                    .WithMany(p => p.MobileScreenPermissionModel)
                    .HasForeignKey(d => d.FunctionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MobileScreenPermissionModel_FunctionModel");

                entity.HasOne(d => d.MobileScreen)
                    .WithMany(p => p.MobileScreenPermissionModel)
                    .HasForeignKey(d => d.MobileScreenId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MobileScreenPermissionModel_MobileScreenModel");

                entity.HasOne(d => d.Roles)
                    .WithMany(p => p.MobileScreenPermissionModel)
                    .HasForeignKey(d => d.RolesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MobileScreenPermissionModel_RolesModel");
            });

            modelBuilder.Entity<ModuleModel>(entity =>
            {
                entity.Property(e => e.ModuleId).ValueGeneratedNever();
            });

            modelBuilder.Entity<MoldRecordModel>(entity =>
            {
                entity.Property(e => e.MoldRecordId).ValueGeneratedNever();

                entity.HasOne(d => d.OutputRecord)
                    .WithMany(p => p.MoldRecordModel)
                    .HasForeignKey(d => d.OutputRecordId)
                    .HasConstraintName("FK_MoldRecordModel_OutputRecordModel");
            });

            modelBuilder.Entity<NFCCheckInOutModel>(entity =>
            {
                entity.Property(e => e.CheckInId).ValueGeneratedNever();
            });

            modelBuilder.Entity<NewsCategoryModel>(entity =>
            {
                entity.Property(e => e.NewsCategoryId).ValueGeneratedNever();

                entity.Property(e => e.NewsCategoryCode).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<NewsModel>(entity =>
            {
                entity.Property(e => e.NewsId).ValueGeneratedNever();

                entity.Property(e => e.NewsCode).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<News_Company_Mapping>(entity =>
            {
                entity.HasKey(e => new { e.NewsId, e.CompanyId });
            });

            modelBuilder.Entity<NotificationAccountMappingModel>(entity =>
            {
                entity.HasKey(e => new { e.NotificationId, e.AccountId });

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.NotificationAccountMappingModel)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("FK_NotificationAccountMappingModel_AccountModel");

                entity.HasOne(d => d.Notification)
                    .WithMany(p => p.NotificationAccountMappingModel)
                    .HasForeignKey(d => d.NotificationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NotificationAccountMappingModel_NotificationModel");
            });

            modelBuilder.Entity<NotificationModel>(entity =>
            {
                entity.Property(e => e.NotificationId).ValueGeneratedNever();
            });

            modelBuilder.Entity<OrderTypeModel>(entity =>
            {
                entity.Property(e => e.OrderTypeId).ValueGeneratedNever();

                entity.Property(e => e.Category).IsFixedLength();
            });

            modelBuilder.Entity<OutboundDeliveryModel>(entity =>
            {
                entity.Property(e => e.OutboundDeliveryId).ValueGeneratedNever();
            });

            modelBuilder.Entity<OutputRecordModel>(entity =>
            {
                entity.Property(e => e.OutputRecordId).ValueGeneratedNever();

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.OutputRecordModel)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_OutputRecordModel_DepartmentModel");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.OutputRecordModel)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("FK_OutputRecordModel_ProductModel");

                entity.HasOne(d => d.Stock)
                    .WithMany(p => p.OutputRecordModel)
                    .HasForeignKey(d => d.StockId)
                    .HasConstraintName("FK_OutputRecordModel_StockModel");
            });

            modelBuilder.Entity<POTEXT_PR_SO_Model>(entity =>
            {
                entity.Property(e => e.POTEXTId).ValueGeneratedNever();
            });

            modelBuilder.Entity<PageModel>(entity =>
            {
                entity.Property(e => e.PageId).ValueGeneratedNever();

                entity.HasOne(d => d.Menu)
                    .WithMany(p => p.PageModel)
                    .HasForeignKey(d => d.MenuId)
                    .HasConstraintName("FK_PageModel_MenuModel");

                entity.HasMany(d => d.Function)
                    .WithMany(p => p.Page)
                    .UsingEntity<Dictionary<string, object>>(
                        "PageFunctionModel",
                        l => l.HasOne<FunctionModel>().WithMany().HasForeignKey("FunctionId").HasConstraintName("FK_PageFunctionModel_FunctionModel"),
                        r => r.HasOne<PageModel>().WithMany().HasForeignKey("PageId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_PageFunctionModel_PageModel"),
                        j =>
                        {
                            j.HasKey("PageId", "FunctionId");

                            j.ToTable("PageFunctionModel", "pms");

                            j.IndexerProperty<string>("FunctionId").HasMaxLength(50);
                        });
            });

            modelBuilder.Entity<PagePermissionModel>(entity =>
            {
                entity.HasKey(e => new { e.RolesId, e.PageId, e.FunctionId });

                entity.HasOne(d => d.Function)
                    .WithMany(p => p.PagePermissionModel)
                    .HasForeignKey(d => d.FunctionId)
                    .HasConstraintName("FK_PagePermissionModel_FunctionModel");

                entity.HasOne(d => d.Page)
                    .WithMany(p => p.PagePermissionModel)
                    .HasForeignKey(d => d.PageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PagePermissionModel_PageModel");

                entity.HasOne(d => d.Roles)
                    .WithMany(p => p.PagePermissionModel)
                    .HasForeignKey(d => d.RolesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PagePermissionModel_RolesModel");
            });

            modelBuilder.Entity<Page_Module_Mapping>(entity =>
            {
                entity.HasKey(e => new { e.ModuleId, e.PageId });
            });

            modelBuilder.Entity<PartnerModel>(entity =>
            {
                entity.Property(e => e.PartnerId).ValueGeneratedNever();

                entity.HasOne(d => d.PartnerProfile)
                    .WithMany(p => p.PartnerModelPartnerProfile)
                    .HasForeignKey(d => d.PartnerProfileId)
                    .HasConstraintName("FK_PartnerModel_ProfileModel1");

                entity.HasOne(d => d.Profile)
                    .WithMany(p => p.PartnerModelProfile)
                    .HasForeignKey(d => d.ProfileId)
                    .HasConstraintName("FK_PartnerModel_ProfileModel");
            });

            modelBuilder.Entity<PaymentMethodModel>(entity =>
            {
                entity.Property(e => e.PaymentMethodId).ValueGeneratedNever();

                entity.Property(e => e.PaymentMethodType).HasComment("0: Tiền mặt, 1: Chuyển khoản, 2: Trả góp");
            });

            modelBuilder.Entity<PaymentNationalBudgetModel>(entity =>
            {
                entity.HasKey(e => e.PaymentNationalId)
                    .HasName("PK_ConfigPaymentNational");

                entity.Property(e => e.PaymentNationalId).ValueGeneratedNever();
            });

            modelBuilder.Entity<PeriodicallyCheckingModel>(entity =>
            {
                entity.Property(e => e.PeriodicallyCheckingId).ValueGeneratedNever();
            });

            modelBuilder.Entity<PersonInChargeDeletedModel>(entity =>
            {
                entity.Property(e => e.PersonInChargeId).ValueGeneratedNever();
            });

            modelBuilder.Entity<PersonInChargeModel>(entity =>
            {
                entity.Property(e => e.PersonInChargeId).ValueGeneratedNever();

                entity.Property(e => e.SalesEmployeeType).HasComment("1: NV kinh doanh, 2: NV sales admin");

                entity.HasOne(d => d.Profile)
                    .WithMany(p => p.PersonInChargeModel)
                    .HasForeignKey(d => d.ProfileId)
                    .HasConstraintName("FK_PersonInChargeModel_ProfileModel");

                entity.HasOne(d => d.SalesEmployeeCodeNavigation)
                    .WithMany(p => p.PersonInChargeModel)
                    .HasForeignKey(d => d.SalesEmployeeCode)
                    .HasConstraintName("FK_PersonInChargeModel_SalesEmployeeModel");
            });

            modelBuilder.Entity<PhysicsWorkShopModel>(entity =>
            {
                entity.Property(e => e.PhysicsWorkShopId).ValueGeneratedNever();
            });

            modelBuilder.Entity<PlantModel>(entity =>
            {
                entity.Property(e => e.PlantId).ValueGeneratedNever();
            });

            modelBuilder.Entity<PlateFeeDetailModel>(entity =>
            {
                entity.Property(e => e.PlateFeeDetailId).ValueGeneratedNever();

                entity.HasOne(d => d.PlateFee)
                    .WithMany(p => p.PlateFeeDetailModel)
                    .HasForeignKey(d => d.PlateFeeId)
                    .HasConstraintName("FK_PlateFeeDetailModel_PlateFeeModel");
            });

            modelBuilder.Entity<PlateFeeModel>(entity =>
            {
                entity.Property(e => e.PlateFeeId).ValueGeneratedNever();
            });

            modelBuilder.Entity<PrintMoldModel>(entity =>
            {
                entity.Property(e => e.PrintMoldId).ValueGeneratedNever();

                entity.Property(e => e.PrintMoldIntId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<ProductGroupModel>(entity =>
            {
                entity.Property(e => e.ProductGroupId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProductHierarchyModel>(entity =>
            {
                entity.Property(e => e.Actived).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<ProductModel>(entity =>
            {
                entity.HasKey(e => e.ProductId)
                    .HasName("PK_ProductModel_1");

                entity.Property(e => e.ProductId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProductModel1>(entity =>
            {
                entity.Property(e => e.ProductId).ValueGeneratedNever();

                entity.HasOne(d => d.CategoryDetail)
                    .WithMany(p => p.ProductModel1CategoryDetail)
                    .HasForeignKey(d => d.CategoryDetailId)
                    .HasConstraintName("FK_ProductModel_CategoryModel");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.ProductModel1Category)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("FK_ProductModel_CategoryModel1");

                entity.HasOne(d => d.ParentCategory)
                    .WithMany(p => p.ProductModel1ParentCategory)
                    .HasForeignKey(d => d.ParentCategoryId)
                    .HasConstraintName("FK_ProductModel_CategoryModel2");
            });

            modelBuilder.Entity<ProductVersionModel>(entity =>
            {
                entity.Property(e => e.ProductVersionId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProductWarrantyModel>(entity =>
            {
                entity.Property(e => e.ProductWarrantyId).ValueGeneratedNever();

                entity.Property(e => e.ProductWarrantyCode).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductWarrantyModel)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductWarrantyModel_ProductModel");

                entity.HasOne(d => d.Profile)
                    .WithMany(p => p.ProductWarrantyModel)
                    .HasForeignKey(d => d.ProfileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductWarrantyModel_ProfileModel");

                entity.HasOne(d => d.Warranty)
                    .WithMany(p => p.ProductWarrantyModel)
                    .HasForeignKey(d => d.WarrantyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductWarrantyModel_WarrantyModel");
            });

            modelBuilder.Entity<Product_Routing_Mapping>(entity =>
            {
                entity.Property(e => e.Product_Routing_MappingId).ValueGeneratedNever();
            });

            modelBuilder.Entity<Product_Routing_Mapping_Deleted>(entity =>
            {
                entity.Property(e => e.Product_Routing_MappingId).ValueGeneratedNever();
            });

            modelBuilder.Entity<Product_Routing_Mold_Mapping>(entity =>
            {
                entity.Property(e => e.Product_Routing_Mold_MappingId).ValueGeneratedNever();

                entity.HasOne(d => d.Product_Routing_Mapping)
                    .WithMany(p => p.Product_Routing_Mold_Mapping)
                    .HasForeignKey(d => d.Product_Routing_MappingId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Product_Routing_Mold_Mapping_Product_Routing_Mapping");
            });

            modelBuilder.Entity<Product_Routing_Mold_Mapping_Deleted>(entity =>
            {
                entity.Property(e => e.Product_Routing_Mold_MappingId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProductionComponent80Model>(entity =>
            {
                entity.Property(e => e.ProductComponentId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProductionComponentModel>(entity =>
            {
                entity.Property(e => e.ProductComponentId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProductionOperation80Model>(entity =>
            {
                entity.Property(e => e.ProductOperationId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProductionOperationModel>(entity =>
            {
                entity.Property(e => e.ProductOperationId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProductionOrder80Model>(entity =>
            {
                entity.Property(e => e.ProductionOrderId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProductionOrderModel>(entity =>
            {
                entity.Property(e => e.ProductionOrderId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProfileBAttributeModel>(entity =>
            {
                entity.Property(e => e.ProfileId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProfileCAttributeModel>(entity =>
            {
                entity.HasKey(e => e.ProfileId)
                    .HasName("PK_ProfileCAttributeMode");

                entity.Property(e => e.ProfileId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProfileCareerModel>(entity =>
            {
                entity.Property(e => e.ProfileCareerId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProfileConfigModel>(entity =>
            {
                entity.HasKey(e => new { e.ProfileCategoryCode, e.FieldCode });
            });

            modelBuilder.Entity<ProfileContactAttributeDeletedModel>(entity =>
            {
                entity.Property(e => e.ProfileId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProfileContactAttributeModel>(entity =>
            {
                entity.HasKey(e => e.ProfileId)
                    .HasName("PK_ProfileContactAttributeModel_1");

                entity.Property(e => e.ProfileId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProfileDeletedModel>(entity =>
            {
                entity.Property(e => e.ProfileId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProfileEmailDeletedModel>(entity =>
            {
                entity.Property(e => e.EmailId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProfileEmailModel>(entity =>
            {
                entity.Property(e => e.EmailId).ValueGeneratedNever();

                entity.HasOne(d => d.Profile)
                    .WithMany(p => p.ProfileEmailModel)
                    .HasForeignKey(d => d.ProfileId)
                    .HasConstraintName("FK_ProfileEmailModel_ProfileModel");
            });

            modelBuilder.Entity<ProfileGroupModel>(entity =>
            {
                entity.Property(e => e.ProfileGroupId).ValueGeneratedNever();

                entity.HasOne(d => d.Profile)
                    .WithMany(p => p.ProfileGroupModel)
                    .HasForeignKey(d => d.ProfileId)
                    .HasConstraintName("FK_ProfileGroupModel_ProfileModel");
            });

            modelBuilder.Entity<ProfileLevelModel>(entity =>
            {
                entity.HasKey(e => e.CustomerLevelId)
                    .HasName("PK_CustomerLevelModel_1");

                entity.Property(e => e.CustomerLevelId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProfileModel>(entity =>
            {
                entity.HasIndex(e => e.ProfileForeignCode, "UQ_Profile_ProfileForeignCode")
                    .IsUnique()
                    .HasFilter("([ProfileForeignCode] IS NOT NULL)");

                entity.Property(e => e.ProfileId).ValueGeneratedNever();

                entity.Property(e => e.CreateRequestTime).HasComment("Thời gian yêu cầu tạo khách ở ECC");

                entity.Property(e => e.ProfileCode).ValueGeneratedOnAdd();

                entity.Property(e => e.ReferenceProfileId).HasComment("Chủ Đầu Tư");

                entity.Property(e => e.ReferenceProfileId2).HasComment("Tư vấn & TK");

                entity.Property(e => e.isCreateRequest).HasComment("yêu cầu tạo khách ở ECC");
            });

            modelBuilder.Entity<ProfilePhoneDeletedModel>(entity =>
            {
                entity.Property(e => e.PhoneId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProfilePhoneModel>(entity =>
            {
                entity.Property(e => e.PhoneId).ValueGeneratedNever();

                entity.HasOne(d => d.Profile)
                    .WithMany(p => p.ProfilePhoneModel)
                    .HasForeignKey(d => d.ProfileId)
                    .HasConstraintName("FK_ProfilePhoneModel_ProfileModel");
            });

            modelBuilder.Entity<ProfileTypeModel>(entity =>
            {
                entity.Property(e => e.ProfileTypeId).ValueGeneratedNever();
            });

            modelBuilder.Entity<Profile_File_Mapping>(entity =>
            {
                entity.HasKey(e => new { e.ProfileId, e.FileAttachmentId });

                entity.Property(e => e.Note).IsFixedLength();

                entity.HasOne(d => d.FileAttachment)
                    .WithMany(p => p.Profile_File_Mapping)
                    .HasForeignKey(d => d.FileAttachmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Profile_File_Mapping_FileAttachmentModel");

                entity.HasOne(d => d.Profile)
                    .WithMany(p => p.Profile_File_Mapping)
                    .HasForeignKey(d => d.ProfileId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Profile_File_Mapping_ProfileModel");
            });

            modelBuilder.Entity<Profile_Opportunity_CompetitorModel>(entity =>
            {
                entity.Property(e => e.OpportunityCompetitorId).ValueGeneratedNever();

                entity.Property(e => e.SuccessfulBidder).HasComment("Trúng thầu");

                entity.HasOne(d => d.Competitor)
                    .WithMany(p => p.Profile_Opportunity_CompetitorModelCompetitor)
                    .HasForeignKey(d => d.CompetitorId)
                    .HasConstraintName("FK_Profile_Opportunity_CompetitorModel_ProfileModel_Competitor");

                entity.HasOne(d => d.Profile)
                    .WithMany(p => p.Profile_Opportunity_CompetitorModelProfile)
                    .HasForeignKey(d => d.ProfileId)
                    .HasConstraintName("FK_Profile_Opportunity_CompetitorModel_ProfileModel_Profile");
            });

            modelBuilder.Entity<Profile_Opportunity_InternalModel>(entity =>
            {
                entity.Property(e => e.OpportunityInternalId).ValueGeneratedNever();

                entity.HasOne(d => d.Internal)
                    .WithMany(p => p.Profile_Opportunity_InternalModelInternal)
                    .HasForeignKey(d => d.InternalId)
                    .HasConstraintName("FK_Profile_Opportunity_InternalModel_ProfileModel_Internal");

                entity.HasOne(d => d.Profile)
                    .WithMany(p => p.Profile_Opportunity_InternalModelProfile)
                    .HasForeignKey(d => d.ProfileId)
                    .HasConstraintName("FK_Profile_Opportunity_InternalModel_ProfileModel_Profile");
            });

            modelBuilder.Entity<Profile_Opportunity_MaterialModel>(entity =>
            {
                entity.Property(e => e.OpportunityMaterialId).ValueGeneratedNever();

                entity.Property(e => e.MaterialType).HasComment("1: Nội thất bàn giao");

                entity.HasOne(d => d.Profile)
                    .WithMany(p => p.Profile_Opportunity_MaterialModel)
                    .HasForeignKey(d => d.ProfileId)
                    .HasConstraintName("FK_Profile_Opportunity_MaterialModel_ProfileModel_Profile");
            });

            modelBuilder.Entity<Profile_Opportunity_PartnerModel>(entity =>
            {
                entity.Property(e => e.OpportunityPartnerId).ValueGeneratedNever();

                entity.Property(e => e.PartnerType).HasComment("1: Chủ đầu tư, 2: Thiết kế, 3: Tổng thầu, 4: Căn mẫu, 5: Đại trà");

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.Profile_Opportunity_PartnerModelPartner)
                    .HasForeignKey(d => d.PartnerId)
                    .HasConstraintName("FK_Profile_Opportunity_PartnerModel_ProfileModel_Partner");

                entity.HasOne(d => d.Profile)
                    .WithMany(p => p.Profile_Opportunity_PartnerModelProfile)
                    .HasForeignKey(d => d.ProfileId)
                    .HasConstraintName("FK_Profile_Opportunity_PartnerModel_ProfileModel_Profile");
            });

            modelBuilder.Entity<ProfitCenterModel>(entity =>
            {
                entity.Property(e => e.Actived).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<PrognosisModel>(entity =>
            {
                entity.Property(e => e.PrognosisId).ValueGeneratedNever();
            });

            modelBuilder.Entity<PromotionByStoreModel>(entity =>
            {
                entity.HasKey(e => new { e.PromotionId, e.StoreId });

                entity.HasOne(d => d.Store)
                    .WithMany(p => p.PromotionByStoreModel)
                    .HasForeignKey(d => d.StoreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PromotionByStoreModel_StoreModel");
            });

            modelBuilder.Entity<PromotionGiftAccessoryModel>(entity =>
            {
                entity.HasKey(e => e.GiftMaterialId)
                    .HasName("PK_PromotionGiftMaterialModel");

                entity.Property(e => e.GiftMaterialId).ValueGeneratedNever();
            });

            modelBuilder.Entity<PromotionModel>(entity =>
            {
                entity.Property(e => e.PromotionId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProspectModel>(entity =>
            {
                entity.Property(e => e.ProspectId).ValueGeneratedNever();

                entity.Property(e => e.GeneratedCode).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<ProvinceModel>(entity =>
            {
                entity.HasIndex(e => e.ProvinceCode, "ProvinceCode_UNIQUE")
                    .IsUnique()
                    .HasFilter("([ProvinceCode] IS NOT NULL)");

                entity.Property(e => e.ProvinceId).ValueGeneratedNever();
            });

            modelBuilder.Entity<PurchaseOrderDetailModel>(entity =>
            {
                entity.Property(e => e.PurchaseOrderDetailId).ValueGeneratedNever();

                entity.HasOne(d => d.PurchaseOrder)
                    .WithMany(p => p.PurchaseOrderDetailModel)
                    .HasForeignKey(d => d.PurchaseOrderId)
                    .HasConstraintName("FK_PurchaseOrderDetailModel_PurchaseOrderMasterModel");
            });

            modelBuilder.Entity<PurchaseOrderMasterModel>(entity =>
            {
                entity.Property(e => e.PurchaseOrderId).ValueGeneratedNever();
            });

            modelBuilder.Entity<PurchaseOrderModel>(entity =>
            {
                entity.Property(e => e.PurchaseOrderId).ValueGeneratedNever();
            });

            modelBuilder.Entity<PurchaseRequisitionModel>(entity =>
            {
                entity.Property(e => e.PurchaseRequisitionId).ValueGeneratedNever();
            });

            modelBuilder.Entity<PurchasingGroupModel>(entity =>
            {
                entity.Property(e => e.PurchasingGroupId).ValueGeneratedNever();
            });

            modelBuilder.Entity<PurchasingOrgModel>(entity =>
            {
                entity.Property(e => e.PurchasingOrgId).ValueGeneratedNever();
            });

            modelBuilder.Entity<QualityControlDetailModel>(entity =>
            {
                entity.Property(e => e.QualityControlDetailId).ValueGeneratedNever();
            });

            modelBuilder.Entity<QualityControlInformationModel>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Code).ValueGeneratedOnAdd();

                entity.HasMany(d => d.WorkCenterCode)
                    .WithMany(p => p.QualityControlInformation)
                    .UsingEntity<Dictionary<string, object>>(
                        "QualityControlInformation_WorkCenter_Mapping",
                        l => l.HasOne<WorkCenterModel>().WithMany().HasForeignKey("WorkCenterCode").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_QualityControlInformation_WorkCenter_Mapping_WorkCenterModel"),
                        r => r.HasOne<QualityControlInformationModel>().WithMany().HasForeignKey("QualityControlInformationId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_QualityControlInformation_WorkCenter_Mapping_QualityControlInformation_WorkCenter_Mapping1"),
                        j =>
                        {
                            j.HasKey("QualityControlInformationId", "WorkCenterCode");

                            j.ToTable("QualityControlInformation_WorkCenter_Mapping", "MES");

                            j.IndexerProperty<string>("WorkCenterCode").HasMaxLength(50);
                        });
            });

            modelBuilder.Entity<QualityControlModel>(entity =>
            {
                entity.HasKey(e => e.QualityControlId)
                    .HasName("PK_QualityControlModel_1");

                entity.Property(e => e.QualityControlId).ValueGeneratedNever();

                entity.Property(e => e.Environmental).IsFixedLength();

                entity.Property(e => e.QualityControlCode).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<QualityControl_Error_File_Mapping>(entity =>
            {
                entity.HasKey(e => new { e.FileAttachmentId, e.QuanlityControl_Error_Id });
            });

            modelBuilder.Entity<QualityControl_Error_Mapping>(entity =>
            {
                entity.HasKey(e => e.QuanlityControl_Error_Id)
                    .HasName("PK_QuanlityControl_Error_Mapping");

                entity.Property(e => e.QuanlityControl_Error_Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<QualityControl_FileAttachment_Mapping>(entity =>
            {
                entity.HasKey(e => new { e.FileAttachmentId, e.QualityControlId });

                entity.HasOne(d => d.FileAttachment)
                    .WithMany(p => p.QualityControl_FileAttachment_Mapping)
                    .HasForeignKey(d => d.FileAttachmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_QualityControl_FileAttachment_Mapping_FileAttachmentModel");

                entity.HasOne(d => d.QualityControl)
                    .WithMany(p => p.QualityControl_FileAttachment_Mapping)
                    .HasForeignKey(d => d.QualityControlId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_QualityControl_FileAttachment_Mapping_QualityControlModel");
            });

            modelBuilder.Entity<QualityControl_QCInformation_File_Mapping>(entity =>
            {
                entity.HasKey(e => new { e.FileAttachmentId, e.QualityControl_QCInformation_Id });
            });

            modelBuilder.Entity<QualityControl_QCInformation_Mapping>(entity =>
            {
                entity.Property(e => e.QualityControl_QCInformation_Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<QuestionBankModel>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.QuestionBankCode).ValueGeneratedOnAdd();

                entity.HasOne(d => d.CreateByNavigation)
                    .WithMany(p => p.QuestionBankModelCreateByNavigation)
                    .HasForeignKey(d => d.CreateBy)
                    .HasConstraintName("FK_QuestionBankModel_AccountModel");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.QuestionBankModelDepartment)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_QuestionBankModel_CatalogModel1");

                entity.HasOne(d => d.LastEditByNavigation)
                    .WithMany(p => p.QuestionBankModelLastEditByNavigation)
                    .HasForeignKey(d => d.LastEditBy)
                    .HasConstraintName("FK_QuestionBankModel_AccountModel1");

                entity.HasOne(d => d.QuestionCategory)
                    .WithMany(p => p.QuestionBankModelQuestionCategory)
                    .HasForeignKey(d => d.QuestionCategoryId)
                    .HasConstraintName("FK_QuestionBankModel_CatalogModel");
            });

            modelBuilder.Entity<RatingModel>(entity =>
            {
                entity.Property(e => e.RatingId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ReceiptFromProductionModel>(entity =>
            {
                entity.Property(e => e.RcFromProductiontId).ValueGeneratedNever();

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.ReceiptFromProductionModel)
                    .HasForeignKey(d => d.WorkOrderId)
                    .HasConstraintName("FK_ReceiptFromProductionModel_WorkOrderModel");
            });

            modelBuilder.Entity<RefreshToken>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<RegisterReceiveNewsModel>(entity =>
            {
                entity.Property(e => e.RegisterReceiveNewsId).ValueGeneratedNever();
            });

            modelBuilder.Entity<RemindTaskModel>(entity =>
            {
                entity.Property(e => e.TaskId).ValueGeneratedNever();
            });

            modelBuilder.Entity<RequestEccEmailConfigModel>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<ReservationModel>(entity =>
            {
                entity.HasKey(e => e.ReservationId)
                    .HasName("PK_ReservationModel_1");

                entity.Property(e => e.ReservationId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ReservationModel1>(entity =>
            {
                entity.Property(e => e.ReservationId).ValueGeneratedNever();
            });

            modelBuilder.Entity<RoleInChargeDeletedModel>(entity =>
            {
                entity.Property(e => e.RoleInChargeId).ValueGeneratedNever();
            });

            modelBuilder.Entity<RoleInChargeModel>(entity =>
            {
                entity.Property(e => e.RoleInChargeId).ValueGeneratedNever();

                entity.HasOne(d => d.Profile)
                    .WithMany(p => p.RoleInChargeModel)
                    .HasForeignKey(d => d.ProfileId)
                    .HasConstraintName("FK_RoleInChargeModel_ProfileModel");

                entity.HasOne(d => d.Roles)
                    .WithMany(p => p.RoleInChargeModel)
                    .HasForeignKey(d => d.RolesId)
                    .HasConstraintName("FK_RoleInChargeModel_RolesModel");
            });

            modelBuilder.Entity<RolesModel>(entity =>
            {
                entity.HasKey(e => e.RolesId)
                    .HasName("PK__RolesMod__C4B278410A3A22E7")
                    .IsClustered(false);

                entity.Property(e => e.RolesId).HasDefaultValueSql("(newsequentialid())");
            });

            modelBuilder.Entity<RoutingInventorModel>(entity =>
            {
                entity.Property(e => e.RoutingInventorId).ValueGeneratedNever();
            });

            modelBuilder.Entity<RoutingModel>(entity =>
            {
                entity.Property(e => e.StepId).ValueGeneratedNever();
            });

            modelBuilder.Entity<RoutingSapModel>(entity =>
            {
                entity.Property(e => e.RoutingSapId).ValueGeneratedNever();
            });

            modelBuilder.Entity<Routing_Equipment_Mapping>(entity =>
            {
                entity.Property(e => e.Routing_Equipment_MappingId).ValueGeneratedNever();
            });

            modelBuilder.Entity<SMSModel>(entity =>
            {
                entity.Property(e => e.SMSId).ValueGeneratedNever();
            });

            modelBuilder.Entity<SO100ScheduleLineModel>(entity =>
            {
                entity.Property(e => e.SO100ScheduleLineId).ValueGeneratedNever();
            });

            modelBuilder.Entity<SO100TextModel>(entity =>
            {
                entity.Property(e => e.SO100TextId).ValueGeneratedNever();
            });

            modelBuilder.Entity<SO80ScheduleLineModel>(entity =>
            {
                entity.Property(e => e.SO80ScheduleLineId).ValueGeneratedNever();
            });

            modelBuilder.Entity<SO80TextModel>(entity =>
            {
                entity.Property(e => e.SO80TextId).ValueGeneratedNever();
            });

            modelBuilder.Entity<SOTEXT_PR_Model>(entity =>
            {
                entity.HasKey(e => new { e.WERKS, e.BANFN, e.BNFPO, e.ZMES_VBELN, e.MATNR });
            });

            modelBuilder.Entity<SOTextHeader100Model>(entity =>
            {
                entity.Property(e => e.SOTextHeader100Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<SOTextHeader80Model>(entity =>
            {
                entity.Property(e => e.SOTextHeader80Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<SOTextItem100Model>(entity =>
            {
                entity.Property(e => e.SOTextItem100Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<SOTextItem80Model>(entity =>
            {
                entity.Property(e => e.SOTextItem80Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<SaleOrderDetailModel>(entity =>
            {
                entity.HasKey(e => e.SaleOrderDetailId)
                    .HasName("PK_SaleOrderDetailModel_1");

                entity.Property(e => e.SaleOrderDetailId).ValueGeneratedNever();

                entity.HasOne(d => d.SaleOrderMaster)
                    .WithMany(p => p.SaleOrderDetailModel)
                    .HasForeignKey(d => d.SaleOrderMasterId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_SaleOrderDetailModel_SaleOrderMasterModel");
            });

            modelBuilder.Entity<SaleOrderHeader100Model>(entity =>
            {
                entity.Property(e => e.SO100HeaderId).ValueGeneratedNever();
            });

            modelBuilder.Entity<SaleOrderHeader80Model>(entity =>
            {
                entity.HasKey(e => e.SOHeaderId)
                    .HasName("PK_SaleOrderHeaderModel");

                entity.Property(e => e.SOHeaderId).ValueGeneratedNever();
            });

            modelBuilder.Entity<SaleOrderItem100Model>(entity =>
            {
                entity.Property(e => e.SO100ItemId).ValueGeneratedNever();
            });

            modelBuilder.Entity<SaleOrderItem80Model>(entity =>
            {
                entity.HasKey(e => e.SOItemId)
                    .HasName("PK_SaleOrderItemModel");

                entity.Property(e => e.SOItemId).ValueGeneratedNever();
            });

            modelBuilder.Entity<SaleOrderMasterModel>(entity =>
            {
                entity.HasKey(e => e.SaleOrderMasterId)
                    .HasName("PK_SaleOrderMaster");

                entity.Property(e => e.SaleOrderMasterId).ValueGeneratedNever();

                entity.Property(e => e.GeneratedCode).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.SaleOrderMasterModel)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_SaleOrderMasterModel_CustomerModel");

                entity.HasOne(d => d.MaterialCodeNavigation)
                    .WithMany(p => p.SaleOrderMasterModel)
                    .HasForeignKey(d => d.MaterialCode)
                    .HasConstraintName("FK_SaleOrderMasterModel_MaterialModel");
            });

            modelBuilder.Entity<SaleOrgModel>(entity =>
            {
                entity.Property(e => e.SaleOrgId).ValueGeneratedNever();
            });

            modelBuilder.Entity<SaleProcessModel>(entity =>
            {
                entity.Property(e => e.SaleProcessId).ValueGeneratedNever();
            });

            modelBuilder.Entity<SaleUnitModel>(entity =>
            {
                entity.Property(e => e.SaleUnitId).ValueGeneratedNever();
            });

            modelBuilder.Entity<SalesDocumentModel>(entity =>
            {
                entity.Property(e => e.SalesDocumentId).ValueGeneratedNever();
            });

            modelBuilder.Entity<SalesEmployeeModel>(entity =>
            {
                entity.Property(e => e.Actived).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.SalesEmployeeModel)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_SalesEmployeeModel_DepartmentModel");
            });

            modelBuilder.Entity<SalesOfficeModel>(entity =>
            {
                entity.Property(e => e.SalesOfficeId).ValueGeneratedNever();

                entity.Property(e => e.Actived).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<ScaleModel>(entity =>
            {
                entity.Property(e => e.ScaleId).ValueGeneratedNever();

                entity.Property(e => e.Actived).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<Schema>(entity =>
            {
                entity.HasKey(e => e.Version)
                    .HasName("PK_HangFire_Schema");

                entity.Property(e => e.Version).ValueGeneratedNever();
            });

            modelBuilder.Entity<ScrapFromProductionModel>(entity =>
            {
                entity.Property(e => e.ScFromProductiontId).ValueGeneratedNever();

                entity.HasOne(d => d.DetailWorkOrder)
                    .WithMany(p => p.ScrapFromProductionModel)
                    .HasForeignKey(d => d.DetailWorkOrderId)
                    .HasConstraintName("FK_ScrapFromProductionModel_WorkOrderModel");
            });

            modelBuilder.Entity<SearchResultDetailTemplateModel>(entity =>
            {
                entity.Property(e => e.SearchResultDetailTemplateId).ValueGeneratedNever();

                entity.HasOne(d => d.SearchResultTemplate)
                    .WithMany(p => p.SearchResultDetailTemplateModel)
                    .HasForeignKey(d => d.SearchResultTemplateId)
                    .HasConstraintName("FK_SearchResultDetailTemplateModel_SearchResultTemplateModel");
            });

            modelBuilder.Entity<SearchResultTemplateModel>(entity =>
            {
                entity.Property(e => e.SearchResultTemplateId).ValueGeneratedNever();
            });

            modelBuilder.Entity<SearchTemplateModel>(entity =>
            {
                entity.Property(e => e.SearchTemplateId).ValueGeneratedNever();
            });

            modelBuilder.Entity<SendMailCalendarModel>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CheckinTime).HasComment("Thời gian checkin");

                entity.Property(e => e.ConfirmTime).HasComment("Thời gian xác nhận");

                entity.Property(e => e.isCheckin).HasComment("Đã check in");

                entity.Property(e => e.isConfirm).HasComment("Đã xác nhận");
            });

            modelBuilder.Entity<ServiceAppointmentModel>(entity =>
            {
                entity.Property(e => e.AppointmentId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ServiceFlagModel>(entity =>
            {
                entity.Property(e => e.ServiceFlagId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ServiceOrderConsultModel>(entity =>
            {
                entity.Property(e => e.ServiceOrderConsultId).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.ServiceOrder)
                    .WithMany(p => p.ServiceOrderConsultModel)
                    .HasForeignKey(d => d.ServiceOrderId)
                    .HasConstraintName("FK_ServiceOrderConsultModel_ServiceOrderModel");
            });

            modelBuilder.Entity<ServiceOrderDetailAccessoryModel>(entity =>
            {
                entity.HasKey(e => e.ServiceOrderDetailAccessoryId)
                    .HasName("PK_ServiceOrderDetailAccessoryMode");

                entity.Property(e => e.ServiceOrderDetailAccessoryId).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.ServiceOrder)
                    .WithMany(p => p.ServiceOrderDetailAccessoryModel)
                    .HasForeignKey(d => d.ServiceOrderId)
                    .HasConstraintName("FK_ServiceOrderDetailAccessoryModel_ServiceOrderModel");
            });

            modelBuilder.Entity<ServiceOrderDetailModel>(entity =>
            {
                entity.Property(e => e.ServiceOrderDetailId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ServiceOrderDetailServiceModel>(entity =>
            {
                entity.Property(e => e.ServiceOrderDetailServiceId).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.ServiceOrder)
                    .WithMany(p => p.ServiceOrderDetailServiceModel)
                    .HasForeignKey(d => d.ServiceOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceOrderDetailServiceModel_ServiceOrderModel");

                entity.HasOne(d => d.ServiceTypeCodeNavigation)
                    .WithMany(p => p.ServiceOrderDetailServiceModel)
                    .HasForeignKey(d => d.ServiceTypeCode)
                    .HasConstraintName("FK_ServiceOrderDetailServiceModel_ServiceTypeModel");
            });

            modelBuilder.Entity<ServiceOrderModel>(entity =>
            {
                entity.Property(e => e.ServiceOrderId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.GeneratedCode).ValueGeneratedOnAdd();

                entity.Property(e => e.IsNew).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.ServiceOrderModel)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_ServiceOrderModel_CustomerModel");

                entity.HasOne(d => d.SaleOrderMaster)
                    .WithMany(p => p.ServiceOrderModel)
                    .HasForeignKey(d => d.SaleOrderMasterId)
                    .HasConstraintName("FK_ServiceOrderModel_SaleOrderMasterModel");

                entity.HasOne(d => d.Vehicle)
                    .WithMany(p => p.ServiceOrderModel)
                    .HasForeignKey(d => d.VehicleId)
                    .HasConstraintName("FK_ServiceOrderModel_VehicleInfoModel");
            });

            modelBuilder.Entity<ServiceOrderPoolModel>(entity =>
            {
                entity.Property(e => e.ServiceOrderPoolId).ValueGeneratedNever();
            });

            modelBuilder.Entity<ServiceOrderTypeModel>(entity =>
            {
                entity.HasKey(e => e.ServiceOrderTypeCode)
                    .HasName("PK_ServiceCategoryModel_1");
            });

            modelBuilder.Entity<ServiceTypeModel>(entity =>
            {
                entity.Property(e => e.Actived).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<Set>(entity =>
            {
                entity.HasKey(e => new { e.Key, e.Value })
                    .HasName("PK_HangFire_Set");

                entity.HasIndex(e => e.ExpireAt, "IX_HangFire_Set_ExpireAt")
                    .HasFilter("([ExpireAt] IS NOT NULL)");
            });

            modelBuilder.Entity<ShippingPointModel>(entity =>
            {
                entity.Property(e => e.ShippingPointId).ValueGeneratedNever();

                entity.Property(e => e.Actived).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<SourceModel>(entity =>
            {
                entity.Property(e => e.SourceId).ValueGeneratedNever();
            });

            modelBuilder.Entity<SpecificationsModel>(entity =>
            {
                entity.Property(e => e.SpecificationsId).ValueGeneratedNever();
            });

            modelBuilder.Entity<StageTransferModel>(entity =>
            {
                entity.Property(e => e.StageTranferId).ValueGeneratedNever();

                entity.HasOne(d => d.FromStock)
                    .WithMany(p => p.StageTransferModelFromStock)
                    .HasForeignKey(d => d.FromStockId)
                    .HasConstraintName("FK_StageTransferModel_StockModel");

                entity.HasOne(d => d.ToStock)
                    .WithMany(p => p.StageTransferModelToStock)
                    .HasForeignKey(d => d.ToStockId)
                    .HasConstraintName("FK_StageTransferModel_StockModel1");
            });

            modelBuilder.Entity<State>(entity =>
            {
                entity.HasKey(e => new { e.JobId, e.Id })
                    .HasName("PK_HangFire_State");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Job)
                    .WithMany(p => p.State)
                    .HasForeignKey(d => d.JobId)
                    .HasConstraintName("FK_HangFire_State_Job");
            });

            modelBuilder.Entity<StateTreasuryModel>(entity =>
            {
                entity.Property(e => e.StateTreasuryId).ValueGeneratedNever();
            });

            modelBuilder.Entity<StatusTransitionModel>(entity =>
            {
                entity.Property(e => e.StatusTransitionId).ValueGeneratedNever();

                entity.HasOne(d => d.FromStatus)
                    .WithMany(p => p.StatusTransitionModelFromStatus)
                    .HasForeignKey(d => d.FromStatusId)
                    .HasConstraintName("FK_StatusTransitionModel_TaskStatusModel");

                entity.HasOne(d => d.ToStatus)
                    .WithMany(p => p.StatusTransitionModelToStatus)
                    .HasForeignKey(d => d.ToStatusId)
                    .HasConstraintName("FK_StatusTransitionModel_TaskStatusModel1");

                entity.HasOne(d => d.WorkFlow)
                    .WithMany(p => p.StatusTransitionModel)
                    .HasForeignKey(d => d.WorkFlowId)
                    .HasConstraintName("FK_StatusTransitionModel_WorkFlowModel");
            });

            modelBuilder.Entity<StatusTransition_Task_Mapping>(entity =>
            {
                entity.HasKey(e => e.TaskTransitionLogId)
                    .HasName("PK_TaskTransitionLogModel");

                entity.Property(e => e.TaskTransitionLogId).ValueGeneratedNever();
            });

            modelBuilder.Entity<StockModel>(entity =>
            {
                entity.Property(e => e.StockId).ValueGeneratedNever();
            });

            modelBuilder.Entity<StockReceivingDetailModel>(entity =>
            {
                entity.HasKey(e => e.StockReceivingDetailId)
                    .HasName("PK_StockRecevingDetailModel");

                entity.Property(e => e.StockReceivingDetailId).ValueGeneratedNever();

                entity.HasOne(d => d.CustomerReferenceNavigation)
                    .WithMany(p => p.StockReceivingDetailModel)
                    .HasForeignKey(d => d.CustomerReference)
                    .HasConstraintName("FK_StockReceivingDetailModel_ThucThiLenhSanXuatModel");

                entity.HasOne(d => d.DateKeyNavigation)
                    .WithMany(p => p.StockReceivingDetailModel)
                    .HasForeignKey(d => d.DateKey)
                    .HasConstraintName("FK_StockRecevingDetailModel_DimDate");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.StockReceivingDetailModel)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_StockReceivingDetailModel_DepartmentModel");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.StockReceivingDetailModel)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("FK_StockRecevingDetailModel_ProductModel");

                entity.HasOne(d => d.Stock)
                    .WithMany(p => p.StockReceivingDetailModel)
                    .HasForeignKey(d => d.StockId)
                    .HasConstraintName("FK_StockRecevingDetailModel_StockModel");

                entity.HasOne(d => d.StockReceiving)
                    .WithMany(p => p.StockReceivingDetailModel)
                    .HasForeignKey(d => d.StockReceivingId)
                    .HasConstraintName("FK_StockRecevingDetailModel_StockReceivingMasterModel");
            });

            modelBuilder.Entity<StockReceivingMasterModel>(entity =>
            {
                entity.Property(e => e.StockReceivingId).ValueGeneratedNever();

                entity.Property(e => e.StockReceivingCode).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.StockReceivingMasterModel)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_StockReceivingMasterModel_CompanyModel");

                entity.HasOne(d => d.Profile)
                    .WithMany(p => p.StockReceivingMasterModel)
                    .HasForeignKey(d => d.ProfileId)
                    .HasConstraintName("FK_StockReceivingMasterModel_ProfileModel");

                entity.HasOne(d => d.SalesEmployeeCodeNavigation)
                    .WithMany(p => p.StockReceivingMasterModel)
                    .HasForeignKey(d => d.SalesEmployeeCode)
                    .HasConstraintName("FK_StockReceivingMasterModel_SalesEmployeeModel");

                entity.HasOne(d => d.Store)
                    .WithMany(p => p.StockReceivingMasterModel)
                    .HasForeignKey(d => d.StoreId)
                    .HasConstraintName("FK_StockReceivingMasterModel_StoreModel");
            });

            modelBuilder.Entity<StockTransferRequestDetailModel>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.StockTransferRequestDetailModel)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("FK_StockTransferRequestDetailModel_ProductModel");

                entity.HasOne(d => d.StockTransferRequest)
                    .WithMany(p => p.StockTransferRequestDetailModel)
                    .HasForeignKey(d => d.StockTransferRequestId)
                    .HasConstraintName("FK_StockTransferRequestDetailModel_StockTransferRequestModel");
            });

            modelBuilder.Entity<StockTransferRequestModel>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.StockTransferRequestCode).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.StockTransferRequestModel)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_StockTransferRequestModel_CompanyModel");

                entity.HasOne(d => d.CreateByNavigation)
                    .WithMany(p => p.StockTransferRequestModelCreateByNavigation)
                    .HasForeignKey(d => d.CreateBy)
                    .HasConstraintName("FK_StockTransferRequestModel_AccountModel");

                entity.HasOne(d => d.DeletedByNavigation)
                    .WithMany(p => p.StockTransferRequestModelDeletedByNavigation)
                    .HasForeignKey(d => d.DeletedBy)
                    .HasConstraintName("FK_StockTransferRequestModel_AccountModel2");

                entity.HasOne(d => d.FromStockNavigation)
                    .WithMany(p => p.StockTransferRequestModelFromStockNavigation)
                    .HasForeignKey(d => d.FromStock)
                    .HasConstraintName("FK_StockTransferRequestModel_StockModel");

                entity.HasOne(d => d.LastEditByNavigation)
                    .WithMany(p => p.StockTransferRequestModelLastEditByNavigation)
                    .HasForeignKey(d => d.LastEditBy)
                    .HasConstraintName("FK_StockTransferRequestModel_AccountModel1");

                entity.HasOne(d => d.Store)
                    .WithMany(p => p.StockTransferRequestModel)
                    .HasForeignKey(d => d.StoreId)
                    .HasConstraintName("FK_StockTransferRequestModel_StoreModel");

                entity.HasOne(d => d.ToStockNavigation)
                    .WithMany(p => p.StockTransferRequestModelToStockNavigation)
                    .HasForeignKey(d => d.ToStock)
                    .HasConstraintName("FK_StockTransferRequestModel_StockModel1");
            });

            modelBuilder.Entity<Stock_Store_Mapping>(entity =>
            {
                entity.HasKey(e => new { e.StockId, e.StoreId });

                entity.HasOne(d => d.Stock)
                    .WithMany(p => p.Stock_Store_Mapping)
                    .HasForeignKey(d => d.StockId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Stock_Store_Mapping_StockModel");

                entity.HasOne(d => d.Store)
                    .WithMany(p => p.Stock_Store_Mapping)
                    .HasForeignKey(d => d.StoreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Stock_Store_Mapping_StoreModel");
            });

            modelBuilder.Entity<StorageLocationModel>(entity =>
            {
                entity.Property(e => e.StorageLocationId).ValueGeneratedNever();
            });

            modelBuilder.Entity<StoreModel>(entity =>
            {
                entity.Property(e => e.StoreId).ValueGeneratedNever();

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.StoreModel)
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StoreModel_CompanyModel");
            });

            modelBuilder.Entity<StoreTypeModel>(entity =>
            {
                entity.HasKey(e => e.StoreTypeId)
                    .HasName("PK_StoreTypeMode");

                entity.Property(e => e.StoreTypeId).ValueGeneratedNever();
            });

            modelBuilder.Entity<StyleModel>(entity =>
            {
                entity.Property(e => e.StyleId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TargetGroupModel>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.TargetGroupCode).ValueGeneratedOnAdd();

                entity.Property(e => e.Type).HasComment("Marketing|Event");

                entity.HasOne(d => d.CreateByNavigation)
                    .WithMany(p => p.TargetGroupModelCreateByNavigation)
                    .HasForeignKey(d => d.CreateBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TargetGroupModel_AccountModel");

                entity.HasOne(d => d.LastEditByNavigation)
                    .WithMany(p => p.TargetGroupModelLastEditByNavigation)
                    .HasForeignKey(d => d.LastEditBy)
                    .HasConstraintName("FK_TargetGroupModel_AccountModel1");
            });

            modelBuilder.Entity<TaskAssignModel>(entity =>
            {
                entity.Property(e => e.TaskAssignId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TaskCommentModel>(entity =>
            {
                entity.Property(e => e.TaskCommentId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TaskContactModel>(entity =>
            {
                entity.Property(e => e.TaskContactId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TaskGroupDetailModel>(entity =>
            {
                entity.HasKey(e => new { e.GroupId, e.AccountId });
            });

            modelBuilder.Entity<TaskGroupModel>(entity =>
            {
                entity.Property(e => e.GroupId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TaskModel>(entity =>
            {
                entity.Property(e => e.TaskId).ValueGeneratedNever();

                entity.Property(e => e.ConstructionUnit).HasComment("đơn vị thi công");

                entity.Property(e => e.ConstructionUnitContact).HasComment("liên hệ của đơn vị thi công");

                entity.Property(e => e.Property6).HasComment("Giá trị ĐTB");

                entity.Property(e => e.ShortNote).HasComment("Ghi chú ngắn dùng để edit trực tiếp trên lịch");

                entity.Property(e => e.TaskCode).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TaskReferenceModel>(entity =>
            {
                entity.Property(e => e.TaskReferenceId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TaskReporterModel>(entity =>
            {
                entity.Property(e => e.TaskReporterId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TaskRoleInChargeModel>(entity =>
            {
                entity.Property(e => e.RoleInChargeId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TaskStatusModel>(entity =>
            {
                entity.Property(e => e.TaskStatusId).ValueGeneratedNever();

                entity.HasOne(d => d.WorkFlow)
                    .WithMany(p => p.TaskStatusModel)
                    .HasForeignKey(d => d.WorkFlowId)
                    .HasConstraintName("FK_TaskStatusModel_WorkFlowModel");
            });

            modelBuilder.Entity<Task_Component_Mapping>(entity =>
            {
                entity.Property(e => e.MappingId).ValueGeneratedNever();
            });

            modelBuilder.Entity<Task_File_Mapping>(entity =>
            {
                entity.HasKey(e => new { e.TaskId, e.FileAttachmentId });

                entity.HasOne(d => d.FileAttachment)
                    .WithMany(p => p.Task_File_Mapping)
                    .HasForeignKey(d => d.FileAttachmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Task_File_Mapping_FileAttachmentModel");

                entity.HasOne(d => d.Task)
                    .WithMany(p => p.Task_File_Mapping)
                    .HasForeignKey(d => d.TaskId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Task_File_Mapping_TaskModel");
            });

            modelBuilder.Entity<Task_Mold_Mapping>(entity =>
            {
                entity.Property(e => e.MappingId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TaxConfigModel>(entity =>
            {
                entity.Property(e => e.TaxId).ValueGeneratedNever();
            });

            modelBuilder.Entity<TemperatureConditionModel>(entity =>
            {
                entity.Property(e => e.Actived).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<TemplateAndGiftCampaignModel>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.TemplateAndGiftCampaignCode).ValueGeneratedOnAdd();

                entity.HasOne(d => d.CreateByNavigation)
                    .WithMany(p => p.TemplateAndGiftCampaignModelCreateByNavigation)
                    .HasForeignKey(d => d.CreateBy)
                    .HasConstraintName("FK_TemplateAndGiftCampaignModel_AccountModel");

                entity.HasOne(d => d.LastEditByNavigation)
                    .WithMany(p => p.TemplateAndGiftCampaignModelLastEditByNavigation)
                    .HasForeignKey(d => d.LastEditBy)
                    .HasConstraintName("FK_TemplateAndGiftCampaignModel_AccountModel1");

                entity.HasOne(d => d.TemplateAndGiftTargetGroup)
                    .WithMany(p => p.TemplateAndGiftCampaignModel)
                    .HasForeignKey(d => d.TemplateAndGiftTargetGroupId)
                    .HasConstraintName("FK_TemplateAndGiftCampaignModel_TemplateAndGiftTargetGroupModel");
            });

            modelBuilder.Entity<TemplateAndGiftMemberAddressModel>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.CreateByNavigation)
                    .WithMany(p => p.TemplateAndGiftMemberAddressModelCreateByNavigation)
                    .HasForeignKey(d => d.CreateBy)
                    .HasConstraintName("FK_TemplateAndGiftMemberAddressModel_AccountModel");

                entity.HasOne(d => d.LastEditByNavigation)
                    .WithMany(p => p.TemplateAndGiftMemberAddressModelLastEditByNavigation)
                    .HasForeignKey(d => d.LastEditBy)
                    .HasConstraintName("FK_TemplateAndGiftMemberAddressModel_AccountModel1");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.TemplateAndGiftMemberAddressModel)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("FK_TemplateAndGiftMemberAddressModel_ProductModel");

                entity.HasOne(d => d.TempalteAndGiftMember)
                    .WithMany(p => p.TemplateAndGiftMemberAddressModel)
                    .HasForeignKey(d => d.TempalteAndGiftMemberId)
                    .HasConstraintName("FK_TemplateAndGiftMemberAddressModel_TemplateAndGiftMemberModel");
            });

            modelBuilder.Entity<TemplateAndGiftMemberModel>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Profile)
                    .WithMany(p => p.TemplateAndGiftMemberModel)
                    .HasForeignKey(d => d.ProfileId)
                    .HasConstraintName("FK_TemplateAndGiftMemberModel_ProfileModel");

                entity.HasOne(d => d.TemplateAndGiftTargetGroup)
                    .WithMany(p => p.TemplateAndGiftMemberModel)
                    .HasForeignKey(d => d.TemplateAndGiftTargetGroupId)
                    .HasConstraintName("FK_TemplateAndGiftMemberModel_TemplateAndGiftTargetGroupModel");
            });

            modelBuilder.Entity<TemplateAndGiftTargetGroupModel>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.TargetGroupCode).ValueGeneratedOnAdd();

                entity.HasOne(d => d.CreateByNavigation)
                    .WithMany(p => p.TemplateAndGiftTargetGroupModelCreateByNavigation)
                    .HasForeignKey(d => d.CreateBy)
                    .HasConstraintName("FK_TemplateAndGiftTargetGroupModel_AccountModel");

                entity.HasOne(d => d.LastEditByNavigation)
                    .WithMany(p => p.TemplateAndGiftTargetGroupModelLastEditByNavigation)
                    .HasForeignKey(d => d.LastEditBy)
                    .HasConstraintName("FK_TemplateAndGiftTargetGroupModel_AccountModel1");
            });

            modelBuilder.Entity<TestTargetModel>(entity =>
            {
                entity.Property(e => e.TestTargetId).ValueGeneratedNever();

                entity.Property(e => e.TargetCode).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.TestTargetModel)
                    .HasForeignKey(d => d.StepId)
                    .HasConstraintName("FK_RoutingModel_TestTargetModel");
            });

            modelBuilder.Entity<ThucThiLenhSanXuatModel>(entity =>
            {
                entity.HasKey(e => e.TaskId)
                    .HasName("PK_ThucThiLenhSanXuat");

                entity.Property(e => e.TaskId).ValueGeneratedNever();

                entity.HasOne(d => d.ParentTask)
                    .WithMany(p => p.ThucThiLenhSanXuatModel)
                    .HasForeignKey(d => d.ParentTaskId)
                    .HasConstraintName("FK_ThucThiLenhSanXuatModel_TaskModel");
            });

            modelBuilder.Entity<TransferDetailModel>(entity =>
            {
                entity.Property(e => e.TransferDetailId).ValueGeneratedNever();

                entity.HasOne(d => d.DateKeyNavigation)
                    .WithMany(p => p.TransferDetailModel)
                    .HasForeignKey(d => d.DateKey)
                    .HasConstraintName("FK_TransferDetailModel_DimDate");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.TransferDetailModel)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("FK_TransferDetailModel_ProductModel");

                entity.HasOne(d => d.ToStock)
                    .WithMany(p => p.TransferDetailModel)
                    .HasForeignKey(d => d.ToStockId)
                    .HasConstraintName("FK_TransferDetailModel_StockModel");
            });

            modelBuilder.Entity<TransferModel>(entity =>
            {
                entity.Property(e => e.TransferId).ValueGeneratedNever();

                entity.Property(e => e.TransferCode).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.TransferModel)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_TransferModel_CompanyModel");

                entity.HasOne(d => d.SalesEmployeeCodeNavigation)
                    .WithMany(p => p.TransferModel)
                    .HasForeignKey(d => d.SalesEmployeeCode)
                    .HasConstraintName("FK_TransferModel_SalesEmployeeModel");

                entity.HasOne(d => d.Store)
                    .WithMany(p => p.TransferModel)
                    .HasForeignKey(d => d.StoreId)
                    .HasConstraintName("FK_TransferModel_StoreModel");
            });

            modelBuilder.Entity<TruckInfoModel>(entity =>
            {
                entity.Property(e => e.TruckInfoId).ValueGeneratedNever();
            });

            modelBuilder.Entity<Unfollow>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<VIEW_TonKhoTheo_SO_CongDoan>(entity =>
            {
                entity.ToView("VIEW_TonKhoTheo_SO_CongDoan", "MES");
            });

            modelBuilder.Entity<VehicleInfoModel>(entity =>
            {
                entity.HasKey(e => e.VehicleId)
                    .HasName("PK_VehicleInfoModel_1");

                entity.Property(e => e.VehicleId).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<VendorModel>(entity =>
            {
                entity.Property(e => e.VendorId).ValueGeneratedNever();
            });

            modelBuilder.Entity<View_BOM_Inventor_Rip>(entity =>
            {
                entity.ToView("View_BOM_Inventor_Rip", "MES");
            });

            modelBuilder.Entity<View_Catalog_Category>(entity =>
            {
                entity.ToView("View_Catalog_Category");
            });

            modelBuilder.Entity<View_FaceCheckIn>(entity =>
            {
                entity.ToView("View_FaceCheckIn", "Task");
            });

            modelBuilder.Entity<View_FaceCheckOut>(entity =>
            {
                entity.ToView("View_FaceCheckOut", "Task");
            });

            modelBuilder.Entity<View_MES_StockReceiving>(entity =>
            {
                entity.ToView("View_MES_StockReceiving");
            });

            modelBuilder.Entity<View_PriorityModel>(entity =>
            {
                entity.ToView("View_PriorityModel");
            });

            modelBuilder.Entity<View_Product_Detail>(entity =>
            {
                entity.ToView("View_Product_Detail", "MES");
            });

            modelBuilder.Entity<View_Product_Material>(entity =>
            {
                entity.ToView("View_Product_Material", "MES");
            });

            modelBuilder.Entity<View_ProfileDeleted_ContactPhone>(entity =>
            {
                entity.ToView("View_ProfileDeleted_ContactPhone", "Customer");
            });

            modelBuilder.Entity<View_Profile_Address>(entity =>
            {
                entity.ToView("View_Profile_Address", "Customer");
            });

            modelBuilder.Entity<View_Profile_Company_Mapping>(entity =>
            {
                entity.ToView("View_Profile_Company_Mapping", "Customer");
            });

            modelBuilder.Entity<View_Profile_ContactPhone>(entity =>
            {
                entity.ToView("View_Profile_ContactPhone", "Customer");
            });

            modelBuilder.Entity<View_Profile_ExtendInfo>(entity =>
            {
                entity.ToView("View_Profile_ExtendInfo", "Customer");
            });

            modelBuilder.Entity<View_Profile_MainContact>(entity =>
            {
                entity.ToView("View_Profile_MainContact", "Customer");
            });

            modelBuilder.Entity<View_Profile_ProfilePhone>(entity =>
            {
                entity.ToView("View_Profile_ProfilePhone", "Customer");
            });

            modelBuilder.Entity<View_SO_Active>(entity =>
            {
                entity.ToView("View_SO_Active", "MES");
            });

            modelBuilder.Entity<View_Stock_Delivery>(entity =>
            {
                entity.ToView("View_Stock_Delivery", "Warehouse");
            });

            modelBuilder.Entity<View_Stock_Receive>(entity =>
            {
                entity.ToView("View_Stock_Receive", "Warehouse");
            });

            modelBuilder.Entity<View_Stock_TransferFrom_Delivery>(entity =>
            {
                entity.ToView("View_Stock_TransferFrom_Delivery", "Warehouse");
            });

            modelBuilder.Entity<View_Stock_TransferTo_Receive>(entity =>
            {
                entity.ToView("View_Stock_TransferTo_Receive", "Warehouse");
            });

            modelBuilder.Entity<View_Task_Area>(entity =>
            {
                entity.ToView("View_Task_Area", "Customer");
            });

            modelBuilder.Entity<View_Task_GTB>(entity =>
            {
                entity.ToView("View_Task_GTB", "Task");
            });

            modelBuilder.Entity<WardModel>(entity =>
            {
                entity.Property(e => e.WardId).ValueGeneratedNever();
            });

            modelBuilder.Entity<WarehouseModel>(entity =>
            {
                entity.Property(e => e.WarehouseId).ValueGeneratedNever();
            });

            modelBuilder.Entity<WarehouseTransferModel>(entity =>
            {
                entity.Property(e => e.WarehouseTransferId).ValueGeneratedNever();

                entity.HasOne(d => d.DetailReservation)
                    .WithMany(p => p.WarehouseTransferModel)
                    .HasForeignKey(d => d.DetailReservationId)
                    .HasConstraintName("FK_WarehouseTransferModel_DetailReservationModel");
            });

            modelBuilder.Entity<WarrantyModel>(entity =>
            {
                entity.Property(e => e.WarrantyId).ValueGeneratedNever();
            });

            modelBuilder.Entity<WeighModel>(entity =>
            {
                entity.Property(e => e.WeighId).ValueGeneratedNever();
            });

            modelBuilder.Entity<WeighSessionDetailModel>(entity =>
            {
                entity.Property(e => e.WeighSessionDetailID).ValueGeneratedNever();

                entity.HasOne(d => d.WeighSession)
                    .WithMany(p => p.WeighSessionDetailModel)
                    .HasForeignKey(d => d.WeighSessionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WeighSessionDetailModel_WeighSessionModel");
            });

            modelBuilder.Entity<WeighSessionModel>(entity =>
            {
                entity.Property(e => e.WeighSessionID).ValueGeneratedNever();

                entity.HasOne(d => d.Scale)
                    .WithMany(p => p.WeighSessionModel)
                    .HasForeignKey(d => d.ScaleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WeighSessionModel_ScaleModel");
            });

            modelBuilder.Entity<WeighingSessionDetailModel>(entity =>
            {
                entity.Property(e => e.WeighingSessionDetailId).ValueGeneratedNever();
            });

            modelBuilder.Entity<WeighingSessionModel>(entity =>
            {
                entity.Property(e => e.WeighingSessionId).ValueGeneratedNever();

                entity.Property(e => e.Active).IsFixedLength();
            });

            modelBuilder.Entity<WorkFlowConfigModel>(entity =>
            {
                entity.HasKey(e => new { e.WorkFlowId, e.FieldCode });
            });

            modelBuilder.Entity<WorkFlowModel>(entity =>
            {
                entity.Property(e => e.WorkFlowId).ValueGeneratedNever();
            });

            modelBuilder.Entity<WorkOrderModel>(entity =>
            {
                entity.HasKey(e => e.WorkOrderId)
                    .HasName("PK_WorkOrderModel_1");

                entity.Property(e => e.WorkOrderId).ValueGeneratedNever();
            });

            modelBuilder.Entity<WorkShopModel>(entity =>
            {
                entity.HasKey(e => e.WorkShopId)
                    .HasName("PK_WorkShop");

                entity.Property(e => e.WorkShopId).ValueGeneratedNever();
            });

            modelBuilder.Entity<WorkingDateModel>(entity =>
            {
                entity.HasKey(e => e.WorkingDateId)
                    .HasName("PK_WorkingDateModel_1");

                entity.Property(e => e.WorkingDateId).ValueGeneratedNever();
            });

            modelBuilder.Entity<WorkingTimeConfigModel>(entity =>
            {
                entity.Property(e => e.WorkingTimeConfigId).ValueGeneratedNever();
            });

            modelBuilder.Entity<WorkingTimeDetailModel>(entity =>
            {
                entity.Property(e => e.WorkingTimeDetailId).ValueGeneratedNever();

                entity.HasOne(d => d.WorkingTime)
                    .WithMany(p => p.WorkingTimeDetailModel)
                    .HasForeignKey(d => d.WorkingTimeId)
                    .HasConstraintName("FK_WorkingTimeDetailModel_WorkingTimeModel");
            });

            modelBuilder.Entity<WorkingTimeModel>(entity =>
            {
                entity.Property(e => e.WorkingTimeId).ValueGeneratedNever();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}