// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Infrastructure.Models;

namespace Infrastructure.Data
{
    public partial class EntityDataContext : DbContext
    {
        public EntityDataContext()
        {
        }

        public EntityDataContext(DbContextOptions<EntityDataContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AccountModel> AccountModel { get; set; }
        public virtual DbSet<BlogModel> BlogModel { get; set; }
        public virtual DbSet<CarCompanyModel> CarCompanyModel { get; set; }
        public virtual DbSet<CarCompany_Package_MappingModel> CarCompany_Package_MappingModel { get; set; }
        public virtual DbSet<CarCompany_SocialMedia_MappingModel> CarCompany_SocialMedia_MappingModel { get; set; }
        public virtual DbSet<CarCompany_Station_MappingModel> CarCompany_Station_MappingModel { get; set; }
        public virtual DbSet<CarModel> CarModel { get; set; }
        public virtual DbSet<CarTypeModel> CarTypeModel { get; set; }
        public virtual DbSet<CatalogModel> CatalogModel { get; set; }
        public virtual DbSet<CatalogTypeModel> CatalogTypeModel { get; set; }
        public virtual DbSet<DeliveryModel> DeliveryModel { get; set; }
        public virtual DbSet<EmployeeModel> EmployeeModel { get; set; }
        public virtual DbSet<PackageModel> PackageModel { get; set; }
        public virtual DbSet<PageFunctionModel> PageFunctionModel { get; set; }
        public virtual DbSet<PageModel> PageModel { get; set; }
        public virtual DbSet<PagePermissionModel> PagePermissionModel { get; set; }
        public virtual DbSet<RateModel> RateModel { get; set; }
        public virtual DbSet<RolesModel> RolesModel { get; set; }
        public virtual DbSet<RouteModel> RouteModel { get; set; }
        public virtual DbSet<SeatModel> SeatModel { get; set; }
        public virtual DbSet<SettingJob> SettingJob { get; set; }
        public virtual DbSet<StationModel> StationModel { get; set; }
        public virtual DbSet<TicketModel> TicketModel { get; set; }
        public virtual DbSet<Ticket_Seat_Mapping> Ticket_Seat_Mapping { get; set; }
        public virtual DbSet<TransactionModel> TransactionModel { get; set; }
        public virtual DbSet<TripModel> TripModel { get; set; }
        public virtual DbSet<UserModel> UserModel { get; set; }
        public virtual DbSet<administrative_regions> administrative_regions { get; set; }
        public virtual DbSet<administrative_units> administrative_units { get; set; }
        public virtual DbSet<districts> districts { get; set; }
        public virtual DbSet<provinces> provinces { get; set; }
        public virtual DbSet<wards> wards { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AccountModel>(entity =>
            {
                entity.Property(e => e.AccountId).ValueGeneratedNever();

                entity.HasMany(d => d.Roles)
                    .WithMany(p => p.Account)
                    .UsingEntity<Dictionary<string, object>>(
                        "AccountInRoleModel",
                        l => l.HasOne<RolesModel>().WithMany().HasForeignKey("RolesId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_AccountInRoleModel_RolesModel"),
                        r => r.HasOne<AccountModel>().WithMany().HasForeignKey("AccountId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_AccountInRoleModel_AccountModel"),
                        j =>
                        {
                            j.HasKey("AccountId", "RolesId");

                            j.ToTable("AccountInRoleModel", "pms");
                        });
            });

            modelBuilder.Entity<BlogModel>(entity =>
            {
                entity.Property(e => e.BlogId).ValueGeneratedNever();

                entity.HasOne(d => d.CarCompany)
                    .WithMany(p => p.BlogModel)
                    .HasForeignKey(d => d.CarCompanyId)
                    .HasConstraintName("FK_BlogModel_CarCompanyModel");
            });

            modelBuilder.Entity<CarCompanyModel>(entity =>
            {
                entity.Property(e => e.CarCompanyId).ValueGeneratedNever();

                entity.Property(e => e.CarCompanyCode).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.CarCompanyModel)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("FK_CarCompanyModel_AccountModel");
            });

            modelBuilder.Entity<CarCompany_Package_MappingModel>(entity =>
            {
                entity.Property(e => e.CarCompany_Package_MappingId).ValueGeneratedNever();

                entity.HasOne(d => d.CarCompany)
                    .WithMany(p => p.CarCompany_Package_MappingModel)
                    .HasForeignKey(d => d.CarCompanyId)
                    .HasConstraintName("FK_CarCompany_Package_MappingModel_CarCompanyModel");

                entity.HasOne(d => d.Package)
                    .WithMany(p => p.CarCompany_Package_MappingModel)
                    .HasForeignKey(d => d.PackageId)
                    .HasConstraintName("FK_CarCompany_Package_MappingModel_PackageModel");
            });

            modelBuilder.Entity<CarCompany_SocialMedia_MappingModel>(entity =>
            {
                entity.Property(e => e.CarCompany_SocialMedia_MappingId).ValueGeneratedNever();

                entity.HasOne(d => d.CarCompany)
                    .WithMany(p => p.CarCompany_SocialMedia_MappingModel)
                    .HasForeignKey(d => d.CarCompanyId)
                    .HasConstraintName("FK_CarCompany_SocialMedia_MappingModel_CarCompanyModel");
            });

            modelBuilder.Entity<CarCompany_Station_MappingModel>(entity =>
            {
                entity.Property(e => e.CarCompany_Station_MappingId).ValueGeneratedNever();

                entity.HasOne(d => d.CarCompany)
                    .WithMany(p => p.CarCompany_Station_MappingModel)
                    .HasForeignKey(d => d.CarCompanyId)
                    .HasConstraintName("FK_CarCompany_Station_MappingModel_CarCompanyModel");

                entity.HasOne(d => d.Station)
                    .WithMany(p => p.CarCompany_Station_MappingModel)
                    .HasForeignKey(d => d.StationId)
                    .HasConstraintName("FK_CarCompany_Station_MappingModel_StationModel");
            });

            modelBuilder.Entity<CarModel>(entity =>
            {
                entity.Property(e => e.CarId).ValueGeneratedNever();

                entity.HasOne(d => d.CarCompany)
                    .WithMany(p => p.CarModel)
                    .HasForeignKey(d => d.CarCompanyId)
                    .HasConstraintName("FK_CarModel_CarCompanyModel");

                entity.HasOne(d => d.CarType)
                    .WithMany(p => p.CarModel)
                    .HasForeignKey(d => d.CarTypeId)
                    .HasConstraintName("FK_CarModel_CarTypeModel");
            });

            modelBuilder.Entity<CarTypeModel>(entity =>
            {
                entity.Property(e => e.CarTypeId).ValueGeneratedNever();
            });

            modelBuilder.Entity<CatalogModel>(entity =>
            {
                entity.Property(e => e.CatalogId).ValueGeneratedNever();
            });

            modelBuilder.Entity<CatalogTypeModel>(entity =>
            {
                entity.Property(e => e.CatalogTypeId).ValueGeneratedNever();
            });

            modelBuilder.Entity<DeliveryModel>(entity =>
            {
                entity.Property(e => e.DeliveryId).ValueGeneratedNever();

                entity.Property(e => e.DeliveryCode).ValueGeneratedOnAdd();

                entity.HasOne(d => d.CarCompany)
                    .WithMany(p => p.DeliveryModel)
                    .HasForeignKey(d => d.CarCompanyId)
                    .HasConstraintName("FK_DeliveryModel_CarCompanyModel");

                entity.HasOne(d => d.Trip)
                    .WithMany(p => p.DeliveryModel)
                    .HasForeignKey(d => d.TripId)
                    .HasConstraintName("FK_DeliveryModel_TripModel");
            });

            modelBuilder.Entity<EmployeeModel>(entity =>
            {
                entity.Property(e => e.EmpoyeeId).ValueGeneratedNever();

                entity.Property(e => e.EmployeeCode).ValueGeneratedOnAdd();

                entity.HasOne(d => d.CarCompany)
                    .WithMany(p => p.EmployeeModel)
                    .HasForeignKey(d => d.CarCompanyId)
                    .HasConstraintName("FK_EmployeeModel_CarCompanyModel");
            });

            modelBuilder.Entity<PackageModel>(entity =>
            {
                entity.Property(e => e.PackageId).ValueGeneratedNever();
            });

            modelBuilder.Entity<PageFunctionModel>(entity =>
            {
                entity.HasKey(e => new { e.PageId, e.FunctionId });

                entity.HasOne(d => d.Page)
                    .WithMany(p => p.PageFunctionModel)
                    .HasForeignKey(d => d.PageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PageFunctionModel_PageModel");
            });

            modelBuilder.Entity<PageModel>(entity =>
            {
                entity.Property(e => e.PageId).ValueGeneratedNever();
            });

            modelBuilder.Entity<PagePermissionModel>(entity =>
            {
                entity.HasKey(e => new { e.RolesId, e.PageId, e.FunctionId });

                entity.HasOne(d => d.Page)
                    .WithMany(p => p.PagePermissionModel)
                    .HasForeignKey(d => d.PageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PagePermissionModel_PageModel");

                entity.HasOne(d => d.Roles)
                    .WithMany(p => p.PagePermissionModel)
                    .HasForeignKey(d => d.RolesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PagePermissionModel_RolesModel");
            });

            modelBuilder.Entity<RateModel>(entity =>
            {
                entity.Property(e => e.RateId).ValueGeneratedNever();

                entity.HasOne(d => d.CarCompany)
                    .WithMany(p => p.RateModel)
                    .HasForeignKey(d => d.CarCompanyId)
                    .HasConstraintName("FK_RateModel_CarCompanyModel");

                entity.HasOne(d => d.Sender)
                    .WithMany(p => p.RateModel)
                    .HasForeignKey(d => d.SenderId)
                    .HasConstraintName("FK_RateModel_UserModel");
            });

            modelBuilder.Entity<RolesModel>(entity =>
            {
                entity.Property(e => e.RolesId).ValueGeneratedNever();
            });

            modelBuilder.Entity<RouteModel>(entity =>
            {
                entity.Property(e => e.RouteId).ValueGeneratedNever();

                entity.HasOne(d => d.CarCompany)
                    .WithMany(p => p.RouteModel)
                    .HasForeignKey(d => d.CarCompanyId)
                    .HasConstraintName("FK_RouteModel_CarCompanyModel");
            });

            modelBuilder.Entity<SeatModel>(entity =>
            {
                entity.Property(e => e.SeatId).ValueGeneratedNever();

                entity.HasOne(d => d.CarType)
                    .WithMany(p => p.SeatModel)
                    .HasForeignKey(d => d.CarTypeId)
                    .HasConstraintName("FK_SeatModel_CarTypeModel");
            });

            modelBuilder.Entity<StationModel>(entity =>
            {
                entity.Property(e => e.StationId).ValueGeneratedNever();

                entity.Property(e => e.DistrictCode).IsFixedLength();

                entity.Property(e => e.ProvinceCode).IsFixedLength();
            });

            modelBuilder.Entity<TicketModel>(entity =>
            {
                entity.Property(e => e.TicketId).ValueGeneratedNever();

                entity.Property(e => e.TicketCode).ValueGeneratedOnAdd();

                entity.HasOne(d => d.CarCompany)
                    .WithMany(p => p.TicketModel)
                    .HasForeignKey(d => d.CarCompanyId)
                    .HasConstraintName("FK_TicketModel_CarCompanyModel");

                entity.HasOne(d => d.Trip)
                    .WithMany(p => p.TicketModel)
                    .HasForeignKey(d => d.TripId)
                    .HasConstraintName("FK_TicketModel_TripModel");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.TicketModel)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_TicketModel_AccountModel");
            });

            modelBuilder.Entity<Ticket_Seat_Mapping>(entity =>
            {
                entity.Property(e => e.Ticket_Seat_MappingId).ValueGeneratedNever();

                entity.HasOne(d => d.Seat)
                    .WithMany(p => p.Ticket_Seat_Mapping)
                    .HasForeignKey(d => d.SeatId)
                    .HasConstraintName("FK_Ticket_Seat_Mapping_SeatModel");

                entity.HasOne(d => d.Ticket)
                    .WithMany(p => p.Ticket_Seat_Mapping)
                    .HasForeignKey(d => d.TicketId)
                    .HasConstraintName("FK_Ticket_Seat_Mapping_TicketModel");
            });

            modelBuilder.Entity<TransactionModel>(entity =>
            {
                entity.Property(e => e.TransactionId).ValueGeneratedNever();

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.TransactionModel)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("FK_TransactionModel_AccountModel");
            });

            modelBuilder.Entity<TripModel>(entity =>
            {
                entity.Property(e => e.TripId).ValueGeneratedNever();

                entity.Property(e => e.TripCode).ValueGeneratedOnAdd();

                entity.HasOne(d => d.CarCompany)
                    .WithMany(p => p.TripModel)
                    .HasForeignKey(d => d.CarCompanyId)
                    .HasConstraintName("FK_TripModel_CarCompanyModel");

                entity.HasOne(d => d.Route)
                    .WithMany(p => p.TripModel)
                    .HasForeignKey(d => d.RouteId)
                    .HasConstraintName("FK_TripModel_RouteModel");
            });

            modelBuilder.Entity<UserModel>(entity =>
            {
                entity.Property(e => e.UserId).ValueGeneratedNever();

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.UserModel)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("FK_UserModel_AccountModel");
            });

            modelBuilder.Entity<administrative_regions>(entity =>
            {
                entity.Property(e => e.id).ValueGeneratedNever();
            });

            modelBuilder.Entity<administrative_units>(entity =>
            {
                entity.Property(e => e.id).ValueGeneratedNever();
            });

            modelBuilder.Entity<districts>(entity =>
            {
                entity.HasKey(e => e.code)
                    .HasName("districts_pkey");

                entity.HasOne(d => d.administrative_unit)
                    .WithMany(p => p.districts)
                    .HasForeignKey(d => d.administrative_unit_id)
                    .HasConstraintName("districts_administrative_unit_id_fkey");

                entity.HasOne(d => d.province_codeNavigation)
                    .WithMany(p => p.districts)
                    .HasForeignKey(d => d.province_code)
                    .HasConstraintName("districts_province_code_fkey");
            });

            modelBuilder.Entity<provinces>(entity =>
            {
                entity.HasKey(e => e.code)
                    .HasName("provinces_pkey");

                entity.HasOne(d => d.administrative_region)
                    .WithMany(p => p.provinces)
                    .HasForeignKey(d => d.administrative_region_id)
                    .HasConstraintName("provinces_administrative_region_id_fkey");

                entity.HasOne(d => d.administrative_unit)
                    .WithMany(p => p.provinces)
                    .HasForeignKey(d => d.administrative_unit_id)
                    .HasConstraintName("provinces_administrative_unit_id_fkey");
            });

            modelBuilder.Entity<wards>(entity =>
            {
                entity.HasKey(e => e.code)
                    .HasName("wards_pkey");

                entity.HasOne(d => d.administrative_unit)
                    .WithMany(p => p.wards)
                    .HasForeignKey(d => d.administrative_unit_id)
                    .HasConstraintName("wards_administrative_unit_id_fkey");

                entity.HasOne(d => d.district_codeNavigation)
                    .WithMany(p => p.wards)
                    .HasForeignKey(d => d.district_code)
                    .HasConstraintName("wards_district_code_fkey");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}